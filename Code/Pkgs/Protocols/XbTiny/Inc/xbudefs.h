/*=============================================================================
  (c) 2003 - 2019 Xantrex Canada ULC. All rights reserved.
  All trademarks are owned or licensed by Xantrex Canada ULC,
  its subsidiaries or affiliated companies.


FILE NAME:  xbudefs.h

PURPOSE:
   
   This file contains defines and types intended to be used by the 
   application interfacing with XanBus.
   The file defines Parameter Group Numbers, the structures used by the
   application, and the enums used in many of the structure fields.
   
FUNCTION(S):
   None
   
NOTES:
   - Autogenerated

=============================================================================*/
#ifndef XBUDEFS_H
#define XBUDEFS_H

#include "LIB_stddefs.h"

// PGN Handling Information
typedef struct zPGN_INFO
{
    uint32 ulPgn;                           // The PG Number of the message
    sint16 siGrpFunc;                       // The Group Function Code if necessary
    tucBOOL tucFastPacket;                  // Does this use fastpacket protocol
    uint16 uiFlags;                         // Control flags
	uint16 uiPgTypeFlags;					// Parameter Group Type flags
    const struct zPGN_DESC * XT_FAR pktzDesc;  // Descriptor for PGN
} XB_tzPGN_INFO;

// Structure for passing a received message to application
typedef struct zRECV_DATA
{
    uint32 ulPgn;                       // The PG Number of message
    sint16 siGrpFunc;                   // The Group Function Code
    const XB_tzPGN_INFO *pktzPgnInfo;   // Pointer to PGN Info 
    void *pvStruct;                     // Pointer to message as structure
    uchar8 ucSrcAddr;                   // Source address from message
    uchar8 ucDest;                      // Destination address from message
    uchar8 ucUseCount;                  // Use counter of structure memory
    uchar8 ucSrcFlags;                  // Flags of source node information
} XB_tzRECV_DATA;

// PGN field types used by tables for packing and unpacking
typedef enum eTYPE
{
    XB_eTYPE_BIT,
    XB_eTYPE_UCHAR,
    XB_eTYPE_SCHAR,
    XB_eTYPE_UINT,
    XB_eTYPE_SINT,
    XB_eTYPE_ULONG,
    XB_eTYPE_SLONG,
    XB_eTYPE_STRING,
    XB_eTYPE_FLOAT,
    XB_eTYPE_DOUBLE,
    XB_eTYPE_POINTER,
    XB_eTYPE_UNDEFINED
} XB_teTYPE;

// PGN field descriptor used for (un)packing
typedef struct zFIELD_DESC
{
    XB_teTYPE teType;           // The basic data type of the field
    uint16 uiMsgOffsetBits;     // Offset to field in message buffer in bits
    uint16 uiFieldCount;        // Number of bytes or bits in field
    uint16 uiStructOffset;      // Offset to field in structure in bytes
    uint16 uiStructSize;        // Size of field in structure in bytes
} XB_tzFIELD_DESC;


// PGN descriptor used for (un)packing
typedef struct zPGN_DESC
{
    sint16 siGrpFuncFieldIndex; // Group Function field number if necessary
    uchar8 ucPriority;          // Default message priority
    void (*pfnRecv)( XB_tzRECV_DATA *ptzRecv );        // Receive handler
    void (*pfnSend)( uchar8 ucDest, tucBOOL tucSolicited );  // Send handler
    uint16 uiFixedLen;          // Length of the fixed part of the message in bytes
    uint16 uiFixedSize;         // Size of the structure at application level
    uint16 uiFixedFields;       // Number of useful fields in the fixed part of the message
    const XB_tzFIELD_DESC * XT_FAR pktzFixedList;  // Array of definitions for the fixed fields
    uint16 uiVarLen;            // Length of the variable parts of the message in bytes
    uint16 uiVarSize;           // Size of the structure used for the variable length part
    uint16 uiVarFields;         // Number of fields within the variable structure
    const XB_tzFIELD_DESC * XT_FAR pktzVarList;    // Array of definitions for the variable fields
} XB_tzPGN_DESC;

// PGN Info flags values
#define XB_FLAG_RX      	0x0001      // Device can receive this PGN
#define XB_FLAG_TX      	0x0002      // Device can send this PGN
#define XB_FLAG_REQ     	0x0004      // Network can request this PGN from device
#define XB_FLAG_DYN     	0x0008      // PGN receive can be controlled dynamically
#define XB_FLAG_PDU1    	0x0040      // PGN is PDU1 format
#define XB_FLAG_PDU2    	0x0080      // PGN is PDU2 format
#define XB_FLAG_RX_DNY  	0x0100      // If not receivable, reply with Deny
#define XB_FLAG_RX_NAK  	0x0200      // If not receivable, reply with NACK
#define XB_FLAG_RX_IGN  	0x0400      // If not receivable, ignore
#define XB_FLAG_NRSP_TX_DNY 0x1000      // If not respondable, reply with Deny
#define XB_FLAG_NRSP_TX_NAK 0x2000      // If not respondable, reply with NACK
#define XB_FLAG_RESP_TX_DNY 0x4000      // If respondable, reply with Deny
#define XB_FLAG_RESP_TX_PGN 0x8000      // If respondable, reply with PGN

// PG Message Type Flag values
#define XB_PG_TYPE_FLAG_MASK	0x000F	// 
#define	XB_PG_TYPE_CMD			0x0001	//	Command
#define	XB_PG_TYPE_REQ			0x0002	//	Request
#define	XB_PG_TYPE_RSP			0x0003	//	Broadcast/Response
#define	XB_PG_TYPE_ACK			0x0004	//	Acknowledgement
#define	XB_PG_TYPE_GFN			0x0005	//	Group Function
#define	XB_PG_TYPE_CFG			0x0006	//	Configuration


/************************************************************************************ 
    The following defines name each PGN
************************************************************************************/

#define XB_PGN_ISO_ACK                    0x00E800L
#define XB_PGN_ISO_REQ                    0x00EA00L
#define XB_PGN_ISO_TP_XFER                0x00EB00L
#define XB_PGN_ISO_TP_CONN_MAN            0x00EC00L
#define XB_PGN_ISO_ADDR_CLAIM             0x00EE00L
#define XB_PGN_HWH_LVL_JACK_STS           0x00FE00L
#define XB_PGN_HWH_LVL_SENS_STS           0x00FE01L
#define XB_PGN_ISO_CMD_ADDR               0x00FED8L
#define XB_PGN_HWH_UNKNOWN_FFF3           0x00FFF3L
#define XB_PGN_HWH_UNKNOWN_FFFA           0x00FFFAL
#define XB_PGN_DC_SRC_CFG_UV              0x010100L
#define XB_PGN_DC_SRC_CFG_OV              0x010200L
#define XB_PGN_DC_SRC_CFG_UI              0x010300L
#define XB_PGN_DC_SRC_CFG_OI              0x010400L
#define XB_PGN_DC_SRC_CFG_RIP_OV_PEAK     0x010500L
#define XB_PGN_AC_OUT_CFG                 0x010600L
#define XB_PGN_AC_IN_CFG_UV_RMS           0x010700L
#define XB_PGN_AC_IN_CFG_UV_PEAK          0x010800L
#define XB_PGN_AC_IN_CFG_UV_AVG           0x010900L
#define XB_PGN_AC_IN_CFG_OV_RMS           0x010A00L
#define XB_PGN_AC_IN_CFG_OV_PEAK          0x010B00L
#define XB_PGN_AC_IN_CFG_OV_AVG           0x010C00L
#define XB_PGN_APS_CFG_UV                 0x010D00L
#define XB_PGN_APS_CFG_OV                 0x010E00L
#define XB_PGN_OPS_CFG_UV                 0x010F00L
#define XB_PGN_OPS_CFG_OV                 0x011000L
#define XB_PGN_HV_DC_BUS_CFG_UV           0x011100L
#define XB_PGN_HV_DC_BUS_CFG_OV           0x011200L
#define XB_PGN_EXT_TEMP_CFG_UT            0x011300L
#define XB_PGN_EXT_TEMP_CFG_OT            0x011400L
#define XB_PGN_INT_TEMP_CFG_UT            0x011500L
#define XB_PGN_INT_TEMP_CFG_OT            0x011600L
#define XB_PGN_CHG_CFG_BULK               0x011700L
#define XB_PGN_CHG_CFG_ABSORP             0x011800L
#define XB_PGN_CHG_CFG_OVERCHARGE         0x011900L
#define XB_PGN_CHG_CFG_FLOAT              0x011A00L
#define XB_PGN_CHG_CFG_EQUALIZE           0x011B00L
#define XB_PGN_CHG_CFG_CV_CI              0x011C00L
#define XB_PGN_DC_SRC_CFG_BATT            0x011D00L
#define XB_PGN_CALIB_CMD                  0x011E00L
#define XB_PGN_AGS_CTRL_CMD               0x011F00L
#define XB_PGN_INV_CFG_LOAD_SENSE         0x012100L
#define XB_PGN_INV_CFG                    0x012200L
#define XB_PGN_SYS_ID_CFG                 0x012300L
#define XB_PGN_RESET_CMD                  0x012400L
#define XB_PGN_ASSOC_CFG                  0x012500L
#define XB_PGN_AC_IN_CFG                  0x012600L
#define XB_PGN_CHG_CFG_MULTIPLE_NODES     0x012700L
#define XB_PGN_CLEAR_CMD                  0x012800L
#define XB_PGN_BATT_MON_CFG               0x012900L
#define XB_PGN_AGS_CFG                    0x012A00L
#define XB_PGN_AGS_CFG_GEN                0x012B00L
#define XB_PGN_CHG_CFG                    0x012C00L
#define XB_PGN_PER_XMIT_CFG               0x012D00L
#define XB_PGN_DEV_PEEK_ADDR_REQ          0x012E00L
#define XB_PGN_DEV_PEEK_ADDR_RSP          0x012F00L
#define XB_PGN_DEV_POKE_ADDR              0x013000L
#define XB_PGN_FILE_DNLD_BLK              0x013100L
#define XB_PGN_FILE_DNLD_INF              0x013200L
#define XB_PGN_RX_TO_CFG                  0x013300L
#define XB_PGN_EN_DIS_CFG                 0x013400L
#define XB_PGN_CHG_CTRL_CMD               0x013500L
#define XB_PGN_ASSOC_STS                  0x013600L
#define XB_PGN_INV_CTRL_CMD               0x013700L
#define XB_PGN_NOVA_CALIB_CFG             0x013800L
#define XB_PGN_TEST1                      0x013900L
#define XB_PGN_NAME_CFG                   0x013A00L
#define XB_PGN_FILE_DNLD_STS              0x013B00L
#define XB_PGN_AGS_CFG_DC_V               0x013C00L
#define XB_PGN_AGS_CFG_BATT_SOC           0x013D00L
#define XB_PGN_AGS_CFG_AC_I               0x013E00L
#define XB_PGN_AGS_CFG_CNTCT_CLS          0x013F00L
#define XB_PGN_CTRL_CMD                   0x014000L
#define XB_PGN_UI_CFG                     0x014100L
#define XB_PGN_UI_CFG_SPLASH_IMG          0x014200L
#define XB_PGN_UI_CFG_NODE_LBL            0x014300L
#define XB_PGN_UI_CFG_ASSOC_LBL           0x014400L
#define XB_PGN_UI_CFG_FAULT_TXT           0x014500L
#define XB_PGN_UI_CFG_WARN_TXT            0x014600L
#define XB_PGN_CFG                        0x014700L
#define XB_PGN_DATE_TIME_CFG              0x014800L
#define XB_PGN_UI_CFG_STS_DISP            0x014900L
#define XB_PGN_DIAG_INDIC_CMD             0x014A00L
#define XB_PGN_DIAG_CNTCT_CMD             0x014B00L
#define XB_PGN_DIAG_CNTCT_STS             0x014C00L
#define XB_PGN_DIAG_FAN_CMD               0x014D00L
#define XB_PGN_AC_IN_CFG_OF               0x014E00L
#define XB_PGN_AC_IN_CFG_UF               0x014F00L
#define XB_PGN_DIAG_MFG_CFG               0x015000L
#define XB_PGN_AC_OUT_CFG_OV_RMS          0x015100L
#define XB_PGN_AC_OUT_CFG_UV_RMS          0x015200L
#define XB_PGN_DC_SRC_CFG_PV_ARRAY        0x015300L
#define XB_PGN_UI_CFG_FAULT_BEHAVIOR      0x015400L
#define XB_PGN_UI_CFG_WARN_BEHAVIOR       0x015500L
#define XB_PGN_PGN_LIST                   0x01EE00L
#define XB_PGN_DC_SRC_STS                 0x01F001L
#define XB_PGN_COMM_STATS                 0x01F002L
#define XB_PGN_AC_IN_STS_RMS              0x01F003L
#define XB_PGN_AC_IN_STS_PEAK             0x01F004L
#define XB_PGN_AC_IN_STS_AVG              0x01F005L
#define XB_PGN_AC_OUT_STS_RMS             0x01F006L
#define XB_PGN_AC_OUT_STS_PEAK            0x01F007L
#define XB_PGN_AC_OUT_STS_AVG             0x01F008L
#define XB_PGN_APS_STS                    0x01F009L
#define XB_PGN_OPS_STS                    0x01F00AL
#define XB_PGN_HV_DC_BUS_STS              0x01F00BL
#define XB_PGN_EXT_TEMP_STS               0x01F00CL
#define XB_PGN_INT_TEMP_STS               0x01F00DL
#define XB_PGN_CHG_STS                    0x01F00EL
#define XB_PGN_STS                        0x01F00FL
#define XB_PGN_INV_STATS_AC               0x01F010L
#define XB_PGN_AGS_STS                    0x01F011L
#define XB_PGN_SYS_ID_STS                 0x01F012L
#define XB_PGN_FAULT_LOG_STS              0x01F013L
#define XB_PGN_PROD_INFO_STS              0x01F014L
#define XB_PGN_BATT_MON_BATT_STATS        0x01F015L
#define XB_PGN_AGS_STS_GEN                0x01F017L
#define XB_PGN_AGS_STATS_GEN              0x01F018L
#define XB_PGN_INV_STS                    0x01F019L
#define XB_PGN_CHG_STATS_AC               0x01F01AL
#define XB_PGN_BATT_MON_STS               0x01F01BL
#define XB_PGN_UI_STS                     0x01F01CL
#define XB_PGN_INV_STATS_DC               0x01F01EL
#define XB_PGN_INV_STATS_INT_TEMP         0x01F01FL
#define XB_PGN_INV_STATS_EXT_TEMP         0x01F020L
#define XB_PGN_CHG_STATS_DC               0x01F021L
#define XB_PGN_CHG_STATS_INT_TEMP         0x01F022L
#define XB_PGN_CHG_STATS_EXT_TEMP         0x01F023L
#define XB_PGN_DATE_TIME_STS              0x01F809L
#define XB_PGN_TEST2                      0x01F80AL
#define XB_PGN_ACTIVE_FAULTS_STS          0x01F80BL
#define XB_PGN_WARN_LOG_STS               0x01F80CL
#define XB_PGN_ACTIVE_WARNS_STS           0x01F80DL
#define XB_PGN_SW_VER_STS                 0x01F80EL
#define XB_PGN_STATE_EVT_LOG_STS          0x01F80FL
#define XB_PGN_HW_REV_STS                 0x01F810L

// Count of PGNs
#define XB_PGN_TOTAL_COUNT          136
#define XB_PGN_FASTPACKET_COUNT     89

/************************************************************************************ 
    The following defines give the length of each PGN in bytes
************************************************************************************/

#define XB_DLC_ISO_ACK                      8
#define XB_DLC_ISO_REQ                      3
#define XB_DLC_ISO_TP_XFER                  8
#define XB_DLC_ISO_TP_CONN_MAN_RTS          8
#define XB_DLC_ISO_TP_CONN_MAN_CTS          8
#define XB_DLC_ISO_TP_CONN_MAN_EOM          8
#define XB_DLC_ISO_TP_CONN_MAN_BAM          8
#define XB_DLC_ISO_TP_CONN_MAN_ABORT        8
#define XB_DLC_ISO_ADDR_CLAIM               8
#define XB_DLC_HWH_LVL_JACK_STS             8
#define XB_DLC_HWH_LVL_SENS_STS             8
#define XB_DLC_ISO_CMD_ADDR                 9
#define XB_DLC_HWH_UNKNOWN_FFF3             3
#define XB_DLC_HWH_UNKNOWN_FFFA             8
#define XB_DLC_DC_SRC_CFG_UV                3
#define XB_DLC_EXTRA_DC_SRC_CFG_UV         20
#define XB_DLC_DC_SRC_CFG_OV                3
#define XB_DLC_EXTRA_DC_SRC_CFG_OV         20
#define XB_DLC_DC_SRC_CFG_UI                3
#define XB_DLC_EXTRA_DC_SRC_CFG_UI         20
#define XB_DLC_DC_SRC_CFG_OI                3
#define XB_DLC_EXTRA_DC_SRC_CFG_OI         20
#define XB_DLC_DC_SRC_CFG_RIP_OV_PEAK       3
#define XB_DLC_EXTRA_DC_SRC_CFG_RIP_OV_PEAK     20
#define XB_DLC_AC_OUT_CFG                  39
#define XB_DLC_AC_IN_CFG_UV_RMS             3
#define XB_DLC_EXTRA_AC_IN_CFG_UV_RMS      20
#define XB_DLC_AC_IN_CFG_UV_PEAK            3
#define XB_DLC_EXTRA_AC_IN_CFG_UV_PEAK     20
#define XB_DLC_AC_IN_CFG_UV_AVG             3
#define XB_DLC_EXTRA_AC_IN_CFG_UV_AVG      20
#define XB_DLC_AC_IN_CFG_OV_RMS             3
#define XB_DLC_EXTRA_AC_IN_CFG_OV_RMS      20
#define XB_DLC_AC_IN_CFG_OV_PEAK            3
#define XB_DLC_EXTRA_AC_IN_CFG_OV_PEAK     20
#define XB_DLC_AC_IN_CFG_OV_AVG             3
#define XB_DLC_EXTRA_AC_IN_CFG_OV_AVG      20
#define XB_DLC_APS_CFG_UV                   3
#define XB_DLC_EXTRA_APS_CFG_UV            20
#define XB_DLC_APS_CFG_OV                   3
#define XB_DLC_EXTRA_APS_CFG_OV            20
#define XB_DLC_OPS_CFG_UV                   3
#define XB_DLC_EXTRA_OPS_CFG_UV            20
#define XB_DLC_OPS_CFG_OV                   3
#define XB_DLC_EXTRA_OPS_CFG_OV            20
#define XB_DLC_HV_DC_BUS_CFG_UV             3
#define XB_DLC_EXTRA_HV_DC_BUS_CFG_UV      20
#define XB_DLC_HV_DC_BUS_CFG_OV             3
#define XB_DLC_EXTRA_HV_DC_BUS_CFG_OV      20
#define XB_DLC_EXT_TEMP_CFG_UT              3
#define XB_DLC_EXTRA_EXT_TEMP_CFG_UT       14
#define XB_DLC_EXT_TEMP_CFG_OT              3
#define XB_DLC_EXTRA_EXT_TEMP_CFG_OT       14
#define XB_DLC_INT_TEMP_CFG_UT              3
#define XB_DLC_EXTRA_INT_TEMP_CFG_UT       14
#define XB_DLC_INT_TEMP_CFG_OT              3
#define XB_DLC_EXTRA_INT_TEMP_CFG_OT       14
#define XB_DLC_CHG_CFG_BULK                51
#define XB_DLC_CHG_CFG_ABSORP              57
#define XB_DLC_CHG_CFG_OVERCHARGE          33
#define XB_DLC_CHG_CFG_FLOAT               51
#define XB_DLC_CHG_CFG_EQUALIZE            51
#define XB_DLC_CHG_CFG_CV_CI               27
#define XB_DLC_DC_SRC_CFG_BATT             24
#define XB_DLC_CALIB_CMD                    6
#define XB_DLC_AGS_CTRL_CMD                 2
#define XB_DLC_INV_CFG_LOAD_SENSE          15
#define XB_DLC_INV_CFG                      6
#define XB_DLC_SYS_ID_CFG                   5
#define XB_DLC_RESET_CMD                    2
#define XB_DLC_ASSOC_CFG                    4
#define XB_DLC_AC_IN_CFG                   45
#define XB_DLC_CHG_CFG_MULTIPLE_NODES      32
#define XB_DLC_CLEAR_CMD                    5
#define XB_DLC_BATT_MON_CFG                 3
#define XB_DLC_AGS_CFG                     13
#define XB_DLC_EXTRA_AGS_CFG                1
#define XB_DLC_AGS_CFG_GEN                 92
#define XB_DLC_EXTRA_AGS_CFG_GEN            2
#define XB_DLC_CHG_CFG                     10
#define XB_DLC_PER_XMIT_CFG                 2
#define XB_DLC_EXTRA_PER_XMIT_CFG           6
#define XB_DLC_DEV_PEEK_ADDR_REQ            7
#define XB_DLC_DEV_PEEK_ADDR_RSP            7
#define XB_DLC_EXTRA_DEV_PEEK_ADDR_RSP      1
#define XB_DLC_DEV_POKE_ADDR                7
#define XB_DLC_EXTRA_DEV_POKE_ADDR          1
#define XB_DLC_FILE_DNLD_BLK                4
#define XB_DLC_EXTRA_FILE_DNLD_BLK          1
#define XB_DLC_FILE_DNLD_INF               15
#define XB_DLC_RX_TO_CFG                    2
#define XB_DLC_EXTRA_RX_TO_CFG              5
#define XB_DLC_EN_DIS_CFG                   3
#define XB_DLC_CHG_CTRL_CMD                 2
#define XB_DLC_ASSOC_STS                    3
#define XB_DLC_INV_CTRL_CMD                 2
#define XB_DLC_NOVA_CALIB_CFG              13
#define XB_DLC_TEST1                       15
#define XB_DLC_NAME_CFG                    10
#define XB_DLC_FILE_DNLD_STS                8
#define XB_DLC_AGS_CFG_DC_V                28
#define XB_DLC_EXTRA_AGS_CFG_DC_V          11
#define XB_DLC_AGS_CFG_BATT_SOC            16
#define XB_DLC_EXTRA_AGS_CFG_BATT_SOC       8
#define XB_DLC_AGS_CFG_AC_I                28
#define XB_DLC_EXTRA_AGS_CFG_AC_I          11
#define XB_DLC_AGS_CFG_CNTCT_CLS           11
#define XB_DLC_EXTRA_AGS_CFG_CNTCT_CLS      9
#define XB_DLC_CTRL_CMD                     1
#define XB_DLC_UI_CFG                      17
#define XB_DLC_UI_CFG_SPLASH_IMG            5
#define XB_DLC_EXTRA_UI_CFG_SPLASH_IMG      1
#define XB_DLC_UI_CFG_NODE_LBL              2
#define XB_DLC_EXTRA_UI_CFG_NODE_LBL       20
#define XB_DLC_UI_CFG_ASSOC_LBL             2
#define XB_DLC_EXTRA_UI_CFG_ASSOC_LBL      18
#define XB_DLC_UI_CFG_FAULT_TXT             2
#define XB_DLC_EXTRA_UI_CFG_FAULT_TXT      34
#define XB_DLC_UI_CFG_WARN_TXT              2
#define XB_DLC_EXTRA_UI_CFG_WARN_TXT       34
#define XB_DLC_CFG                          7
#define XB_DLC_DATE_TIME_CFG                9
#define XB_DLC_UI_CFG_STS_DISP             25
#define XB_DLC_EXTRA_UI_CFG_STS_DISP        7
#define XB_DLC_DIAG_INDIC_CMD               0
#define XB_DLC_EXTRA_DIAG_INDIC_CMD         1
#define XB_DLC_DIAG_CNTCT_CMD               0
#define XB_DLC_EXTRA_DIAG_CNTCT_CMD         1
#define XB_DLC_DIAG_CNTCT_STS               1
#define XB_DLC_EXTRA_DIAG_CNTCT_STS         1
#define XB_DLC_DIAG_FAN_CMD                 0
#define XB_DLC_EXTRA_DIAG_FAN_CMD           2
#define XB_DLC_AC_IN_CFG_OF                 3
#define XB_DLC_EXTRA_AC_IN_CFG_OF          14
#define XB_DLC_AC_IN_CFG_UF                 3
#define XB_DLC_EXTRA_AC_IN_CFG_UF          14
#define XB_DLC_DIAG_MFG_CFG                 9
#define XB_DLC_AC_OUT_CFG_OV_RMS            3
#define XB_DLC_EXTRA_AC_OUT_CFG_OV_RMS     20
#define XB_DLC_AC_OUT_CFG_UV_RMS            3
#define XB_DLC_EXTRA_AC_OUT_CFG_UV_RMS     20
#define XB_DLC_DC_SRC_CFG_PV_ARRAY          7
#define XB_DLC_UI_CFG_FAULT_BEHAVIOR        2
#define XB_DLC_EXTRA_UI_CFG_FAULT_BEHAVIOR      2
#define XB_DLC_UI_CFG_WARN_BEHAVIOR         2
#define XB_DLC_EXTRA_UI_CFG_WARN_BEHAVIOR      2
#define XB_DLC_PGN_LIST_TX                  1
#define XB_DLC_EXTRA_PGN_LIST_TX            3
#define XB_DLC_PGN_LIST_RX                  1
#define XB_DLC_EXTRA_PGN_LIST_RX            3
#define XB_DLC_DC_SRC_STS                  24
#define XB_DLC_COMM_STATS                  25
#define XB_DLC_AC_IN_STS_RMS                2
#define XB_DLC_EXTRA_AC_IN_STS_RMS         22
#define XB_DLC_AC_IN_STS_PEAK               2
#define XB_DLC_EXTRA_AC_IN_STS_PEAK        22
#define XB_DLC_AC_IN_STS_AVG                2
#define XB_DLC_EXTRA_AC_IN_STS_AVG         22
#define XB_DLC_AC_OUT_STS_RMS               3
#define XB_DLC_EXTRA_AC_OUT_STS_RMS        23
#define XB_DLC_AC_OUT_STS_PEAK              3
#define XB_DLC_EXTRA_AC_OUT_STS_PEAK       23
#define XB_DLC_AC_OUT_STS_AVG               3
#define XB_DLC_EXTRA_AC_OUT_STS_AVG        23
#define XB_DLC_APS_STS                     10
#define XB_DLC_OPS_STS                     10
#define XB_DLC_HV_DC_BUS_STS               10
#define XB_DLC_EXT_TEMP_STS                 4
#define XB_DLC_INT_TEMP_STS                 4
#define XB_DLC_CHG_STS                     17
#define XB_DLC_STS                          6
#define XB_DLC_INV_STATS_AC                20
#define XB_DLC_EXTRA_INV_STATS_AC          13
#define XB_DLC_AGS_STS                      8
#define XB_DLC_SYS_ID_STS                   5
#define XB_DLC_FAULT_LOG_STS                1
#define XB_DLC_EXTRA_FAULT_LOG_STS          6
#define XB_DLC_PROD_INFO_STS               43
#define XB_DLC_BATT_MON_BATT_STATS         53
#define XB_DLC_AGS_STS_GEN                 15
#define XB_DLC_AGS_STATS_GEN               12
#define XB_DLC_INV_STS                      5
#define XB_DLC_CHG_STATS_AC                 2
#define XB_DLC_EXTRA_CHG_STATS_AC          17
#define XB_DLC_BATT_MON_STS                 4
#define XB_DLC_UI_STS                       3
#define XB_DLC_INV_STATS_DC                12
#define XB_DLC_INV_STATS_INT_TEMP           1
#define XB_DLC_EXTRA_INV_STATS_INT_TEMP      3
#define XB_DLC_INV_STATS_EXT_TEMP           1
#define XB_DLC_EXTRA_INV_STATS_EXT_TEMP      5
#define XB_DLC_CHG_STATS_DC                 2
#define XB_DLC_CHG_STATS_INT_TEMP           1
#define XB_DLC_EXTRA_CHG_STATS_INT_TEMP      3
#define XB_DLC_CHG_STATS_EXT_TEMP           1
#define XB_DLC_EXTRA_CHG_STATS_EXT_TEMP      5
#define XB_DLC_DATE_TIME_STS                8
#define XB_DLC_TEST2                        8
#define XB_DLC_ACTIVE_FAULTS_STS            1
#define XB_DLC_EXTRA_ACTIVE_FAULTS_STS      6
#define XB_DLC_WARN_LOG_STS                 1
#define XB_DLC_EXTRA_WARN_LOG_STS           6
#define XB_DLC_ACTIVE_WARNS_STS             1
#define XB_DLC_EXTRA_ACTIVE_WARNS_STS       6
#define XB_DLC_SW_VER_STS                   1
#define XB_DLC_EXTRA_SW_VER_STS             8
#define XB_DLC_STATE_EVT_LOG_STS            1
#define XB_DLC_EXTRA_STATE_EVT_LOG_STS      8
#define XB_DLC_HW_REV_STS                   3
#define XB_DLC_EXTRA_HW_REV_STS            19

/************************************************************************************ 
    Enums used for some message fields
************************************************************************************/

// Industry Group
// Used in the following fields:
//   XB_tzPGN_ISO_ADDR_CLAIM.eIndustryGroup
//   XB_tzPGN_ISO_CMD_ADDR.eIndustryGroup
//   XB_tzPGN_NAME_CFG.eIndustryGroup
typedef enum eINDUSTRY_GRP
{
    XB_eINDUSTRY_GRP_ALL                =   0,
    XB_eINDUSTRY_GRP_ON_HIGHWAY         =   1,
    XB_eINDUSTRY_GRP_AGRICULTURE        =   2,
    XB_eINDUSTRY_GRP_CONSTRUCTION       =   3,
    XB_eINDUSTRY_GRP_MARINE             =   4,
    XB_eINDUSTRY_GRP_INDUSTRIAL         =   5,
    XB_eINDUSTRY_GRP_RESERVED1          =   6,
    XB_eINDUSTRY_GRP_RESERVED2          =   7
} XB_teINDUSTRY_GRP;

// ACK Status
// Used in the following fields:
//   XB_tzPGN_ISO_ACK.eCtrlByte
typedef enum eACK_STS
{
    XB_eACK_STS_ACK                     =   0,
    XB_eACK_STS_NAK                     =   1,
    XB_eACK_STS_DNY                     =   2
} XB_teACK_STS;

// Group Function Value
// Used in the following fields:
//   XB_tzPGN_ISO_ACK.eGroupFunctionValue
typedef enum eGRP_FUNC_VALUE
{
    XB_eGRP_FUNC_VALUE_DO_NOT_CARE      =  -1,
    XB_eGRP_FUNC_VALUE_UNSUPPORTED      = 241,
    XB_eGRP_FUNC_VALUE_NOT_AVAILABLE    = 242,
    XB_eGRP_FUNC_VALUE_DATA_ACCESS_ERROR = 243,
    XB_eGRP_FUNC_VALUE_DATA_NOT_AVAILABLE = 244,
    XB_eGRP_FUNC_VALUE_DATA_INVALID     = 245,
    XB_eGRP_FUNC_VALUE_DLC_INVALID      = 246,
    XB_eGRP_FUNC_VALUE_MESSAGE_COUNT    = 247,
    XB_eGRP_FUNC_VALUE_CAC              = 248,
    XB_eGRP_FUNC_VALUE_CONFIGURATION_TYPE = 249,
    XB_eGRP_FUNC_VALUE_PROTOCOL         = 250,
    XB_eGRP_FUNC_VALUE_SECURITY         = 251,
    XB_eGRP_FUNC_VALUE_WRONG_MODE       = 252,
    XB_eGRP_FUNC_VALUE_MEMORY_ERROR     = 253
} XB_teGRP_FUNC_VALUE;

// Function Code
// Used in the following fields:
//   XB_tzPGN_ISO_ADDR_CLAIM.eDeviceFunction
//   XB_tzPGN_ISO_CMD_ADDR.eDeviceFunction
//   XB_tzPGN_FILE_DNLD_INF.eDeviceFunction
//   XB_tzPGN_NAME_CFG.eDeviceFunction
//   XB_tzPGN_UI_CFG_NODE_LBL.eDeviceFunction
typedef enum eFUNC_CODE
{
    XB_eFUNC_CODE_USER_INTERFACE        = 128,
    XB_eFUNC_CODE_INVERTER_CHARGER      = 129,
    XB_eFUNC_CODE_INVERTER              = 130,
    XB_eFUNC_CODE_CHARGER               = 131,
    XB_eFUNC_CODE_BATTERY_MONITOR       = 132,
    XB_eFUNC_CODE_AGS                   = 133,
    XB_eFUNC_CODE_DIAGNOSTIC_TERMINAL   = 134
} XB_teFUNC_CODE;

// Device Class
// Used in the following fields:
//   XB_tzPGN_ISO_ADDR_CLAIM.eDeviceClass
//   XB_tzPGN_ISO_CMD_ADDR.eDeviceClass
//   XB_tzPGN_NAME_CFG.eDeviceClass
//   XB_tzPGN_UI_CFG_NODE_LBL.eDeviceClass
typedef enum eDEV_CLASS
{
    XB_eDEV_CLASS_POWER_MANAGEMENT      =  30
} XB_teDEV_CLASS;

// Command Pair
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_AC_I.eStartStop
//   XB_tzPGN_AGS_CFG_BATT_SOC.eStartStop
//   XB_tzPGN_INV_CTRL_CMD.eInvEnDis
//   XB_tzPGN_INV_CFG.eLoadSenseEnDis
//   XB_tzPGN_AGS_CFG.eQtEnDis
//   XB_tzPGN_AGS_CFG.eDcVAutoStartEnDis
//   XB_tzPGN_AGS_CFG.eDcVAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eBattSocAutoStartEnDis
//   XB_tzPGN_AGS_CFG.eBattSocAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eAcIAutoStartEnDis
//   XB_tzPGN_AGS_CFG.eAcIAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eAbsorpAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eFloatAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eCntctClsAutoEnDis
//   XB_tzPGN_EN_DIS_CFG.ePerTxEnDis
//   XB_tzPGN_EN_DIS_CFG.eIdentEnDis
//   XB_tzPGN_AGS_CFG_DC_V.eStartStop
//   XB_tzPGN_UI_CFG.eSplashOnWakeEnDis
//   XB_tzPGN_UI_CFG.eSndEnDis
//   XB_tzPGN_UI_CFG.eBtnSndEnDis
//   XB_tzPGN_UI_CFG.eFaultSndEnDis
//   XB_tzPGN_UI_CFG.eWarnSndEnDis
//   XB_tzPGN_DIAG_INDIC_CMD.eIndicState
//   XB_tzPGN_CHG_CFG.eEqlzOneTimeEnDis
//   XB_tzPGN_CHG_CFG.eOverChgEnDis
//   XB_tzPGN_CHG_CFG.eChgOverrideEnDis
//   XB_tzPGN_CALIB_CMD.eCalibEnDis
//   XB_tzPGN_DC_SRC_CFG_PV_ARRAY.eMpptEnDis
//   XB_tzPGN_DIAG_CNTCT_CMD.eCntctState
//   XB_tzPGN_CFG.eFaultAutoRst
//   XB_tzPGN_CHG_CTRL_CMD.eChgEnDis
typedef enum eCMD_PAIR
{
    XB_eCMD_PAIR_OFF                    =   0,
    XB_eCMD_PAIR_ON                     =   1,
    XB_eCMD_PAIR_RESERVED               =   2,
    XB_eCMD_PAIR_NO_CHANGE              =   3
} XB_teCMD_PAIR;

// Generic status pair
// Used in the following fields:
//   XB_tzPGN_HWH_LVL_SENS_STS.eLeftBelowLvl
//   XB_tzPGN_HWH_LVL_SENS_STS.eFrontBelowLvl
//   XB_tzPGN_HWH_LVL_SENS_STS.eRightBelowLvl
//   XB_tzPGN_HWH_LVL_SENS_STS.eRearBelowLvl
//   XB_tzPGN_CHG_STS.eChgEnDis
//   XB_tzPGN_CHG_STS.eBattTempSensorPresent
//   XB_tzPGN_CHG_STS.eEqlzPending
//   XB_tzPGN_STS.ePerTxEnDis
//   XB_tzPGN_STS.eFaultFlag
//   XB_tzPGN_STS.eFaultsChangedFlag
//   XB_tzPGN_STS.eWarnFlag
//   XB_tzPGN_STS.eWarnsChangedFlag
//   XB_tzPGN_INV_STS.eInvEnDis
//   XB_tzPGN_INV_STS.eBattTempSensorPresent
//   XB_tzPGN_AGS_STS.eAgsGenSig
//   XB_tzPGN_DIAG_CNTCT_STS.eCntctState
//   XB_tzPGN_HWH_LVL_JACK_STS.eLfJackWarnSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eRfJackWarnSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eRrJackWarnSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eLrJackWarnSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eAux1JackWarnSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eAux2JackWarnSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eLfJackPressSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eRfJackPressSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eRrJackPressSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eLrJackPressSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eAux1JackPressSw
//   XB_tzPGN_HWH_LVL_JACK_STS.eAux2JackPressSw
//   XB_tzPGN_STS.eNewFaultsFlag
//   XB_tzPGN_STS.eNewWarnsFlag
typedef enum eGENERIC_STSPAIR
{
    XB_eGENERIC_STSPAIR_OFF             =   0,
    XB_eGENERIC_STSPAIR_ON              =   1,
    XB_eGENERIC_STSPAIR_ERROR           =   2,
    XB_eGENERIC_STSPAIR_UNKNOWN         =   3
} XB_teGENERIC_STSPAIR;

// Warning Identifier
// Used in the following fields:
//   XB_tzPGN_UI_CFG_WARN_TXT.eWarnId
//   XB_tzPGN_WARN_LOG_STS.eWarnId
//   XB_tzPGN_CLEAR_CMD.eWarnId
//   XB_tzPGN_ACTIVE_WARNS_STS.eWarnId
//   XB_tzPGN_UI_CFG_WARN_BEHAVIOR.eWarnId
typedef enum eWRN_ID
{
    XB_eWRN_ID_TRANSISTOR_OVER_TEMPERATURE_WARNING1 =   0,
    XB_eWRN_ID_TRANSISTOR_OVER_TEMPERATURE_WARNING2 =   1,
    XB_eWRN_ID_CAPACITOR_OVER_TEMPERATURE_WARNING1 =   2,
    XB_eWRN_ID_TRANSFORMER_OVER_TEMPERATURE_WARNING1 =   3,
    XB_eWRN_ID_BATTERY_OVER_TEMPERATURE_WARNING1 =   4,
    XB_eWRN_ID_AMBIENT_OVER_TEMPERATURE_WARNING1 =   5,
    XB_eWRN_ID_AC_OUTPUT_OVERLOAD_WARNING =   6,
    XB_eWRN_ID_AUTO_RESTARTAFTER_FAULT_ENABLED_WARNING =   7,
    XB_eWRN_ID_BATTERY_SENSOR_NOT_PRESENT_WARNING =   9,
    XB_eWRN_ID_BATTERY_SENSOR_SHORT_WARNING =  10,
    XB_eWRN_ID_DC_OVER_VOLTAGE_WARNING1 =  11,
    XB_eWRN_ID_DC_UNDER_VOLTAGE_WARNING1 =  12,
    XB_eWRN_ID_AC_LINE1INPUT_OVER_VOLTAGE_WARNING =  13,
    XB_eWRN_ID_AC_LINE1INPUT_UNDER_VOLTAGE_WARNING =  14,
    XB_eWRN_ID_AC_LINE2INPUT_OVER_VOLTAGE_WARNING =  15,
    XB_eWRN_ID_AC_LINE2INPUT_UNDER_VOLTAGE_WARNING =  16,
    XB_eWRN_ID_CHARGE_CURRENT_GREATERTHAN_DEFAULT_WARNING =  17,
    XB_eWRN_ID_CANNOT_EQUALIZE          =  18,
    XB_eWRN_ID_EQUALIZATION_TERMINATED_ABNORMALLY =  19,
    XB_eWRN_ID_EXTERNAL_GENSET_SHUTDOWN_WARNING = 200,
    XB_eWRN_ID_EXTERNAL_GENSET_STARTUP_WARNING = 201,
    XB_eWRN_ID_UNABLETO_START_GENSET_WARNING = 202,
    XB_eWRN_ID_REACHED_MAX_RUN_TIME_WARNING = 203,
    XB_eWRN_ID_MAX_GENSET_CYCLEWITH_NO_INTERVENTION_WARNING = 204,
    XB_eWRN_ID_GEN_ON_NOT_AGS           = 205,
    XB_eWRN_ID_ORPHANED_AUTO_START_TRIGGER = 206,
    XB_eWRN_ID_ORPHANED_AUTO_STOP_TRIGGER = 207,
    XB_eWRN_ID_NO_AUTO_TRIGGERS_DEFINED = 208,
    XB_eWRN_ID_FAILEDTO_SET_VALUE_WARNING = 250,
    XB_eWRN_ID_CONFIRM_EQUALIZATION_WARNING = 251,
    XB_eWRN_ID_CONFIRM_RESTORE_DEFAULTS_WARNING = 252,
    XB_eWRN_ID_ABORTED_EQUALIZATION     = 253,
    XB_eWRN_ID_LOST_NETWORK_CONNECTION  = 500,
    XB_eWRN_ID_DEFAULTS_RESTOREDON_POWERUP_WARNING = 501,
    XB_eWRN_ID_RESERVED                 = 8189,
    XB_eWRN_ID_OUT_OF_RANGE             = 8190,
    XB_eWRN_ID_NO_CHANGE_DATA_NA        = 8191
} XB_teWRN_ID;

// Event Identifier
// Used in the following fields:
//   XB_tzPGN_AC_OUT_CFG_UV_RMS.eEvtId
//   XB_tzPGN_AC_IN_CFG_OF.eEvtId
//   XB_tzPGN_DC_SRC_CFG_UV.eEvtId
//   XB_tzPGN_DC_SRC_CFG_OV.eEvtId
//   XB_tzPGN_DC_SRC_CFG_UI.eEvtId
//   XB_tzPGN_DC_SRC_CFG_OI.eEvtId
//   XB_tzPGN_DC_SRC_CFG_RIP_OV_PEAK.eEvtId
//   XB_tzPGN_AC_IN_CFG_UV_RMS.eEvtId
//   XB_tzPGN_AC_IN_CFG_UV_PEAK.eEvtId
//   XB_tzPGN_AC_IN_CFG_UV_AVG.eEvtId
//   XB_tzPGN_AC_IN_CFG_OV_RMS.eEvtId
//   XB_tzPGN_AC_IN_CFG_OV_PEAK.eEvtId
//   XB_tzPGN_AC_IN_CFG_OV_AVG.eEvtId
//   XB_tzPGN_APS_CFG_UV.eEvtId
//   XB_tzPGN_APS_CFG_OV.eEvtId
//   XB_tzPGN_OPS_CFG_UV.eEvtId
//   XB_tzPGN_OPS_CFG_OV.eEvtId
//   XB_tzPGN_HV_DC_BUS_CFG_UV.eEvtId
//   XB_tzPGN_HV_DC_BUS_CFG_OV.eEvtId
//   XB_tzPGN_EXT_TEMP_CFG_UT.eEvtId
//   XB_tzPGN_EXT_TEMP_CFG_OT.eEvtId
//   XB_tzPGN_INT_TEMP_CFG_UT.eEvtId
//   XB_tzPGN_INT_TEMP_CFG_OT.eEvtId
//   XB_tzPGN_STATE_EVT_LOG_STS.eEvtId
//   XB_tzPGN_AC_IN_CFG_UF.eEvtId
//   XB_tzPGN_AC_OUT_CFG_OV_RMS.eEvtId
typedef enum eEVT_ID
{
    XB_eEVT_ID_CONTROL_COMMAND_HIBERNATE =  10,
    XB_eEVT_ID_CONTROL_COMMAND_SAFE     =  11,
    XB_eEVT_ID_CONTROL_COMMAND_POWER_SAVE =  12,
    XB_eEVT_ID_CONTROL_COMMAND_OPERATING =  13,
    XB_eEVT_ID_CONTROL_COMMAND_DIAGNOSTIC =  14,
    XB_eEVT_ID_CONTROL_COMMAND_LAST_MODE =  15,
    XB_eEVT_ID_RESET_COMMAND_REBOOT     =  20,
    XB_eEVT_ID_RESET_COMMAND_DOWNLOAD   =  21,
    XB_eEVT_ID_RESET_COMMAND_OEM        =  22,
    XB_eEVT_ID_RESET_COMMAND_FACTORY    =  23,
    XB_eEVT_ID_RESET_COMMAND_REBOOT_CLEAR_NV =  24,
    XB_eEVT_ID_CLEAR_COMMAND_ACTIVE_FAULTS =  30,
    XB_eEVT_ID_CLEAR_COMMAND_FAULT_LOG  =  31,
    XB_eEVT_ID_CLEAR_COMMAND_ACTIVE_WARNS =  32,
    XB_eEVT_ID_CLEAR_COMMAND_WARN_LOG   =  33,
    XB_eEVT_ID_CLEAR_COMMAND_STATE_EVENT_LOG =  34,
    XB_eEVT_ID_CLEAR_COMMAND_COMM_STATS =  35,
    XB_eEVT_ID_CLEAR_COMMAND_STATS      =  36,
    XB_eEVT_ID_CLEAR_COMMAND_ALL        =  37,
    XB_eEVT_ID_DATE_TIME_CONFIGURED     =  40,
    XB_eEVT_ID_WARN_CLEARED             =  50,
    XB_eEVT_ID_FAULT_CLEARED            =  51,
    XB_eEVT_ID_FAULT_SET                =  52,
    XB_eEVT_ID_USER_CFG_CHANGED         =  60,
    XB_eEVT_ID_OEM_CFG_CHANGED          =  61,
    XB_eEVT_ID_TRIGGERED_FAULT          =  70,
    XB_eEVT_ID_SHUTDOWN_THRESHOLD       = 250,
    XB_eEVT_ID_SHUTDOWN_HYSTERESIS      = 251,
    XB_eEVT_ID_WARNING_THRESHOLD        = 252,
    XB_eEVT_ID_WARNING_HYSTERESIS       = 253,
    XB_eEVT_ID_TRANSFER_THRESHOLD       = 254,
    XB_eEVT_ID_FAN0THRESHOLD            = 255,
    XB_eEVT_ID_FAN10THRESHOLD           = 256,
    XB_eEVT_ID_FAN20THRESHOLD           = 257,
    XB_eEVT_ID_FAN30THRESHOLD           = 258,
    XB_eEVT_ID_FAN40THRESHOLD           = 259,
    XB_eEVT_ID_FAN50THRESHOLD           = 260,
    XB_eEVT_ID_FAN60THRESHOLD           = 261,
    XB_eEVT_ID_FAN70THRESHOLD           = 262,
    XB_eEVT_ID_FAN80THRESHOLD           = 263,
    XB_eEVT_ID_FAN90THRESHOLD           = 264,
    XB_eEVT_ID_FAN100THRESHOLD          = 265,
    XB_eEVT_ID_RELAY_OPEN_THRESHOLD     = 266,
    XB_eEVT_ID_RELAY_CLOSE_THRESHOLD    = 267,
    XB_eEVT_ID_CHARGER_DERATING_AC_IN_V = 268,
    XB_eEVT_ID_CHARGER_DERATING_AC_IN_I = 269,
    XB_eEVT_ID_CHARGER_DERATING_EXT_TEMP = 270,
    XB_eEVT_ID_CHARGER_DERATING_INT_TEMP = 271,
    XB_eEVT_ID_CHARGER_DERATING_RIPPLE_V = 272,
    XB_eEVT_ID_LOST_AC_THRESHOLD        = 273,
    XB_eEVT_ID_LOST_AC_HYSTERESIS       = 274,
    XB_eEVT_ID_IMM_SHUTDOWN_THRESHOLD   = 275,
    XB_eEVT_ID_IMM_SHUTDOWN_HYSTERESIS  = 276,
    XB_eEVT_ID_CHARGER_SHUTDOWN_THRESHOLD = 277,
    XB_eEVT_ID_CHARGER_SHUTDOWN_HYSTERESIS = 278,
    XB_eEVT_ID_CHARGER_WARNING_THRESHOLD = 279,
    XB_eEVT_ID_CHARGER_WARNING_HYSTERESIS = 280,
    XB_eEVT_ID_INVERTER_SHUTDOWN_THRESHOLD = 281,
    XB_eEVT_ID_INVERTER_SHUTDOWN_HYSTERESIS = 282,
    XB_eEVT_ID_INVERTER_WARNING_THRESHOLD = 283,
    XB_eEVT_ID_INVERTER_WARNING_HYSTERESIS = 284,
    XB_eEVT_ID_AGS_EXERCISE_START       = 300,
    XB_eEVT_ID_AGS_EXERCISE_STOP        = 301,
    XB_eEVT_ID_AGS_QUIET_TIME_BEGIN     = 302,
    XB_eEVT_ID_AGS_QUIET_TIME_END       = 303,
    XB_eEVT_ID_AGS_BATTERY_SOC_START    = 304,
    XB_eEVT_ID_AGS_BATTERY_SOC_STOP     = 305,
    XB_eEVT_ID_AGS_DC_V_START           = 306,
    XB_eEVT_ID_AGS_DC_V_STOP            = 307,
    XB_eEVT_ID_AGS_AC_I_START           = 308,
    XB_eEVT_ID_AGS_AC_I_STOP            = 309,
    XB_eEVT_ID_AGS_CONTACT_START        = 310,
    XB_eEVT_ID_AGS_CONTACT_STOP         = 311,
    XB_eEVT_ID_AGS_FLOAT_STOP           = 312,
    XB_eEVT_ID_AGS_ABSORP_STOP          = 313,
    XB_eEVT_ID_AGS_MANUAL_ON            = 314,
    XB_eEVT_ID_AGS_MANUAL_OFF           = 315,
    XB_eEVT_ID_AGS_AUTO                 = 316,
    XB_eEVT_ID_AGS_EXTERNAL_ON          = 317,
    XB_eEVT_ID_AGS_EXTERNAL_OFF         = 318,
    XB_eEVT_ID_GEN_EXTERNAL_ON          = 319,
    XB_eEVT_ID_GEN_EXTERNAL_OFF         = 320,
    XB_eEVT_ID_AGS_EXTERNAL_SHUTDOWN    = 321,
    XB_eEVT_ID_AGS_AUTO_OFF             = 322,
    XB_eEVT_ID_RESUME_FROM_SAFE         = 512,
    XB_eEVT_ID_AC_FAULT_SET             = 513,
    XB_eEVT_ID_INVERT_FAULT_SET         = 514,
    XB_eEVT_ID_CHARGE_FAULT_SET         = 515,
    XB_eEVT_ID_CHARGER_ENABLE           = 516,
    XB_eEVT_ID_CHARGER_DISABLE          = 517,
    XB_eEVT_ID_INVERTER_ENABLE          = 518,
    XB_eEVT_ID_INVERTER_DISABLE         = 519,
    XB_eEVT_ID_CHARGE_SUSPEND_ON        = 520,
    XB_eEVT_ID_CHARGE_SUSPEND_OFF       = 521,
    XB_eEVT_ID_AC_GOOD                  = 522,
    XB_eEVT_ID_AC_BAD                   = 523,
    XB_eEVT_ID_LOAD_SENSE_ENABLE        = 524,
    XB_eEVT_ID_LOAD_SENSE_ACTIVE        = 525,
    XB_eEVT_ID_INVERT_ACTIVE            = 526,
    XB_eEVT_ID_BULK_EXIT                = 527,
    XB_eEVT_ID_ABSORPTION_EXIT          = 528,
    XB_eEVT_ID_FLOAT_EXIT               = 529,
    XB_eEVT_ID_FLOAT3STAGE_SET          = 530,
    XB_eEVT_ID_FLOAT2STAGE_SET          = 531,
    XB_eEVT_ID_EQUALIZE_ENABLE          = 532,
    XB_eEVT_ID_EQUALIZE_DISABLE         = 533,
    XB_eEVT_ID_EQUALIZE_EXIT            = 534,
    XB_eEVT_ID_LOAD_SENSE_DISABLE       = 535,
    XB_eEVT_ID_RESERVED536              = 536,
    XB_eEVT_ID_RESERVED537              = 537,
    XB_eEVT_ID_RESERVED538              = 538,
    XB_eEVT_ID_RESERVED539              = 539,
    XB_eEVT_ID_RESERVED540              = 540,
    XB_eEVT_ID_RESERVED541              = 541,
    XB_eEVT_ID_RESERVED542              = 542,
    XB_eEVT_ID_RESERVED543              = 543,
    XB_eEVT_ID_RESERVED544              = 544,
    XB_eEVT_ID_RESERVED545              = 545,
    XB_eEVT_ID_RESERVED546              = 546,
    XB_eEVT_ID_RESERVED547              = 547,
    XB_eEVT_ID_RESERVED548              = 548,
    XB_eEVT_ID_RESERVED549              = 549,
    XB_eEVT_ID_RESERVED550              = 550,
    XB_eEVT_ID_RESERVED551              = 551,
    XB_eEVT_ID_RESERVED552              = 552,
    XB_eEVT_ID_RESERVED553              = 553,
    XB_eEVT_ID_RESERVED554              = 554,
    XB_eEVT_ID_RESERVED555              = 555,
    XB_eEVT_ID_RESERVED556              = 556,
    XB_eEVT_ID_RESERVED557              = 557,
    XB_eEVT_ID_RESERVED558              = 558,
    XB_eEVT_ID_RESERVED559              = 559,
    XB_eEVT_ID_RESERVED560              = 560,
    XB_eEVT_ID_RESERVED561              = 561,
    XB_eEVT_ID_RESERVED562              = 562,
    XB_eEVT_ID_RESERVED563              = 563,
    XB_eEVT_ID_RESERVED564              = 564,
    XB_eEVT_ID_RESERVED565              = 565,
    XB_eEVT_ID_RESERVED566              = 566,
    XB_eEVT_ID_RESERVED567              = 567,
    XB_eEVT_ID_RESERVED568              = 568,
    XB_eEVT_ID_RESERVED569              = 569,
    XB_eEVT_ID_RESERVED570              = 570,
    XB_eEVT_ID_RESERVED571              = 571,
    XB_eEVT_ID_RESERVED572              = 572,
    XB_eEVT_ID_RESERVED573              = 573,
    XB_eEVT_ID_RESERVED574              = 574,
    XB_eEVT_ID_RESERVED575              = 575,
    XB_eEVT_ID_RESERVED576              = 576,
    XB_eEVT_ID_RESERVED577              = 577,
    XB_eEVT_ID_RESERVED578              = 578,
    XB_eEVT_ID_RESERVED579              = 579,
    XB_eEVT_ID_RESERVED580              = 580,
    XB_eEVT_ID_RESERVED581              = 581,
    XB_eEVT_ID_RESERVED582              = 582,
    XB_eEVT_ID_RESERVED583              = 583,
    XB_eEVT_ID_RESERVED584              = 584,
    XB_eEVT_ID_RESERVED585              = 585,
    XB_eEVT_ID_RESERVED586              = 586,
    XB_eEVT_ID_RESERVED587              = 587,
    XB_eEVT_ID_RESERVED588              = 588,
    XB_eEVT_ID_RESERVED589              = 589,
    XB_eEVT_ID_RESERVED590              = 590,
    XB_eEVT_ID_RESERVED591              = 591,
    XB_eEVT_ID_RESERVED592              = 592,
    XB_eEVT_ID_RESERVED593              = 593,
    XB_eEVT_ID_RESERVED594              = 594,
    XB_eEVT_ID_RESERVED595              = 595,
    XB_eEVT_ID_RESERVED596              = 596,
    XB_eEVT_ID_RESERVED597              = 597,
    XB_eEVT_ID_RESERVED598              = 598,
    XB_eEVT_ID_RESERVED599              = 599,
    XB_eEVT_ID_RESERVED600              = 600,
    XB_eEVT_ID_RESERVED601              = 601,
    XB_eEVT_ID_RESERVED602              = 602,
    XB_eEVT_ID_RESERVED603              = 603,
    XB_eEVT_ID_RESERVED604              = 604,
    XB_eEVT_ID_RESERVED605              = 605,
    XB_eEVT_ID_RESERVED606              = 606,
    XB_eEVT_ID_RESERVED607              = 607,
    XB_eEVT_ID_RESERVED608              = 608,
    XB_eEVT_ID_RESERVED609              = 609,
    XB_eEVT_ID_RESERVED610              = 610,
    XB_eEVT_ID_RESERVED611              = 611,
    XB_eEVT_ID_RESERVED612              = 612,
    XB_eEVT_ID_RESERVED613              = 613,
    XB_eEVT_ID_RESERVED614              = 614,
    XB_eEVT_ID_RESERVED615              = 615,
    XB_eEVT_ID_RESERVED616              = 616,
    XB_eEVT_ID_RESERVED617              = 617,
    XB_eEVT_ID_RESERVED618              = 618,
    XB_eEVT_ID_RESERVED619              = 619,
    XB_eEVT_ID_RESERVED620              = 620,
    XB_eEVT_ID_RESERVED621              = 621,
    XB_eEVT_ID_RESERVED622              = 622,
    XB_eEVT_ID_RESERVED623              = 623,
    XB_eEVT_ID_RESERVED624              = 624,
    XB_eEVT_ID_RESERVED625              = 625,
    XB_eEVT_ID_RESERVED626              = 626,
    XB_eEVT_ID_RESERVED627              = 627,
    XB_eEVT_ID_RESERVED628              = 628,
    XB_eEVT_ID_RESERVED629              = 629,
    XB_eEVT_ID_RESERVED630              = 630,
    XB_eEVT_ID_RESERVED631              = 631,
    XB_eEVT_ID_RESERVED632              = 632,
    XB_eEVT_ID_RESERVED633              = 633,
    XB_eEVT_ID_RESERVED634              = 634,
    XB_eEVT_ID_RESERVED635              = 635,
    XB_eEVT_ID_RESERVED636              = 636,
    XB_eEVT_ID_RESERVED637              = 637,
    XB_eEVT_ID_RESERVED638              = 638,
    XB_eEVT_ID_RESERVED639              = 639,
    XB_eEVT_ID_RESERVED640              = 640,
    XB_eEVT_ID_RESERVED641              = 641,
    XB_eEVT_ID_RESERVED642              = 642,
    XB_eEVT_ID_RESERVED643              = 643,
    XB_eEVT_ID_RESERVED644              = 644,
    XB_eEVT_ID_RESERVED645              = 645,
    XB_eEVT_ID_RESERVED646              = 646,
    XB_eEVT_ID_RESERVED647              = 647,
    XB_eEVT_ID_RESERVED648              = 648,
    XB_eEVT_ID_RESERVED649              = 649,
    XB_eEVT_ID_RESERVED650              = 650,
    XB_eEVT_ID_RESERVED651              = 651,
    XB_eEVT_ID_RESERVED652              = 652,
    XB_eEVT_ID_RESERVED653              = 653,
    XB_eEVT_ID_RESERVED654              = 654,
    XB_eEVT_ID_RESERVED655              = 655,
    XB_eEVT_ID_RESERVED656              = 656,
    XB_eEVT_ID_RESERVED657              = 657,
    XB_eEVT_ID_RESERVED658              = 658,
    XB_eEVT_ID_RESERVED659              = 659,
    XB_eEVT_ID_RESERVED660              = 660,
    XB_eEVT_ID_RESERVED661              = 661,
    XB_eEVT_ID_RESERVED662              = 662,
    XB_eEVT_ID_RESERVED663              = 663,
    XB_eEVT_ID_RESERVED664              = 664,
    XB_eEVT_ID_RESERVED665              = 665,
    XB_eEVT_ID_RESERVED666              = 666,
    XB_eEVT_ID_RESERVED667              = 667,
    XB_eEVT_ID_RESERVED668              = 668,
    XB_eEVT_ID_RESERVED669              = 669,
    XB_eEVT_ID_RESERVED670              = 670,
    XB_eEVT_ID_RESERVED671              = 671,
    XB_eEVT_ID_RESERVED672              = 672,
    XB_eEVT_ID_RESERVED673              = 673,
    XB_eEVT_ID_RESERVED674              = 674,
    XB_eEVT_ID_RESERVED675              = 675,
    XB_eEVT_ID_RESERVED676              = 676,
    XB_eEVT_ID_RESERVED677              = 677,
    XB_eEVT_ID_RESERVED678              = 678,
    XB_eEVT_ID_RESERVED679              = 679,
    XB_eEVT_ID_RESERVED680              = 680,
    XB_eEVT_ID_RESERVED681              = 681,
    XB_eEVT_ID_RESERVED682              = 682,
    XB_eEVT_ID_RESERVED683              = 683,
    XB_eEVT_ID_RESERVED684              = 684,
    XB_eEVT_ID_RESERVED685              = 685,
    XB_eEVT_ID_RESERVED686              = 686,
    XB_eEVT_ID_RESERVED687              = 687,
    XB_eEVT_ID_RESERVED688              = 688,
    XB_eEVT_ID_RESERVED689              = 689,
    XB_eEVT_ID_RESERVED690              = 690,
    XB_eEVT_ID_RESERVED691              = 691,
    XB_eEVT_ID_RESERVED692              = 692,
    XB_eEVT_ID_RESERVED693              = 693,
    XB_eEVT_ID_RESERVED694              = 694,
    XB_eEVT_ID_RESERVED695              = 695,
    XB_eEVT_ID_RESERVED696              = 696,
    XB_eEVT_ID_RESERVED697              = 697,
    XB_eEVT_ID_RESERVED698              = 698,
    XB_eEVT_ID_RESERVED699              = 699,
    XB_eEVT_ID_RESERVED700              = 700,
    XB_eEVT_ID_RESERVED701              = 701,
    XB_eEVT_ID_RESERVED702              = 702,
    XB_eEVT_ID_RESERVED703              = 703,
    XB_eEVT_ID_RESERVED704              = 704,
    XB_eEVT_ID_RESERVED705              = 705,
    XB_eEVT_ID_RESERVED706              = 706,
    XB_eEVT_ID_RESERVED707              = 707,
    XB_eEVT_ID_RESERVED708              = 708,
    XB_eEVT_ID_RESERVED709              = 709,
    XB_eEVT_ID_RESERVED710              = 710,
    XB_eEVT_ID_RESERVED711              = 711,
    XB_eEVT_ID_RESERVED712              = 712,
    XB_eEVT_ID_RESERVED713              = 713,
    XB_eEVT_ID_RESERVED714              = 714,
    XB_eEVT_ID_RESERVED715              = 715,
    XB_eEVT_ID_RESERVED716              = 716,
    XB_eEVT_ID_RESERVED717              = 717,
    XB_eEVT_ID_RESERVED718              = 718,
    XB_eEVT_ID_RESERVED719              = 719,
    XB_eEVT_ID_RESERVED720              = 720,
    XB_eEVT_ID_RESERVED721              = 721,
    XB_eEVT_ID_RESERVED722              = 722,
    XB_eEVT_ID_RESERVED723              = 723,
    XB_eEVT_ID_RESERVED724              = 724,
    XB_eEVT_ID_RESERVED725              = 725,
    XB_eEVT_ID_RESERVED726              = 726,
    XB_eEVT_ID_RESERVED727              = 727,
    XB_eEVT_ID_RESERVED728              = 728,
    XB_eEVT_ID_RESERVED729              = 729,
    XB_eEVT_ID_RESERVED730              = 730,
    XB_eEVT_ID_RESERVED731              = 731,
    XB_eEVT_ID_RESERVED732              = 732,
    XB_eEVT_ID_RESERVED733              = 733,
    XB_eEVT_ID_RESERVED734              = 734,
    XB_eEVT_ID_RESERVED735              = 735,
    XB_eEVT_ID_RESERVED736              = 736,
    XB_eEVT_ID_RESERVED737              = 737,
    XB_eEVT_ID_RESERVED738              = 738,
    XB_eEVT_ID_RESERVED739              = 739,
    XB_eEVT_ID_RESERVED740              = 740,
    XB_eEVT_ID_RESERVED741              = 741,
    XB_eEVT_ID_RESERVED742              = 742,
    XB_eEVT_ID_RESERVED743              = 743,
    XB_eEVT_ID_RESERVED744              = 744,
    XB_eEVT_ID_RESERVED745              = 745,
    XB_eEVT_ID_RESERVED746              = 746,
    XB_eEVT_ID_RESERVED747              = 747,
    XB_eEVT_ID_RESERVED748              = 748,
    XB_eEVT_ID_RESERVED749              = 749,
    XB_eEVT_ID_RESERVED750              = 750,
    XB_eEVT_ID_RESERVED751              = 751,
    XB_eEVT_ID_RESERVED752              = 752,
    XB_eEVT_ID_RESERVED753              = 753,
    XB_eEVT_ID_RESERVED754              = 754,
    XB_eEVT_ID_RESERVED755              = 755,
    XB_eEVT_ID_RESERVED756              = 756,
    XB_eEVT_ID_RESERVED757              = 757,
    XB_eEVT_ID_RESERVED758              = 758,
    XB_eEVT_ID_RESERVED759              = 759,
    XB_eEVT_ID_RESERVED760              = 760,
    XB_eEVT_ID_RESERVED761              = 761,
    XB_eEVT_ID_RESERVED762              = 762,
    XB_eEVT_ID_RESERVED763              = 763,
    XB_eEVT_ID_RESERVED764              = 764,
    XB_eEVT_ID_RESERVED765              = 765,
    XB_eEVT_ID_RESERVED766              = 766,
    XB_eEVT_ID_RESERVED767              = 767
} XB_teEVT_ID;

// Fault Identifier
// Used in the following fields:
//   XB_tzPGN_FAULT_LOG_STS.eFaultId
//   XB_tzPGN_ACTIVE_FAULTS_STS.eFaultId
//   XB_tzPGN_CLEAR_CMD.eFaultId
//   XB_tzPGN_UI_CFG_FAULT_TXT.eFaultId
//   XB_tzPGN_UI_CFG_FAULT_BEHAVIOR.eFaultId
typedef enum eFLT_ID
{
    XB_eFLT_ID_TRANSISTOR_OVER_TEMPERATURE_SHUTDOWN1 =   0,
    XB_eFLT_ID_TRANSISTOR_OVER_TEMPERATURE_SHUTDOWN2 =   1,
    XB_eFLT_ID_CAPACITOR_OVER_TEMPERATURE_SHUTDOWN1 =   2,
    XB_eFLT_ID_TRANSFORMER_OVER_TEMPERATURE_SHUTDOWN1 =   3,
    XB_eFLT_ID_BATTERY_OVER_TEMPERATURE_SHUTDOWN1 =   4,
    XB_eFLT_ID_AMBIENT_OVER_TEMPERATURE_SHUTDOWN1 =   5,
    XB_eFLT_ID_AC_OUTPUT_OVERLOAD_SHUTDOWN1 =   6,
    XB_eFLT_ID_AC_OUTPUT_OVERLOAD_PEAK_CURRENT_SHUTDOWN1 =   7,
    XB_eFLT_ID_NEUTRAL_LOSS_SHUTDOWN    =   8,
    XB_eFLT_ID_DC_OVER_VOLTAGE_SHUTDOWN1 =   9,
    XB_eFLT_ID_DC_UNDER_VOLTAGE_IMMEDIATE_SHUTDOWN1 =  10,
    XB_eFLT_ID_DC_UNDER_VOLTAGE_SHUTDOWN1 =  11,
    XB_eFLT_ID_AC_INPUT_LINE1OVER_VOLTAGE_SHUTDOWN =  12,
    XB_eFLT_ID_AC_INPUT_LINE1UNDER_VOLTAGE_SHUTDOWN =  13,
    XB_eFLT_ID_AC_INPUT_LINE2OVER_VOLTAGE_SHUTDOWN =  14,
    XB_eFLT_ID_AC_INPUT_LINE2UNDER_VOLTAGE_SHUTDOWN =  15,
    XB_eFLT_ID_AC_INPUT_LINE1OVER_FREQUENCY_SHUTDOWN =  16,
    XB_eFLT_ID_AC_INPUT_LINE1UNDER_FREQUENCY_SHUTDOWN =  17,
    XB_eFLT_ID_AC_INPUT_LINE2OVER_FREQUENCY_SHUTDOWN =  18,
    XB_eFLT_ID_AC_INPUT_LINE2UNDER_FREQUENCY_SHUTDOWN =  19,
    XB_eFLT_ID_ADC_CONVERSION_TIMEOUT   =  22,
    XB_eFLT_ID_AC_OUTPUT_OVER_VOLTAGE_SHUTDOWN1 =  23,
    XB_eFLT_ID_AC_OUTPUT_UNDER_VOLTAGE_SHUTDOWN1 =  24,
    XB_eFLT_ID_APS_OVER_VOLTAGE         =  25,
    XB_eFLT_ID_APS_UNDER_VOLTAGE        =  26,
    XB_eFLT_ID_OPS_OVER_VOLTAGE         =  27,
    XB_eFLT_ID_OPS_UNDER_VOLTAGE        =  28,
    XB_eFLT_ID_AC_BACKFEED_SHUTDOWN     =  29,
    XB_eFLT_ID_BATTERY_UNDER_TEMPERATURE_FAULT =  30,
    XB_eFLT_ID_ECHO_CHARGER_SHORT_CIRCUIT =  31,
    XB_eFLT_ID_ECHO_CHARGER_REVERSE_POLARITY =  32,
    XB_eFLT_ID_ECHO_CHARGER_INPUT_OVER_VOLTAGE =  33,
    XB_eFLT_ID_ECHO_CHARGER_INPUT_UNDER_VOLTAGE =  34,
    XB_eFLT_ID_ECHO_CHARGER_OVER_TEMPERATURE =  35,
    XB_eFLT_ID_ECHO_CHARGER_UNDER_TEMPERATURE =  36,
    XB_eFLT_ID_ECHO_CHARGER_NOT_COMMUNICATING =  37,
    XB_eFLT_ID_LOST_INTERPROCESSOR_COMMUNICATIONS =  40,
    XB_eFLT_ID_DEAD_BATTERY_CHARGE_TIMEOUT =  41,
    XB_eFLT_ID_MAX_START_RETRIES        = 200,
    XB_eFLT_ID_UNABLETO_STOP_GENERATOR  = 201,
    XB_eFLT_ID_GEN_OFF_NOT_AGS          = 202,
    XB_eFLT_ID_CLOCK_NOT_SET            = 250,
    XB_eFLT_ID_DEVICE_LOST              = 251,
    XB_eFLT_ID_NEW_DEVICE               = 252,
    XB_eFLT_ID_SILICON_SERIAL_ID_FAILURE = 500,
    XB_eFLT_ID_NON_VOLATILE_ERROR       = 501,
    XB_eFLT_ID_WATCHDOG_RESET           = 502,
    XB_eFLT_ID_REALTIME_CLOCK_FAILURE   = 503,
    XB_eFLT_ID_LOST_NETWORK_CONNECTION  = 504,
    XB_eFLT_ID_CONTROLLER_FAILURE       = 505,
    XB_eFLT_ID_WRONG_FAULT_IDENTIFIER   = 506,
    XB_eFLT_ID_WRONG_WARNING_IDENTIFIER = 507,
    XB_eFLT_ID_INVALID_INTERRUPT        = 508,
    XB_eFLT_ID_RESERVED                 = 8189,
    XB_eFLT_ID_OUT_OF_RANGE             = 8190,
    XB_eFLT_ID_NO_CHANGE_DATA_NA        = 8191
} XB_teFLT_ID;

// Operating State, All
// Used in the following fields:
//   XB_tzPGN_STATE_EVT_LOG_STS.eStateId
typedef enum eOP_STATE_ALL
{
    XB_eOP_STATE_ALL_HIBERNATE          =   0,
    XB_eOP_STATE_ALL_SAFE               =   1,
    XB_eOP_STATE_ALL_POWER_SAVE         =   2,
    XB_eOP_STATE_ALL_OPERATING          =   3,
    XB_eOP_STATE_ALL_DIAGNOSTIC         =   4,
    XB_eOP_STATE_ALL_QUIET_TIME         = 265,
    XB_eOP_STATE_ALL_AUTO_ON            = 266,
    XB_eOP_STATE_ALL_AUTO_OFF           = 267,
    XB_eOP_STATE_ALL_MANUAL_ON          = 268,
    XB_eOP_STATE_ALL_MANUAL_OFF         = 269,
    XB_eOP_STATE_ALL_GENERATOR_SHUTDOWN = 270,
    XB_eOP_STATE_ALL_EXTERNAL_SHUTDOWN  = 271,
    XB_eOP_STATE_ALL_FAULT              = 272,
    XB_eOP_STATE_ALL_SUSPEND            = 273,
    XB_eOP_STATE_ALL_NOT_OPERATING      = 274,
    XB_eOP_STATE_ALL_MONITORING         = 512,
    XB_eOP_STATE_ALL_NOT_CHARGING       = 768,
    XB_eOP_STATE_ALL_BULK               = 769,
    XB_eOP_STATE_ALL_ABSORPTION         = 770,
    XB_eOP_STATE_ALL_OVERCHARGE         = 771,
    XB_eOP_STATE_ALL_EQUALIZE           = 772,
    XB_eOP_STATE_ALL_FLOAT              = 773,
    XB_eOP_STATE_ALL_NO_FLOAT           = 774,
    XB_eOP_STATE_ALL_CONSTANT_VI        = 775,
    XB_eOP_STATE_ALL_CHARGER_DISABLED   = 776,
    XB_eOP_STATE_ALL_QUALIFYING_AC      = 777,
    XB_eOP_STATE_ALL_QUALIFYING_APS     = 778,
    XB_eOP_STATE_ALL_ENGAGING_CHARGER   = 779,
    XB_eOP_STATE_ALL_CHARGE_FAULT       = 780,
    XB_eOP_STATE_ALL_CHARGER_SUSPEND    = 781,
    XB_eOP_STATE_ALL_AC_GOOD            = 782,
    XB_eOP_STATE_ALL_APS_GOOD           = 783,
    XB_eOP_STATE_ALL_AC_FAULT           = 784,
    XB_eOP_STATE_ALL_CHARGE             = 785,
    XB_eOP_STATE_ALL_INV                = 1024,
    XB_eOP_STATE_ALL_AC_PASSTHRU        = 1025,
    XB_eOP_STATE_ALL_APS_ONLY           = 1026,
    XB_eOP_STATE_ALL_LOAD_SENSE_ACTIVE  = 1027,
    XB_eOP_STATE_ALL_INVERTER_DISABLED  = 1028,
    XB_eOP_STATE_ALL_LOAD_SENSE_READY   = 1029,
    XB_eOP_STATE_ALL_ENGAGING_INVERTER  = 1030,
    XB_eOP_STATE_ALL_INVERT_FAULT       = 1031,
    XB_eOP_STATE_ALL_INVERTER_STANDBY   = 1032,
    XB_eOP_STATE_ALL_SCREEN_SAVER       = 1280,
    XB_eOP_STATE_ALL_ACTIVE             = 1281
} XB_teOP_STATE_ALL;

// Source Quality
// Used in the following fields:
//   XB_tzPGN_AC_IN_STS_RMS.eQuality
//   XB_tzPGN_AC_IN_STS_PEAK.eQuality
//   XB_tzPGN_AC_IN_STS_AVG.eQuality
typedef enum eSRC_QUAL
{
    XB_eSRC_QUAL_INVALID                =   0,
    XB_eSRC_QUAL_BEING_QUALIFIED        =   1,
    XB_eSRC_QUAL_BAD_FREQUENCY          =   2,
    XB_eSRC_QUAL_BAD_LEVEL              =   3,
    XB_eSRC_QUAL_GOOD                   =   4,
    XB_eSRC_QUAL_RESERVED               = 253,
    XB_eSRC_QUAL_OUT_OF_RANGE           = 254,
    XB_eSRC_QUAL_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teSRC_QUAL;

// DC Source Identifier
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_BATT_SOC.eDcSrcId
//   XB_tzPGN_BATT_MON_STS.eDcSrcId
//   XB_tzPGN_DC_SRC_STS.eDcSrcId
//   XB_tzPGN_CHG_STS.eDcSrcId
//   XB_tzPGN_BATT_MON_BATT_STATS.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_UV.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_OV.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_UI.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_OI.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_RIP_OV_PEAK.eDcSrcId
//   XB_tzPGN_CHG_CFG_BULK.eDcSrcId
//   XB_tzPGN_CHG_CFG_ABSORP.eDcSrcId
//   XB_tzPGN_CHG_CFG_OVERCHARGE.eDcSrcId
//   XB_tzPGN_CHG_CFG_FLOAT.eDcSrcId
//   XB_tzPGN_CHG_CFG_EQUALIZE.eDcSrcId
//   XB_tzPGN_CHG_CFG_CV_CI.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_BATT.eDcSrcId
//   XB_tzPGN_BATT_MON_CFG.eDcSrcId
//   XB_tzPGN_AGS_CFG_DC_V.eDcSrcId
//   XB_tzPGN_CHG_CFG.eDcSrcId
//   XB_tzPGN_INV_STATS_DC.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_PV_ARRAY.eDcSrcId
//   XB_tzPGN_CHG_STATS_DC.eDcSrcId
//   XB_tzPGN_CHG_CTRL_CMD.eDcSrcId
typedef enum eDC_SRC_ID
{
    XB_eDC_SRC_ID_INVALID               =   0,
    XB_eDC_SRC_ID_NONE                  =   1,
    XB_eDC_SRC_ID_ANONYMOUS             =   2,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK1       =   3,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK2       =   4,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK3       =   5,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK4       =   6,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK5       =   7,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK6       =   8,
    XB_eDC_SRC_ID_START_BAT_BANK1       =   9,
    XB_eDC_SRC_ID_START_BAT_BANK2       =  10,
    XB_eDC_SRC_ID_START_BAT_BANK3       =  11,
    XB_eDC_SRC_ID_START_BAT_BANK4       =  12,
    XB_eDC_SRC_ID_START_BAT_BANK5       =  13,
    XB_eDC_SRC_ID_START_BAT_BANK6       =  14,
    XB_eDC_SRC_ID_SOLAR_ARRAY1          =  21,
    XB_eDC_SRC_ID_SOLAR_ARRAY2          =  22,
    XB_eDC_SRC_ID_SOLAR_ARRAY3          =  23,
    XB_eDC_SRC_ID_SOLAR_ARRAY4          =  24,
    XB_eDC_SRC_ID_SOLAR_ARRAY5          =  25,
    XB_eDC_SRC_ID_SOLAR_ARRAY6          =  26,
    XB_eDC_SRC_ID_FUEL_CELL1            =  27,
    XB_eDC_SRC_ID_FUEL_CELL2            =  28,
    XB_eDC_SRC_ID_FUEL_CELL3            =  29,
    XB_eDC_SRC_ID_FUEL_CELL4            =  30,
    XB_eDC_SRC_ID_FUEL_CELL5            =  31,
    XB_eDC_SRC_ID_FUEL_CELL6            =  32,
    XB_eDC_SRC_ID_CUSTOM1               =  33,
    XB_eDC_SRC_ID_CUSTOM2               =  34,
    XB_eDC_SRC_ID_CUSTOM3               =  35,
    XB_eDC_SRC_ID_CUSTOM4               =  36,
    XB_eDC_SRC_ID_CUSTOM5               =  37,
    XB_eDC_SRC_ID_CUSTOM6               =  38,
    XB_eDC_SRC_ID_RESERVED              = 253,
    XB_eDC_SRC_ID_OUTOF_RANGE           = 254,
    XB_eDC_SRC_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teDC_SRC_ID;

// AC Source Identifier
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_AC_I.eAcSrcId
//   XB_tzPGN_AC_OUT_CFG_UV_RMS.eAcSrcId
//   XB_tzPGN_INV_CTRL_CMD.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_OF.eAcSrcId
//   XB_tzPGN_AC_IN_STS_RMS.eAcSrcId
//   XB_tzPGN_AC_IN_STS_PEAK.eAcSrcId
//   XB_tzPGN_AC_IN_STS_AVG.eAcSrcId
//   XB_tzPGN_AC_OUT_STS_RMS.eAcSrcId
//   XB_tzPGN_AC_OUT_STS_PEAK.eAcSrcId
//   XB_tzPGN_AC_OUT_STS_AVG.eAcSrcId
//   XB_tzPGN_INV_STATS_AC.eAcSrcId
//   XB_tzPGN_INV_STS.eAcSrcId
//   XB_tzPGN_AC_OUT_CFG.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_UV_RMS.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_UV_PEAK.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_UV_AVG.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_OV_RMS.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_OV_PEAK.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_OV_AVG.eAcSrcId
//   XB_tzPGN_INV_CFG_LOAD_SENSE.eAcSrcId
//   XB_tzPGN_INV_CFG.eAcSrcId
//   XB_tzPGN_AC_IN_CFG.eAcSrcId
//   XB_tzPGN_CHG_STATS_AC.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_UF.eAcSrcId
//   XB_tzPGN_AC_OUT_CFG_OV_RMS.eAcSrcId
typedef enum eAC_SRC_ID
{
    XB_eAC_SRC_ID_INVALID               =   0,
    XB_eAC_SRC_ID_NONE                  =   1,
    XB_eAC_SRC_ID_ANONYMOUS             =   2,
    XB_eAC_SRC_ID_SHORE1                =   3,
    XB_eAC_SRC_ID_SHORE2                =   4,
    XB_eAC_SRC_ID_SHORE3                =   5,
    XB_eAC_SRC_ID_SHORE4                =   6,
    XB_eAC_SRC_ID_SHORE5                =   7,
    XB_eAC_SRC_ID_SHORE6                =   8,
    XB_eAC_SRC_ID_SHORE7                =   9,
    XB_eAC_SRC_ID_SHORE8                =  10,
    XB_eAC_SRC_ID_SHORE9                =  11,
    XB_eAC_SRC_ID_SHORE10               =  12,
    XB_eAC_SRC_ID_SHORE11               =  13,
    XB_eAC_SRC_ID_SHORE12               =  14,
    XB_eAC_SRC_ID_SHORE13               =  15,
    XB_eAC_SRC_ID_SHORE14               =  16,
    XB_eAC_SRC_ID_SHORE15               =  17,
    XB_eAC_SRC_ID_SHORE16               =  18,
    XB_eAC_SRC_ID_GEN1                  =  19,
    XB_eAC_SRC_ID_GEN2                  =  20,
    XB_eAC_SRC_ID_GEN3                  =  21,
    XB_eAC_SRC_ID_GEN4                  =  22,
    XB_eAC_SRC_ID_GEN5                  =  23,
    XB_eAC_SRC_ID_GEN6                  =  24,
    XB_eAC_SRC_ID_GEN7                  =  25,
    XB_eAC_SRC_ID_GEN8                  =  26,
    XB_eAC_SRC_ID_GEN9                  =  27,
    XB_eAC_SRC_ID_GEN10                 =  28,
    XB_eAC_SRC_ID_GEN11                 =  29,
    XB_eAC_SRC_ID_GEN12                 =  30,
    XB_eAC_SRC_ID_GEN13                 =  31,
    XB_eAC_SRC_ID_GEN14                 =  32,
    XB_eAC_SRC_ID_GEN15                 =  33,
    XB_eAC_SRC_ID_GEN16                 =  34,
    XB_eAC_SRC_ID_AC1                   =  35,
    XB_eAC_SRC_ID_AC2                   =  36,
    XB_eAC_SRC_ID_AC3                   =  37,
    XB_eAC_SRC_ID_AC4                   =  38,
    XB_eAC_SRC_ID_AC5                   =  39,
    XB_eAC_SRC_ID_AC6                   =  40,
    XB_eAC_SRC_ID_AC7                   =  41,
    XB_eAC_SRC_ID_AC8                   =  42,
    XB_eAC_SRC_ID_AC9                   =  43,
    XB_eAC_SRC_ID_AC10                  =  44,
    XB_eAC_SRC_ID_AC11                  =  45,
    XB_eAC_SRC_ID_AC12                  =  46,
    XB_eAC_SRC_ID_AC13                  =  47,
    XB_eAC_SRC_ID_AC14                  =  48,
    XB_eAC_SRC_ID_AC15                  =  49,
    XB_eAC_SRC_ID_AC16                  =  50,
    XB_eAC_SRC_ID_RESERVED              = 253,
    XB_eAC_SRC_ID_OUT_OF_RANGE          = 254,
    XB_eAC_SRC_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teAC_SRC_ID;

// AC Line
// Used in the following fields:
//   XB_tzPGN_AC_IN_STS_RMS.eLine
//   XB_tzPGN_AC_IN_STS_PEAK.eLine
//   XB_tzPGN_AC_IN_STS_AVG.eLine
//   XB_tzPGN_AC_OUT_STS_RMS.eLine
//   XB_tzPGN_AC_OUT_STS_PEAK.eLine
//   XB_tzPGN_AC_OUT_STS_AVG.eLine
//   XB_tzPGN_INV_STATS_AC.eLine
//   XB_tzPGN_CHG_STATS_AC.eLine
typedef enum eAC_LINE
{
    XB_eAC_LINE_INVALID                 =   0,
    XB_eAC_LINE_LINE1                   =   1,
    XB_eAC_LINE_LINE2                   =   2,
    XB_eAC_LINE_LINE3                   =   3,
    XB_eAC_LINE_RESERVED                = 253,
    XB_eAC_LINE_OUT_OF_RANGE            = 254,
    XB_eAC_LINE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teAC_LINE;

// Reset Command
// Used in the following fields:
//   XB_tzPGN_RESET_CMD.eCmd
typedef enum eRST_CMD
{
    XB_eRST_CMD_REBOOT                  =   0,
    XB_eRST_CMD_REBOOT_DL_MODE          =   1,
    XB_eRST_CMD_FACTORY                 =   2,
    XB_eRST_CMD_OEM                     =   3,
    XB_eRST_CMD_CLEAR_NV_AND_REBOOT     =   4,
    XB_eRST_CMD_NO_CHANGE               = 252,
    XB_eRST_CMD_RESERVED                = 253,
    XB_eRST_CMD_OUT_OF_RANGE            = 254,
    XB_eRST_CMD_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teRST_CMD;

// Association Type
// Used in the following fields:
//   XB_tzPGN_UI_CFG_ASSOC_LBL.eAssocType
//   XB_tzPGN_ASSOC_CFG.eAssocType
//   XB_tzPGN_ASSOC_STS.eAssocType
typedef enum eASSN_TYPE
{
    XB_eASSN_TYPE_INVALID               =   0,
    XB_eASSN_TYPE_DC_INPUT              =   1,
    XB_eASSN_TYPE_DC_OUT                =   2,
    XB_eASSN_TYPE_DC_INPUT_OUT          =   3,
    XB_eASSN_TYPE_RESERVED              =   4,
    XB_eASSN_TYPE_AC_INPUT              =   5,
    XB_eASSN_TYPE_AC_OUT                =   6,
    XB_eASSN_TYPE_AC_INPUT_OUT          =   7
} XB_teASSN_TYPE;

// Generator Identifier
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_AC_I.eGenId
//   XB_tzPGN_AGS_CFG_BATT_SOC.eGenId
//   XB_tzPGN_AGS_STS.eGenId
//   XB_tzPGN_AGS_STS_GEN.eGenId
//   XB_tzPGN_AGS_CFG.eGenId
//   XB_tzPGN_AGS_CFG_GEN.eGenId
//   XB_tzPGN_AGS_CFG_CNTCT_CLS.eGenId
//   XB_tzPGN_AGS_CFG_DC_V.eGenId
//   XB_tzPGN_AGS_STATS_GEN.eGenId
//   XB_tzPGN_AGS_CTRL_CMD.eGenId
typedef enum eGEN_ID
{
    XB_eGEN_ID_NO_GENERATOR             =   0,
    XB_eGEN_ID_GENERATOR1               =   1,
    XB_eGEN_ID_GENERATOR2               =   2,
    XB_eGEN_ID_GENERATOR3               =   3,
    XB_eGEN_ID_GENERATOR4               =   4,
    XB_eGEN_ID_RESERVED                 = 253,
    XB_eGEN_ID_OUT_OF_RANGE             = 254,
    XB_eGEN_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teGEN_ID;

// Operating State, AGS
// Used in the following fields:
//   XB_tzPGN_AGS_STS.eOpState
typedef enum eOP_STATE_AGS
{
    XB_eOP_STATE_AGS_QUIET_TIME         = 265,
    XB_eOP_STATE_AGS_AUTO_ON            = 266,
    XB_eOP_STATE_AGS_AUTO_OFF           = 267,
    XB_eOP_STATE_AGS_MANUAL_ON          = 268,
    XB_eOP_STATE_AGS_MANUAL_OFF         = 269,
    XB_eOP_STATE_AGS_GENERATOR_SHUTDOWN = 270,
    XB_eOP_STATE_AGS_EXTERNAL_SHUTDOWN  = 271,
    XB_eOP_STATE_AGS_FAULT              = 272,
    XB_eOP_STATE_AGS_SUSPEND            = 273,
    XB_eOP_STATE_AGS_NOT_OPERATING      = 274
} XB_teOP_STATE_AGS;

// Network State
// Used in the following fields:
//   XB_tzPGN_STS.eNetworkState
typedef enum eNETWORK_STATE
{
    XB_eNETWORK_STATE_ERROR_ACTIVE      =   0,
    XB_eNETWORK_STATE_ERROR_PASSIVE     =   1,
    XB_eNETWORK_STATE_BUS_OFF           =   2,
    XB_eNETWORK_STATE_UNKNOWN           =   3
} XB_teNETWORK_STATE;

// Clear Item Identifier
// Used in the following fields:
//   XB_tzPGN_CLEAR_CMD.eListItem
typedef enum eCLR_ITEM_ID
{
    XB_eCLR_ITEM_ID_NONE                =   0,
    XB_eCLR_ITEM_ID_FAULT_LOG           =   1,
    XB_eCLR_ITEM_ID_ACTIVE_FAULTS       =   2,
    XB_eCLR_ITEM_ID_WARNING_LOG         =   4,
    XB_eCLR_ITEM_ID_ACTIVE_WARNINGS     =   8,
    XB_eCLR_ITEM_ID_STATE_EVENT_LOG     =  16,
    XB_eCLR_ITEM_ID_COMM_STATS          =  32,
    XB_eCLR_ITEM_ID_STATS               =  64,
    XB_eCLR_ITEM_ID_ALL                 = 255
} XB_teCLR_ITEM_ID;

// Group Function Transmit And Receive PGN List
// Used in the following fields:
//   XB_tzPGN_PGN_LIST_TX.eTXedPgnGroupFunctionCode
//   XB_tzPGN_PGN_LIST_RX.eRxedPgnGroupFunctionCode
typedef enum eGRP_FUNC_TX_AND_RX_PGN_LIST
{
    XB_eGRP_FUNC_TX_AND_RX_PGN_LIST_TX_PGN_LIST_MESSAGE =   0,
    XB_eGRP_FUNC_TX_AND_RX_PGN_LIST_RX_PGN_LIST_MESSAGE =   1
} XB_teGRP_FUNC_TX_AND_RX_PGN_LIST;

// Charging Algorithm Type
// Used in the following fields:
//   XB_tzPGN_CHG_STS.eChgAlgorithmType
//   XB_tzPGN_CHG_CFG.eChgAlgorithmType
typedef enum eCHG_ALG_TYPE
{
    XB_eCHG_ALG_TYPE_INVALID            =   0,
    XB_eCHG_ALG_TYPE_3STAGE             =   1,
    XB_eCHG_ALG_TYPE_2STAGE_NO_FLOAT    =   2,
    XB_eCHG_ALG_TYPE_CVCC               =   3,
    XB_eCHG_ALG_TYPE_TRICKLE            =   4,
    XB_eCHG_ALG_TYPE_RESERVED           = 253,
    XB_eCHG_ALG_TYPE_OUTOF_RANGE        = 254,
    XB_eCHG_ALG_TYPE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teCHG_ALG_TYPE;

// Inverter Mode
// Used in the following fields:
//   XB_tzPGN_INV_CFG.eInvMode
typedef enum eINV_MODE
{
    XB_eINV_MODE_INVALID                =   0,
    XB_eINV_MODE_STANDALONE             =   1,
    XB_eINV_MODE_SERIES_MASTER2PHASE    =   2,
    XB_eINV_MODE_SERIES_MASTER3PHASE    =   3,
    XB_eINV_MODE_SERIES_SLAVE2PHASE     =   4,
    XB_eINV_MODE_SERIES_SLAVE13PHASE    =   5,
    XB_eINV_MODE_SERIES_SLAVE23PHASE    =   6,
    XB_eINV_MODE_SERIES_STANDALONE_PARALLEL_MASTER =   7,
    XB_eINV_MODE_PARALLEL_SLAVE         =   8,
    XB_eINV_MODE_SERIES_MASTER2PHASE_PARALLEL_MASTER =   9,
    XB_eINV_MODE_SERIES_MASTER3PHASE_PARALLEL_MASTER =  10,
    XB_eINV_MODE_SERIES_SLAVE2PHASE_PARALLEL_MASTER =  11,
    XB_eINV_MODE_SERIES_SLAVE13PHASE_PARALLEL_MASTER =  12,
    XB_eINV_MODE_SERIES_SLAVE23PHASE_PARALLEL_MASTER =  13,
    XB_eINV_MODE_RESERVED               = 253,
    XB_eINV_MODE_OUT_OF_RANGE           = 254,
    XB_eINV_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teINV_MODE;

// Battery Type
// Used in the following fields:
//   XB_tzPGN_DC_SRC_CFG_BATT.eBattType
typedef enum eBATT_TYPE
{
    XB_eBATT_TYPE_FLOODED               =   0,
    XB_eBATT_TYPE_GEL                   =   1,
    XB_eBATT_TYPE_AGM                   =   2,
    XB_eBATT_TYPE_CUSTOM                =   3,
    XB_eBATT_TYPE_DEEP_CYCLE            =   4,
    XB_eBATT_TYPE_OPTIMA                =   5,
    XB_eBATT_TYPE_RESERVED              = 253,
    XB_eBATT_TYPE_OUT_OF_RANGE          = 254,
    XB_eBATT_TYPE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teBATT_TYPE;

// Charger Mode
// Used in the following fields:
//   XB_tzPGN_CHG_STS.eChgMode
//   XB_tzPGN_CHG_CFG.eChgMode
typedef enum eCHG_MODE
{
    XB_eCHG_MODE_STANDALONE             =   0,
    XB_eCHG_MODE_PRIMARY                =   1,
    XB_eCHG_MODE_SECONDARY              =   2,
    XB_eCHG_MODE_ECHO                   =   3,
    XB_eCHG_MODE_RESERVED               = 253,
    XB_eCHG_MODE_OUTOF_RANGE            = 254,
    XB_eCHG_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teCHG_MODE;

// Operating State, Inverter
// Used in the following fields:
//   XB_tzPGN_INV_STS.eOpState
typedef enum eOP_STATE_INV
{
    XB_eOP_STATE_INV_INVERT             = 1024,
    XB_eOP_STATE_INV_AC_PASSTHRU        = 1025,
    XB_eOP_STATE_INV_APS_ONLY           = 1026,
    XB_eOP_STATE_INV_LOAD_SENSE_ACTIVE  = 1027,
    XB_eOP_STATE_INV_INVERTER_DISABLED  = 1028,
    XB_eOP_STATE_INV_LOAD_SENSE_READY   = 1029,
    XB_eOP_STATE_INV_ENGAGING_INVERTER  = 1030,
    XB_eOP_STATE_INV_INVERT_FAULT       = 1031,
    XB_eOP_STATE_INV_INVERTER_STANDBY   = 1032
} XB_teOP_STATE_INV;

// AGS Mode
// Used in the following fields:
//   XB_tzPGN_AGS_CTRL_CMD.eDesiredMode
typedef enum eAGS_MODE
{
    XB_eAGS_MODE_MANUAL_OFF             =   0,
    XB_eAGS_MODE_MANUAL_ON              =   1,
    XB_eAGS_MODE_AUTOMATIC              =   2,
    XB_eAGS_MODE_RESERVED               = 253,
    XB_eAGS_MODE_OUT_OF_RANGE           = 254,
    XB_eAGS_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teAGS_MODE;

// Software Module Identifier
// Used in the following fields:
//   XB_tzPGN_SW_VER_STS.eSwModId
//   XB_tzPGN_FILE_DNLD_INF.eSwModId
typedef enum eSW_MOD_ID
{
    XB_eSW_MOD_ID_XAN_BUS               =   0,
    XB_eSW_MOD_ID_OPERATING_SYSTEM      =   1,
    XB_eSW_MOD_ID_APPLICATION           =   2,
    XB_eSW_MOD_ID_LOADER                =   3,
    XB_eSW_MOD_ID_RESERVED2             =   4,
    XB_eSW_MOD_ID_OTHER1                =   5,
    XB_eSW_MOD_ID_OTHER2                =   6,
    XB_eSW_MOD_ID_RESERVED              = 253,
    XB_eSW_MOD_ID_OUT_OF_RANGE          = 254,
    XB_eSW_MOD_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teSW_MOD_ID;

// Download Result Code
// Used in the following fields:
//   XB_tzPGN_FILE_DNLD_STS.eResultCode
typedef enum eDL_RESULT_CODE
{
    XB_eDL_RESULT_CODE_NO_ERROR         =   0,
    XB_eDL_RESULT_CODE_INVALID_FILE_DL_INF =   1,
    XB_eDL_RESULT_CODE_INVALID_FILE_DL_BLK =   2,
    XB_eDL_RESULT_CODE_BLK_WRITE_ERR    =   3,
    XB_eDL_RESULT_CODE_FILE_CRC_ERR     =   4
} XB_teDL_RESULT_CODE;

// Generator 'On' Reason
// Used in the following fields:
//   XB_tzPGN_AGS_STS.eGenOnReason
typedef enum eGEN_ON_REASON
{
    XB_eGEN_ON_REASON_NOT_ON            =   0,
    XB_eGEN_ON_REASON_DC_VOLTAGE_LOW    =   1,
    XB_eGEN_ON_REASON_BATTERY_SOC_LOW   =   2,
    XB_eGEN_ON_REASON_AC_CURRENT_HIGH   =   3,
    XB_eGEN_ON_REASON_CONTACT_CLOSED    =   4,
    XB_eGEN_ON_REASON_MANUAL_ON         =   5,
    XB_eGEN_ON_REASON_EXERCISE          =   6,
    XB_eGEN_ON_REASON_NON_QUIET_TIME    =   7,
    XB_eGEN_ON_REASON_EXTERNAL_ONVIA_AGS =   8,
    XB_eGEN_ON_REASON_EXTERNAL_ONVIA_GENERATOR =   9,
    XB_eGEN_ON_REASON_UNABLE_TO_STOP    =  10
} XB_teGEN_ON_REASON;

// Control Mode
// Used in the following fields:
//   XB_tzPGN_STS.eDesiredMode
//   XB_tzPGN_STS.eCurrentMode
//   XB_tzPGN_STS.eLastMode
//   XB_tzPGN_CTRL_CMD.eDesiredMode
typedef enum eCTRL_MODE
{
    XB_eCTRL_MODE_HIBERNATE             =   0,
    XB_eCTRL_MODE_POWER_SAVE            =   1,
    XB_eCTRL_MODE_SAFE                  =   2,
    XB_eCTRL_MODE_OPERATING             =   3,
    XB_eCTRL_MODE_DIAGNOSTIC            =   4,
    XB_eCTRL_MODE_LAST_MODE             = 252,
    XB_eCTRL_MODE_RESERVED              = 253,
    XB_eCTRL_MODE_OUT_OF_RANGE          = 254,
    XB_eCTRL_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teCTRL_MODE;

// User Access Mode
// Used in the following fields:
//   XB_tzPGN_UI_CFG.eAccMode
typedef enum eUSER_ACCESS_MODE
{
    XB_eUSER_ACCESS_MODE_SIMPLE         =   0,
    XB_eUSER_ACCESS_MODE_SAVVY          =   1,
    XB_eUSER_ACCESS_MODE_DEALER         =   2,
    XB_eUSER_ACCESS_MODE_OEM            =   3,
    XB_eUSER_ACCESS_MODE_MFG            =   4,
    XB_eUSER_ACCESS_MODE_RESERVED       = 253,
    XB_eUSER_ACCESS_MODE_OUT_OF_RANGE   = 254,
    XB_eUSER_ACCESS_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teUSER_ACCESS_MODE;

// Splash Screen Style
// Used in the following fields:
//   XB_tzPGN_UI_CFG.eSplashScrnStyl
typedef enum eSPLASH_SCRN_STYLE
{
    XB_eSPLASH_SCRN_STYLE_STILL         =   0,
    XB_eSPLASH_SCRN_STYLE_BOUNCE        =   1,
    XB_eSPLASH_SCRN_STYLE_MARQUEE_H     =   2,
    XB_eSPLASH_SCRN_STYLE_MARQUEE_V     =   3,
    XB_eSPLASH_SCRN_STYLE_RESERVED      = 253,
    XB_eSPLASH_SCRN_STYLE_OUT_OF_RANGE  = 254,
    XB_eSPLASH_SCRN_STYLE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teSPLASH_SCRN_STYLE;

// Image Depth
// Used in the following fields:
//   XB_tzPGN_UI_CFG_SPLASH_IMG.eImgDepth
typedef enum eIMAGE_DEPTH
{
    XB_eIMAGE_DEPTH_DEPTH1              =   1,
    XB_eIMAGE_DEPTH_DEPTH2              =   2,
    XB_eIMAGE_DEPTH_DEPTH3              =   3,
    XB_eIMAGE_DEPTH_DEPTH4              =   4,
    XB_eIMAGE_DEPTH_DEPTH8              =   8,
    XB_eIMAGE_DEPTH_DEPTH16             =  16,
    XB_eIMAGE_DEPTH_DEPTH24             =  24,
    XB_eIMAGE_DEPTH_DEPTH32             =  32
} XB_teIMAGE_DEPTH;

// Operating State, Batt Mon
// Used in the following fields:
//   XB_tzPGN_BATT_MON_STS.eOpState
typedef enum eOP_STATE_BATT_MON
{
    XB_eOP_STATE_BATT_MON_MONITORING    = 512
} XB_teOP_STATE_BATT_MON;

// Operating State, Charger
// Used in the following fields:
//   XB_tzPGN_CHG_STS.eOpState
typedef enum eOP_STATE_CHG
{
    XB_eOP_STATE_CHG_NOT_CHARGING       = 768,
    XB_eOP_STATE_CHG_BULK               = 769,
    XB_eOP_STATE_CHG_ABSORPTION         = 770,
    XB_eOP_STATE_CHG_OVERCHARGE         = 771,
    XB_eOP_STATE_CHG_EQUALIZE           = 772,
    XB_eOP_STATE_CHG_FLOAT              = 773,
    XB_eOP_STATE_CHG_NO_FLOAT           = 774,
    XB_eOP_STATE_CHG_CONSTANT_VI        = 775,
    XB_eOP_STATE_CHG_CHARGER_DISABLED   = 776,
    XB_eOP_STATE_CHG_QUALIFYING_AC      = 777,
    XB_eOP_STATE_CHG_QUALIFYING_APS     = 778,
    XB_eOP_STATE_CHG_ENGAGING_CHARGER   = 779,
    XB_eOP_STATE_CHG_CHARGE_FAULT       = 780,
    XB_eOP_STATE_CHG_CHARGER_SUSPEND    = 781,
    XB_eOP_STATE_CHG_AC_GOOD            = 782,
    XB_eOP_STATE_CHG_APS_GOOD           = 783,
    XB_eOP_STATE_CHG_AC_FAULT           = 784,
    XB_eOP_STATE_CHG_CHARGE             = 785
} XB_teOP_STATE_CHG;

// Operating State, User Interface
// Used in the following fields:
//   XB_tzPGN_UI_STS.eOpState
typedef enum eOP_STATE_UI
{
    XB_eOP_STATE_UI_SCREEN_SAVER        = 1280,
    XB_eOP_STATE_UI_ACTIVE              = 1281
} XB_teOP_STATE_UI;

// Display Unit
// Used in the following fields:
//   XB_tzPGN_UI_CFG_STS_DISP.eFieldUnits
typedef enum eDISP_UNIT
{
    XB_eDISP_UNIT_NONE                  =   0,
    XB_eDISP_UNIT_RIGHT                 =   1
} XB_teDISP_UNIT;

// Display Style
// Used in the following fields:
//   XB_tzPGN_UI_CFG_STS_DISP.eFieldStyle
typedef enum eDISP_STYLE
{
    XB_eDISP_STYLE_TEXT                 =   0,
    XB_eDISP_STYLE_ICON                 =   1,
    XB_eDISP_STYLE_BAR_GRAPH            =   2
} XB_teDISP_STYLE;

// Display Label
// Used in the following fields:
//   XB_tzPGN_UI_CFG_STS_DISP.eFieldLabel
typedef enum eDISP_LABEL
{
    XB_eDISP_LABEL_NONE                 =   0,
    XB_eDISP_LABEL_LEFT                 =   1,
    XB_eDISP_LABEL_RIGHT                =   2,
    XB_eDISP_LABEL_ABOVE                =   3,
    XB_eDISP_LABEL_BELOW                =   4
} XB_teDISP_LABEL;

// Status Display Identifier
// Used in the following fields:
//   XB_tzPGN_UI_CFG_STS_DISP.eStsDispId
typedef enum eSTS_DISP_ID
{
    XB_eSTS_DISP_ID_SYSTEM_HOME         =   0
} XB_teSTS_DISP_ID;

// Operating State, Loader
// Used in the following fields:
//   XB_tzPGN_FILE_DNLD_STS.eOpState
typedef enum eOP_STATE_LDR
{
    XB_eOP_STATE_LDR_WAIT_FILE_DL_INF   =   0,
    XB_eOP_STATE_LDR_WAIT_FILE_DL_BLK   =   1,
    XB_eOP_STATE_LDR_WRITING_BLK        =   2,
    XB_eOP_STATE_LDR_CHECKING_FILE      =   3,
    XB_eOP_STATE_LDR_WAIT_REBOOT        =   4,
    XB_eOP_STATE_LDR_ERASING_FLASH      =   5
} XB_teOP_STATE_LDR;

// Day Of The Week
// Used in the following fields:
//   XB_tzPGN_DATE_TIME_STS.eLocalDow
//   XB_tzPGN_DATE_TIME_CFG.eLocalDow
typedef enum eDOW
{
    XB_eDOW_SUNDAY                      =   0,
    XB_eDOW_MONDAY                      =   1,
    XB_eDOW_TUESDAY                     =   2,
    XB_eDOW_WEDNESDAY                   =   3,
    XB_eDOW_THURSDAY                    =   4,
    XB_eDOW_FRIDAY                      =   5,
    XB_eDOW_SATURDAY                    =   6,
    XB_eDOW_INVALID                     =   7
} XB_teDOW;

// Configuration Type
// Used in the following fields:
//   XB_tzPGN_UI_CFG_WARN_TXT.eCfgType
//   XB_tzPGN_AGS_CFG_AC_I.eCfgType
//   XB_tzPGN_AC_OUT_CFG_UV_RMS.eCfgType
//   XB_tzPGN_AGS_CFG_BATT_SOC.eCfgType
//   XB_tzPGN_UI_CFG_SPLASH_IMG.eCfgType
//   XB_tzPGN_UI_CFG_ASSOC_LBL.eCfgType
//   XB_tzPGN_AC_IN_CFG_OF.eCfgType
//   XB_tzPGN_DC_SRC_CFG_UV.eCfgType
//   XB_tzPGN_DC_SRC_CFG_OV.eCfgType
//   XB_tzPGN_DC_SRC_CFG_UI.eCfgType
//   XB_tzPGN_DC_SRC_CFG_OI.eCfgType
//   XB_tzPGN_DC_SRC_CFG_RIP_OV_PEAK.eCfgType
//   XB_tzPGN_AC_OUT_CFG.eCfgType
//   XB_tzPGN_AC_IN_CFG_UV_RMS.eCfgType
//   XB_tzPGN_AC_IN_CFG_UV_PEAK.eCfgType
//   XB_tzPGN_AC_IN_CFG_UV_AVG.eCfgType
//   XB_tzPGN_AC_IN_CFG_OV_RMS.eCfgType
//   XB_tzPGN_AC_IN_CFG_OV_PEAK.eCfgType
//   XB_tzPGN_AC_IN_CFG_OV_AVG.eCfgType
//   XB_tzPGN_APS_CFG_UV.eCfgType
//   XB_tzPGN_APS_CFG_OV.eCfgType
//   XB_tzPGN_OPS_CFG_UV.eCfgType
//   XB_tzPGN_OPS_CFG_OV.eCfgType
//   XB_tzPGN_HV_DC_BUS_CFG_UV.eCfgType
//   XB_tzPGN_HV_DC_BUS_CFG_OV.eCfgType
//   XB_tzPGN_EXT_TEMP_CFG_UT.eCfgType
//   XB_tzPGN_EXT_TEMP_CFG_OT.eCfgType
//   XB_tzPGN_INT_TEMP_CFG_UT.eCfgType
//   XB_tzPGN_INT_TEMP_CFG_OT.eCfgType
//   XB_tzPGN_CHG_CFG_BULK.eCfgType
//   XB_tzPGN_CHG_CFG_ABSORP.eCfgType
//   XB_tzPGN_CHG_CFG_OVERCHARGE.eCfgType
//   XB_tzPGN_CHG_CFG_FLOAT.eCfgType
//   XB_tzPGN_CHG_CFG_EQUALIZE.eCfgType
//   XB_tzPGN_CHG_CFG_CV_CI.eCfgType
//   XB_tzPGN_DC_SRC_CFG_BATT.eCfgType
//   XB_tzPGN_INV_CFG_LOAD_SENSE.eCfgType
//   XB_tzPGN_INV_CFG.eCfgType
//   XB_tzPGN_ASSOC_CFG.eCfgType
//   XB_tzPGN_AC_IN_CFG.eCfgType
//   XB_tzPGN_CHG_CFG_MULTIPLE_NODES.eCfgType
//   XB_tzPGN_BATT_MON_CFG.eCfgType
//   XB_tzPGN_AGS_CFG.eCfgType
//   XB_tzPGN_AGS_CFG_GEN.eCfgType
//   XB_tzPGN_PER_XMIT_CFG.eCfgType
//   XB_tzPGN_RX_TO_CFG.eCfgType
//   XB_tzPGN_EN_DIS_CFG.eCfgType
//   XB_tzPGN_AGS_CFG_CNTCT_CLS.eCfgType
//   XB_tzPGN_AC_IN_CFG_UF.eCfgType
//   XB_tzPGN_DATE_TIME_CFG.eCfgType
//   XB_tzPGN_UI_CFG_FAULT_TXT.eCfgType
//   XB_tzPGN_NAME_CFG.eCfgType
//   XB_tzPGN_AGS_CFG_DC_V.eCfgType
//   XB_tzPGN_UI_CFG.eCfgType
//   XB_tzPGN_UI_CFG_STS_DISP.eCfgType
//   XB_tzPGN_CHG_CFG.eCfgType
//   XB_tzPGN_AC_OUT_CFG_OV_RMS.eCfgType
//   XB_tzPGN_DC_SRC_CFG_PV_ARRAY.eCfgType
//   XB_tzPGN_UI_CFG_NODE_LBL.eCfgType
//   XB_tzPGN_CFG.eCfgType
//   XB_tzPGN_UI_CFG_WARN_BEHAVIOR.eCfgType
//   XB_tzPGN_UI_CFG_FAULT_BEHAVIOR.eCfgType
typedef enum eCFG_TYPE
{
    XB_eCFG_TYPE_USER                   =   0,
    XB_eCFG_TYPE_OEM                    =   1,
    XB_eCFG_TYPE_FACTORY                =   2,
    XB_eCFG_TYPE_RESERVED               =   3
} XB_teCFG_TYPE;

// Battery Chemistry
// Used in the following fields:
//   XB_tzPGN_DC_SRC_CFG_BATT.eBattChem
typedef enum eBATT_CHEM
{
    XB_eBATT_CHEM_INVALID               =   0,
    XB_eBATT_CHEM_LEAD_ACID             =   1,
    XB_eBATT_CHEM_LI_ION                =   2,
    XB_eBATT_CHEM_NI_CAD                =   3,
    XB_eBATT_CHEM_ZN_O                  =   4,
    XB_eBATT_CHEM_NI_MH                 =   5,
    XB_eBATT_CHEM_RESERVED              = 253,
    XB_eBATT_CHEM_OUT_OF_RANGE          = 254,
    XB_eBATT_CHEM_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teBATT_CHEM;

// Generator 'Off' Reason
// Used in the following fields:
//   XB_tzPGN_AGS_STS.eGenOffReason
typedef enum eGEN_OFF_REASON
{
    XB_eGEN_OFF_REASON_NOT_OFF          =   0,
    XB_eGEN_OFF_REASON_DC_VOLTAGE_HIGH  =   1,
    XB_eGEN_OFF_REASON_BATTERY_SOC_HIGH =   2,
    XB_eGEN_OFF_REASON_AC_CURRENT_LOW   =   3,
    XB_eGEN_OFF_REASON_CONTACT_OPENED   =   4,
    XB_eGEN_OFF_REASON_REACHED_ABSORPTION =   5,
    XB_eGEN_OFF_REASON_REACHED_FLOAT    =   6,
    XB_eGEN_OFF_REASON_MANUAL_OFF       =   7,
    XB_eGEN_OFF_REASON_MAX_RUN_TIME     =   8,
    XB_eGEN_OFF_REASON_MAX_AUTO_CYCLE   =   9,
    XB_eGEN_OFF_REASON_EXERCISE_DONE    =  10,
    XB_eGEN_OFF_REASON_QUIET_TIME       =  11,
    XB_eGEN_OFF_REASON_EXTERNAL_OFFVIA_AGS =  12,
    XB_eGEN_OFF_REASON_SAFE_MODE        =  13,
    XB_eGEN_OFF_REASON_EXTERNAL_OFFVIA_GENERATOR =  14,
    XB_eGEN_OFF_REASON_EXTERNAL_SHUTDOWN =  15,
    XB_eGEN_OFF_REASON_AUTO_OFF         =  16,
    XB_eGEN_OFF_REASON_FAULT            =  17,
    XB_eGEN_OFF_REASON_UNABLE_TO_START  =  18
} XB_teGEN_OFF_REASON;

// AC Waveforms
// Used in the following fields:
//   XB_tzPGN_AC_OUT_STS_RMS.eWaveform
//   XB_tzPGN_AC_OUT_STS_PEAK.eWaveform
//   XB_tzPGN_AC_OUT_STS_AVG.eWaveform
typedef enum eAC_WAVEFORMS
{
    XB_eAC_WAVEFORMS_INVALID            =   0,
    XB_eAC_WAVEFORMS_SINE_WAVE          =   1,
    XB_eAC_WAVEFORMS_MODIFIED_SINE_WAVE =   2,
    XB_eAC_WAVEFORMS_RESERVED           = 253,
    XB_eAC_WAVEFORMS_OUT_OF_RANGE       = 254,
    XB_eAC_WAVEFORMS_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teAC_WAVEFORMS;

// Contact Identifier
// Used in the following fields:
//   XB_tzPGN_DIAG_CNTCT_STS.eCntctId
//   XB_tzPGN_DIAG_CNTCT_CMD.eCntctId
typedef enum eCONTACT_ID
{
    XB_eCONTACT_ID_COOLDOWN_RELAY       =   0,
    XB_eCONTACT_ID_PREHEAT_RELAY        =   1,
    XB_eCONTACT_ID_START_RELAY          =   2,
    XB_eCONTACT_ID_RUN_STOP_RELAY       =   3,
    XB_eCONTACT_ID_ESCAPE_BUTTON        =   4,
    XB_eCONTACT_ID_ENTER_BUTTON         =   5,
    XB_eCONTACT_ID_SCROLL_BUTTON        =   6,
    XB_eCONTACT_ID_MENU_BUTTON          =   7,
    XB_eCONTACT_ID_SYSTEM_ON_BUTTON     =   8,
    XB_eCONTACT_ID_EXTERNAL_OFF         =   9,
    XB_eCONTACT_ID_EXTERNAL_ON          =  10,
    XB_eCONTACT_ID_THERMOSTAT1          =  11,
    XB_eCONTACT_ID_THERMOSTAT2          =  12,
    XB_eCONTACT_ID_B_PLUS_SENSE         =  13,
    XB_eCONTACT_ID_UP_ARROW_BUTTON      =  14,
    XB_eCONTACT_ID_DOWN_ARROW_BUTTON    =  15,
    XB_eCONTACT_ID_EXIT_BUTTON          =  16,
    XB_eCONTACT_ID_AGS_EXTERNAL_SHUTDOWN =  17,
    XB_eCONTACT_ID_RESET_BUTTON         =  18,
    XB_eCONTACT_ID_INVERT_ENABLE_BUTTON =  19,
    XB_eCONTACT_ID_CHARGE_ENABLE_BUTTON =  20,
    XB_eCONTACT_ID_TRANSFER_RELAY       =  21,
    XB_eCONTACT_ID_TRIAC_RELAY          =  22,
    XB_eCONTACT_ID_DC_UNDER_VOLTAGE_RELAY =  23,
    XB_eCONTACT_ID_NETWORK_POWER_SUPPLY_ENABLE =  24,
    XB_eCONTACT_ID_AUXILIARY_POWER_SUPPLY_ENABLE =  25,
    XB_eCONTACT_ID_TRIAC                =  26,
    XB_eCONTACT_ID_DCDC_STAGE_ENABLE    =  27,
    XB_eCONTACT_ID_INVERT_STAGE_ENABLE  =  28,
    XB_eCONTACT_ID_OUTPUT_RELAY_ENABLE  =  29
} XB_teCONTACT_ID;

// Indicator Identifier
// Used in the following fields:
//   XB_tzPGN_DIAG_INDIC_CMD.eIndicId
typedef enum eINDICATOR_ID
{
    XB_eINDICATOR_ID_FAULT              =   0,
    XB_eINDICATOR_ID_NETWORK_ACTIVITY   =   1,
    XB_eINDICATOR_ID_GENERATOR_ON       =   2,
    XB_eINDICATOR_ID_POWER_ON           =   3,
    XB_eINDICATOR_ID_EXTERNAL_ACTION    =   4,
    XB_eINDICATOR_ID_CHARGING           =   5,
    XB_eINDICATOR_ID_INVERTING          =   6,
    XB_eINDICATOR_ID_AC_IN              =   7,
    XB_eINDICATOR_ID_BUZZER             =   8,
    XB_eINDICATOR_ID_AGS_EXTERNAL_ON    =   9,
    XB_eINDICATOR_ID_BACKLIGHT          =  10,
    XB_eINDICATOR_ID_LOW_BATTERY        =  11,
    XB_eINDICATOR_ID_CHARGE_ENABLE      =  12,
    XB_eINDICATOR_ID_INVERT_ENABLE      =  13,
    XB_eINDICATOR_ID_BULK               =  14,
    XB_eINDICATOR_ID_ABSORPTION         =  15,
    XB_eINDICATOR_ID_FLOAT              =  16,
    XB_eINDICATOR_ID_EQUALIZE           =  17
} XB_teINDICATOR_ID;

// Fan Identifier
// Used in the following fields:
//   XB_tzPGN_DIAG_FAN_CMD.eFanId
typedef enum eFAN_ID
{
    XB_eFAN_ID_MAIN                     =   0,
    XB_eFAN_ID_AUXILIARY                =   1
} XB_teFAN_ID;

// Battery Temperature - No Sensor Options
// Used in the following fields:
//   XB_tzPGN_CHG_CFG.eBattTempNoSensor
typedef enum eBATT_TEMP_NO_SENS_OPTIONS
{
    XB_eBATT_TEMP_NO_SENS_OPTIONS_COLD  =   0,
    XB_eBATT_TEMP_NO_SENS_OPTIONS_WARM  =   1,
    XB_eBATT_TEMP_NO_SENS_OPTIONS_HOT   =   2
} XB_teBATT_TEMP_NO_SENS_OPTIONS;

// External Temperature Sensor Identifiers
// Used in the following fields:
//   XB_tzPGN_CHG_STATS_EXT_TEMP.eTempSensId
//   XB_tzPGN_DC_SRC_STS.eTempSensId
//   XB_tzPGN_EXT_TEMP_STS.eTempSensId
//   XB_tzPGN_EXT_TEMP_CFG_UT.eTempSensId
//   XB_tzPGN_EXT_TEMP_CFG_OT.eTempSensId
//   XB_tzPGN_INV_STATS_EXT_TEMP.eTempSensId
typedef enum eEXT_TEMP_SENS_IDS
{
    XB_eEXT_TEMP_SENS_IDS_BATTERY1      =   0,
    XB_eEXT_TEMP_SENS_IDS_BATTERY2      =   1,
    XB_eEXT_TEMP_SENS_IDS_BATTERY3      =   2,
    XB_eEXT_TEMP_SENS_IDS_BATTERY4      =   3,
    XB_eEXT_TEMP_SENS_IDS_BATTERY5      =   4,
    XB_eEXT_TEMP_SENS_IDS_BATTERY6      =   5,
    XB_eEXT_TEMP_SENS_IDS_AMBIENT1      =  10,
    XB_eEXT_TEMP_SENS_IDS_AMBIENT2      =  11,
    XB_eEXT_TEMP_SENS_IDS_AMBIENT3      =  12,
    XB_eEXT_TEMP_SENS_IDS_AMBIENT4      =  13,
    XB_eEXT_TEMP_SENS_IDS_SHUNT1        =  14,
    XB_eEXT_TEMP_SENS_IDS_SHUNT2        =  15,
    XB_eEXT_TEMP_SENS_IDS_SHUNT3        =  16,
    XB_eEXT_TEMP_SENS_IDS_SHUNT4        =  17,
    XB_eEXT_TEMP_SENS_IDS_RESERVED      = 253,
    XB_eEXT_TEMP_SENS_IDS_OUTOF_RANGE   = 254,
    XB_eEXT_TEMP_SENS_IDS_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teEXT_TEMP_SENS_IDS;

// Internal Temperature Sensor Identifiers
// Used in the following fields:
//   XB_tzPGN_INV_STATS_INT_TEMP.eTempSensId
//   XB_tzPGN_CHG_STATS_INT_TEMP.eTempSensId
//   XB_tzPGN_INT_TEMP_STS.eTempSensId
//   XB_tzPGN_INT_TEMP_CFG_UT.eTempSensId
//   XB_tzPGN_INT_TEMP_CFG_OT.eTempSensId
typedef enum eINT_TEMP_SENS_IDS
{
    XB_eINT_TEMP_SENS_IDS_TRANSISTOR1   =   0,
    XB_eINT_TEMP_SENS_IDS_TRANSISTOR2   =   1,
    XB_eINT_TEMP_SENS_IDS_TRANSISTOR3   =   2,
    XB_eINT_TEMP_SENS_IDS_TRANSISTOR4   =   3,
    XB_eINT_TEMP_SENS_IDS_CAPACITOR1    =  10,
    XB_eINT_TEMP_SENS_IDS_CAPACITOR2    =  11,
    XB_eINT_TEMP_SENS_IDS_CAPACITOR3    =  12,
    XB_eINT_TEMP_SENS_IDS_CAPACITOR4    =  13,
    XB_eINT_TEMP_SENS_IDS_TRANSFORMER1  =  20,
    XB_eINT_TEMP_SENS_IDS_TRANSFORMER2  =  21,
    XB_eINT_TEMP_SENS_IDS_TRANSFORMER3  =  22,
    XB_eINT_TEMP_SENS_IDS_TRANSFORMER4  =  23,
    XB_eINT_TEMP_SENS_IDS_AMBIENT1      =  30,
    XB_eINT_TEMP_SENS_IDS_AMBIENT2      =  31,
    XB_eINT_TEMP_SENS_IDS_AMBIENT3      =  32,
    XB_eINT_TEMP_SENS_IDS_AMBIENT4      =  33,
    XB_eINT_TEMP_SENS_IDS_SHUNT1        =  34,
    XB_eINT_TEMP_SENS_IDS_SHUNT2        =  35,
    XB_eINT_TEMP_SENS_IDS_SHUNT3        =  36,
    XB_eINT_TEMP_SENS_IDS_SHUNT4        =  37,
    XB_eINT_TEMP_SENS_IDS_RESERVED      = 253,
    XB_eINT_TEMP_SENS_IDS_OUTOF_RANGE   = 254,
    XB_eINT_TEMP_SENS_IDS_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teINT_TEMP_SENS_IDS;

// Manufacturing Step
// Used in the following fields:
//   XB_tzPGN_DIAG_MFG_CFG.eMfgStep
typedef enum eMFG_STEP
{
    XB_eMFG_STEP_BOARD_TEST             =   0,
    XB_eMFG_STEP_SOAK_TEST              =   1,
    XB_eMFG_STEP_FINAL_TEST             =   2,
    XB_eMFG_STEP_RESERVED               = 253,
    XB_eMFG_STEP_OUT_OF_RANGE           = 254,
    XB_eMFG_STEP_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teMFG_STEP;

// Generator Output Type
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_GEN.eGenOutType
typedef enum eGEN_OUT_TYPE
{
    XB_eGEN_OUT_TYPE_AC_OUTPUT          =   0,
    XB_eGEN_OUT_TYPE_DC_OUTPUT          =   1,
    XB_eGEN_OUT_TYPE_RESERVED           = 253,
    XB_eGEN_OUT_TYPE_OUT_OF_RANGE       = 254,
    XB_eGEN_OUT_TYPE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teGEN_OUT_TYPE;

// Transfer Switch Mode
// Used in the following fields:
//   XB_tzPGN_INV_CFG.eXferSwMode
typedef enum eXFR_SWITCH_MODE
{
    XB_eXFR_SWITCH_MODE_PASSTHRU        =   0,
    XB_eXFR_SWITCH_MODE_INVERT          =   1,
    XB_eXFR_SWITCH_MODE_AUTOMATIC       =   2,
    XB_eXFR_SWITCH_MODE_RESERVED        = 253,
    XB_eXFR_SWITCH_MODE_OUT_OF_RANGE    = 254,
    XB_eXFR_SWITCH_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teXFR_SWITCH_MODE;

// Measurement Unit
// Used in the following fields:
//   XB_tzPGN_UI_CFG.eMeasUnit
typedef enum eMEASUREMENT_UNIT
{
    XB_eMEASUREMENT_UNIT_IMPERIAL       =   0,
    XB_eMEASUREMENT_UNIT_STANDARD       =   1,
    XB_eMEASUREMENT_UNIT_METRIC         =   2,
    XB_eMEASUREMENT_UNIT_RESERVED       = 253,
    XB_eMEASUREMENT_UNIT_OUT_OF_RANGE   = 254,
    XB_eMEASUREMENT_UNIT_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teMEASUREMENT_UNIT;

// Relay Identifier
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_GEN.eRelayId
typedef enum eRELAY_ID
{
    XB_eRELAY_ID_RELAY1                 =   1,
    XB_eRELAY_ID_RELAY2                 =   2,
    XB_eRELAY_ID_RELAY3                 =   3,
    XB_eRELAY_ID_RELAY4                 =   4,
    XB_eRELAY_ID_RELAY5                 =   5,
    XB_eRELAY_ID_RESERVED               = 253,
    XB_eRELAY_ID_OUT_OF_RANGE           = 254,
    XB_eRELAY_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teRELAY_ID;

// Relay Function
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_GEN.eRelayFunc
typedef enum eRELAY_FUNC
{
    XB_eRELAY_FUNC_NOT_USED             =   0,
    XB_eRELAY_FUNC_RUN                  =   1,
    XB_eRELAY_FUNC_GLOWAND_STOP         =   2,
    XB_eRELAY_FUNC_GLOWAND_STOPWITH_SHUTDOWN_BYPASS =   3,
    XB_eRELAY_FUNC_CRANK                =   4,
    XB_eRELAY_FUNC_PREHEAT              =   5,
    XB_eRELAY_FUNC_WARM_UPAND_COOL_DOWN =   6,
    XB_eRELAY_FUNC_STARTAND_STOP        =   7,
    XB_eRELAY_FUNC_PREHEATWITH_SHUTDOWN_BYPASS =   8,
    XB_eRELAY_FUNC_RESERVED             = 253,
    XB_eRELAY_FUNC_OUT_OF_RANGE         = 254,
    XB_eRELAY_FUNC_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teRELAY_FUNC;

// Fault Type
// Used in the following fields:
//   XB_tzPGN_FAULT_LOG_STS.eFaultType
//   XB_tzPGN_ACTIVE_FAULTS_STS.eFaultType
//   XB_tzPGN_UI_CFG_FAULT_TXT.eFaultType
typedef enum eFLT_TYPE
{
    XB_eFLT_TYPE_AUTO_RESET_ESCALATING_FAULT =   0,
    XB_eFLT_TYPE_AUTO_RESET_NON_ESCALATING_FAULT =   1,
    XB_eFLT_TYPE_MANUAL_FAULT           =   2,
    XB_eFLT_TYPE_RESERVED               =   5,
    XB_eFLT_TYPE_OUT_OF_RANGE           =   6,
    XB_eFLT_TYPE_NO_CHANGE_DATA_NA      =   7
} XB_teFLT_TYPE;

// Warning Type
// Used in the following fields:
//   XB_tzPGN_UI_CFG_WARN_TXT.eWarnType
//   XB_tzPGN_WARN_LOG_STS.eWarnType
//   XB_tzPGN_ACTIVE_WARNS_STS.eWarnType
typedef enum eWRN_TYPE
{
    XB_eWRN_TYPE_AUTO_RESET_WARNING     =   0,
    XB_eWRN_TYPE_MANUAL_WARNING         =   1,
    XB_eWRN_TYPE_RESERVED               =   5,
    XB_eWRN_TYPE_OUT_OF_RANGE           =   6,
    XB_eWRN_TYPE_NO_CHANGE_DATA_NA      =   7
} XB_teWRN_TYPE;

// Time Format
// Used in the following fields:
//   XB_tzPGN_UI_CFG.eTimeFmt
typedef enum eTIME_FORMAT
{
    XB_eTIME_FORMAT_AMPM                =   0,
    XB_eTIME_FORMAT_24HOUR              =   1,
    XB_eTIME_FORMAT_RESERVED            = 253,
    XB_eTIME_FORMAT_OUT_OF_RANGE        = 254,
    XB_eTIME_FORMAT_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teTIME_FORMAT;

// Generator Interface Type
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_GEN.eGenIntfType
typedef enum eGEN_INTERFACE_TYPE
{
    XB_eGEN_INTERFACE_TYPE_DEFAULT      =   0,
    XB_eGEN_INTERFACE_TYPE_ONAN         =   1,
    XB_eGEN_INTERFACE_TYPE_NORTHERN_LIGHTS =   2,
    XB_eGEN_INTERFACE_TYPE_GUARDIAN_GENERAC_GASOLINE =   3,
    XB_eGEN_INTERFACE_TYPE_GUARDIAN_GENERAC_DIESEL =   4,
    XB_eGEN_INTERFACE_TYPE_YAMAHA       =   5,
    XB_eGEN_INTERFACE_TYPE_GENERACBACKUP_RENEWABLE =   6,
    XB_eGEN_INTERFACE_TYPE_GLOW_STOP_WITH_SHUTDOWN_BYPASS =   7,
    XB_eGEN_INTERFACE_TYPE_WESTERBEKE   =   8,
    XB_eGEN_INTERFACE_TYPE_START_STOP   =   9,
    XB_eGEN_INTERFACE_TYPE_RESERVED     = 253,
    XB_eGEN_INTERFACE_TYPE_OUTOF_RANGE  = 254,
    XB_eGEN_INTERFACE_TYPE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teGEN_INTERFACE_TYPE;

// Generator State
// Used in the following fields:
//   XB_tzPGN_AGS_STS.eGenState
typedef enum eGEN_STATE
{
    XB_eGEN_STATE_PREHEATING            =   0,
    XB_eGEN_STATE_START_DELAY           =   1,
    XB_eGEN_STATE_CRANKING              =   2,
    XB_eGEN_STATE_STARTER_COOLING       =   3,
    XB_eGEN_STATE_WARMING_UP            =   4,
    XB_eGEN_STATE_COOLING_DOWN          =   5,
    XB_eGEN_STATE_SPINNING_DOWN         =   6,
    XB_eGEN_STATE_SHUTDOWN_BYPASS       =   7,
    XB_eGEN_STATE_STOPPING              =   8,
    XB_eGEN_STATE_RUNNING               =   9,
    XB_eGEN_STATE_STOPPED               =  10,
    XB_eGEN_STATE_RESERVED              = 253,
    XB_eGEN_STATE_OUT_OF_RANGE          = 254,
    XB_eGEN_STATE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teGEN_STATE;

// Behavior
// Used in the following fields:
//   XB_tzPGN_UI_CFG_WARN_BEHAVIOR.eWarnBehavior
//   XB_tzPGN_UI_CFG_FAULT_BEHAVIOR.eFaultBehavior
typedef enum eBEHAVIOR
{
    XB_eBEHAVIOR_IGNORE                 =   0,
    XB_eBEHAVIOR_VISUAL_ALERT           =   1,
    XB_eBEHAVIOR_AUDIO_VISUAL_ALERT     =   2,
    XB_eBEHAVIOR_RESERVED               =   5,
    XB_eBEHAVIOR_OUT_OF_RANGE           =   6,
    XB_eBEHAVIOR_DO_NOT_CHANGE_DATA_NOT_AVAILABLE =   7
} XB_teBEHAVIOR;


/************************************************************************************ 
    The structures for each PGN
************************************************************************************/

// ISO Acknowledgment
typedef struct zPGN_ISO_ACK
{
    XB_teACK_STS teCtrlByte;        // Control Byte
    XB_teGRP_FUNC_VALUE teGroupFunctionValue; // Group Function Value
    uint32 ulParmGrpNum;            // PGN of Requested Information
} XB_tzPGN_ISO_ACK;

// ISO Request
typedef struct zPGN_ISO_REQ
{
    uint32 ulParmGrpNum;            // PGN being requested
} XB_tzPGN_ISO_REQ;

// ISO Transport Protocol, Data Transfer
typedef struct zPGN_ISO_TP_XFER
{
    uchar8 ucSeqNumMultiPacketFrame; // Sequence number of multi-packet frame
    uchar8 aucMultiPacketPacketizedData[ 7 ]; // Multi-packet packetized data
} XB_tzPGN_ISO_TP_XFER;

// ISO Transport Protocol, Connection Management - RTS
typedef struct zPGN_ISO_TP_CONN_MAN_RTS
{
    uchar8 ucRtsGroupFunctionCode;  // RTS Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesXmit;    // Total number of frames to be transmitted
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} XB_tzPGN_ISO_TP_CONN_MAN_RTS;

// ISO Transport Protocol, Connection Management - CTS
typedef struct zPGN_ISO_TP_CONN_MAN_CTS
{
    uchar8 ucCtsGroupFunctionCode;  // CTS Group Function Code
    uchar8 ucNumFramesThatCanBeSent; // Number of frames that can be sent
    uchar8 ucNumNextFrameToBeSent;  // Number of next frame to be sent
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} XB_tzPGN_ISO_TP_CONN_MAN_CTS;

// ISO Transport Protocol, Connection Management - EOM
typedef struct zPGN_ISO_TP_CONN_MAN_EOM
{
    uchar8 ucEomGroupFunctionCode;  // EOM Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesRxed;    // Total number of frames received
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} XB_tzPGN_ISO_TP_CONN_MAN_EOM;

// ISO Transport Protocol, Connection Management - BAM
typedef struct zPGN_ISO_TP_CONN_MAN_BAM
{
    uchar8 ucBamGroupFunctionCode;  // BAM Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesToBeSent; // Total number of frames to be sent
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} XB_tzPGN_ISO_TP_CONN_MAN_BAM;

// ISO Transport Protocol, Connection Management - Abort
typedef struct zPGN_ISO_TP_CONN_MAN_ABORT
{
    uchar8 ucAbortGroupFunctionCode; // Abort Group Function Code
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} XB_tzPGN_ISO_TP_CONN_MAN_ABORT;

// ISO Address Claim
typedef struct zPGN_ISO_ADDR_CLAIM
{
    uint32 ulUniqueNumber;          // Unique Number (ISO Identity Number)
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    uchar8 ucRsvBit;                // Reserved Bit
    XB_teDEV_CLASS teDeviceClass;   // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    XB_teINDUSTRY_GRP teIndustryGroup; // Industry Group
    uchar8 ucSelfCfgAddr;           // ISO Self Configurable Address
} XB_tzPGN_ISO_ADDR_CLAIM;

// HWH Leveling Jack Status
typedef struct zPGN_HWH_LVL_JACK_STS
{
    uchar8 ucNumJacks;              // Number of Jacks
    XB_teGENERIC_STSPAIR teLfJackWarnSw; // Left Front Jack Warning Switch
    XB_teGENERIC_STSPAIR teRfJackWarnSw; // Right Front Jack Warning Switch
    XB_teGENERIC_STSPAIR teRrJackWarnSw; // Right Rear Jack Warning Switch
    XB_teGENERIC_STSPAIR teLrJackWarnSw; // Left Rear Jack Warning Switch
    XB_teGENERIC_STSPAIR teAux1JackWarnSw; // Auxliliary 1 Jack Warning Switch
    XB_teGENERIC_STSPAIR teAux2JackWarnSw; // Auxliliary 2 Jack Warning Switch
    XB_teGENERIC_STSPAIR teLfJackPressSw; // Left Front Jack Pressure Switch
    XB_teGENERIC_STSPAIR teRfJackPressSw; // Right Front Jack Pressure Switch
    XB_teGENERIC_STSPAIR teRrJackPressSw; // Right Rear Jack Pressure Switch
    XB_teGENERIC_STSPAIR teLrJackPressSw; // Left Rear Jack Pressure Switch
    XB_teGENERIC_STSPAIR teAux1JackPressSw; // Auxliliary 1 Jack Pressure Switch
    XB_teGENERIC_STSPAIR teAux2JackPressSw; // Auxliliary 2 Jack Pressure Switch
} XB_tzPGN_HWH_LVL_JACK_STS;

// HWH Leveling Sensor Status
typedef struct zPGN_HWH_LVL_SENS_STS
{
    XB_teGENERIC_STSPAIR teLeftBelowLvl; // Left (Driver's Side) Below Level
    XB_teGENERIC_STSPAIR teFrontBelowLvl; // Front Below Level
    XB_teGENERIC_STSPAIR teRightBelowLvl; // Right (Passenger's Side) Below Level
    XB_teGENERIC_STSPAIR teRearBelowLvl; // Rear Below Level
} XB_tzPGN_HWH_LVL_SENS_STS;

// ISO Commanded Address
typedef struct zPGN_ISO_CMD_ADDR
{
    uint32 ulUniqueNumber;          // Unique Number (ISO Identity Number)
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    uchar8 ucRsvBit;                // Reserved Bit
    XB_teDEV_CLASS teDeviceClass;   // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    XB_teINDUSTRY_GRP teIndustryGroup; // Industry Group
    uchar8 ucSelfCfgAddr;           // ISO Self Configurable Address
    uchar8 ucPrefSrcAddr;           // Preferred Source Address
} XB_tzPGN_ISO_CMD_ADDR;

// HWH Unknown FFF3
typedef struct zPGN_HWH_UNKNOWN_FFF3
{
    uchar8 ucUnknown1;              // Unknow 1
} XB_tzPGN_HWH_UNKNOWN_FFF3;

// HWH Unknown FFFA
typedef struct zPGN_HWH_UNKNOWN_FFFA
{
    uchar8 ucUnknown1;              // Unknown 1
} XB_tzPGN_HWH_UNKNOWN_FFFA;

// DC Source Configuration - Under Voltage
typedef struct zPGN_EXTRA_DC_SRC_CFG_UV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulUvLvl;                 // Under Voltage Level
    uint32 ulUvLvlMin;              // Under Voltage Level - Minimum
    uint32 ulUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_DC_SRC_CFG_UV;

typedef struct zPGN_DC_SRC_CFG_UV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DC_SRC_CFG_UV *ptzExtra;   // Extra structures
} XB_tzPGN_DC_SRC_CFG_UV;

// DC Source Configuration - Over Voltage
typedef struct zPGN_EXTRA_DC_SRC_CFG_OV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulOvLvl;                 // Over Voltage Level
    uint32 ulOvLvlMin;              // Over Voltage Level - Minimum
    uint32 ulOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_DC_SRC_CFG_OV;

typedef struct zPGN_DC_SRC_CFG_OV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DC_SRC_CFG_OV *ptzExtra;   // Extra structures
} XB_tzPGN_DC_SRC_CFG_OV;

// DC Source Configuration - Under Current
typedef struct zPGN_EXTRA_DC_SRC_CFG_UI
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    sint32 slUiLvl;                 // Under Current Level
    sint32 slUiLvlMin;              // Under Current Level - Minimum
    sint32 slUiLvlMax;              // Under Current Level - Maximum
    uint16 uiUiIntvl;               // Under Current Interval
    uint16 uiUiIntvlMin;            // Under Current Interval - Minimum
    uint16 uiUiIntvlMax;            // Under Current Interval - Maximum
} XB_tzPGN_EXTRA_DC_SRC_CFG_UI;

typedef struct zPGN_DC_SRC_CFG_UI
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DC_SRC_CFG_UI *ptzExtra;   // Extra structures
} XB_tzPGN_DC_SRC_CFG_UI;

// DC Source Configuration - Over Current
typedef struct zPGN_EXTRA_DC_SRC_CFG_OI
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    sint32 slOiLvl;                 // Over Current Level
    sint32 slOiLvlMin;              // Over Current Level - Minimum
    sint32 slOiLvlMax;              // Over Current Level - Maximum
    uint16 uiOiIntvl;               // Over Current Interval
    uint16 uiOiIntvlMin;            // Over Current Interval - Minimum
    uint16 uiOiIntvlMax;            // Over Current Interval - Maximum
} XB_tzPGN_EXTRA_DC_SRC_CFG_OI;

typedef struct zPGN_DC_SRC_CFG_OI
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DC_SRC_CFG_OI *ptzExtra;   // Extra structures
} XB_tzPGN_DC_SRC_CFG_OI;

// DC Source Configuration - Over Ripple Voltage - Peak
typedef struct zPGN_EXTRA_DC_SRC_CFG_RIP_OV_PEAK
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulPeakRipOvLvl;          // Peak Ripple Over Voltage Level
    uint32 ulPeakRipOvLvlMin;       // Peak Ripple Over Voltage Level - Minimum
    uint32 ulPeakRipOvLvlMax;       // Peak Ripple Over Voltage Level - Maximum
    uint16 uiPeakRipOvIntvl;        // Peak Ripple Over Voltage Interval
    uint16 uiPeakRipOvIntvlMin;     // Peak Ripple Over Voltage Interval - Minimum
    uint16 uiPeakRipOvIntvlMax;     // Peak Ripple Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_DC_SRC_CFG_RIP_OV_PEAK;

typedef struct zPGN_DC_SRC_CFG_RIP_OV_PEAK
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DC_SRC_CFG_RIP_OV_PEAK *ptzExtra;   // Extra structures
} XB_tzPGN_DC_SRC_CFG_RIP_OV_PEAK;

// AC Output Configuration
typedef struct zPGN_AC_OUT_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint32 ulVoltage;               // Voltage
    uint32 ulVoltageMin;            // Voltage - Minimum
    uint32 ulVoltageMax;            // Voltage - Maximum
    uint16 uiBreakerSz;             // Breaker Size
    uint16 uiBreakerSzMin;          // Breaker Size - Minimum
    uint16 uiBreakerSzMax;          // Breaker Size - Maximum
    uint16 uiFreq;                  // Frequency
    uint16 uiFreqMin;               // Frequency - Minimum
    uint16 uiFreqMax;               // Frequency - Maximum
    uint32 ulRealPwr;               // Real Power
    uint32 ulRealPwrMin;            // Real Power - Minimum
    uint32 ulRealPwrMax;            // Real Power - Maximum
} XB_tzPGN_AC_OUT_CFG;

// AC Input Configuration - Under Voltage - RMS
typedef struct zPGN_EXTRA_AC_IN_CFG_UV_RMS
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulUvLvl;                 // Under Voltage Level
    uint32 ulUvLvlMin;              // Under Voltage Level - Minimum
    uint32 ulUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_UV_RMS;

typedef struct zPGN_AC_IN_CFG_UV_RMS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_UV_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_UV_RMS;

// AC Input Configuration - Under Voltage - Peak
typedef struct zPGN_EXTRA_AC_IN_CFG_UV_PEAK
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulUvLvl;                 // Under Voltage Level
    uint32 ulUvLvlMin;              // Under Voltage Level - Minimum
    uint32 ulUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_UV_PEAK;

typedef struct zPGN_AC_IN_CFG_UV_PEAK
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_UV_PEAK *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_UV_PEAK;

// AC Input Configuration - Under Voltage - Average
typedef struct zPGN_EXTRA_AC_IN_CFG_UV_AVG
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulUvLvl;                 // Under Voltage Level
    uint32 ulUvLvlMin;              // Under Voltage Level - Minimum
    uint32 ulUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_UV_AVG;

typedef struct zPGN_AC_IN_CFG_UV_AVG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_UV_AVG *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_UV_AVG;

// AC Input Configuration - Over Voltage - RMS
typedef struct zPGN_EXTRA_AC_IN_CFG_OV_RMS
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulOvLvl;                 // Over Voltage Level
    uint32 ulOvLvlMin;              // Over Voltage Level - Minimum
    uint32 ulOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_OV_RMS;

typedef struct zPGN_AC_IN_CFG_OV_RMS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_OV_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_OV_RMS;

// AC Input Configuration - Over Voltage - Peak
typedef struct zPGN_EXTRA_AC_IN_CFG_OV_PEAK
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulOvLvl;                 // Over Voltage Level
    uint32 ulOvLvlMin;              // Over Voltage Level - Minimum
    uint32 ulOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_OV_PEAK;

typedef struct zPGN_AC_IN_CFG_OV_PEAK
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_OV_PEAK *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_OV_PEAK;

// AC Input Configuration - Over Voltage - Average
typedef struct zPGN_EXTRA_AC_IN_CFG_OV_AVG
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulOvLvl;                 // Over Voltage Level
    uint32 ulOvLvlMin;              // Over Voltage Level - Minimum
    uint32 ulOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_OV_AVG;

typedef struct zPGN_AC_IN_CFG_OV_AVG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_OV_AVG *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_OV_AVG;

// Auxiliary Power Supply Configuration - Under Voltage
typedef struct zPGN_EXTRA_APS_CFG_UV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_APS_CFG_UV;

typedef struct zPGN_APS_CFG_UV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_APS_CFG_UV *ptzExtra;   // Extra structures
} XB_tzPGN_APS_CFG_UV;

// Auxiliary Power Supply Configuration - Over Voltage
typedef struct zPGN_EXTRA_APS_CFG_OV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_APS_CFG_OV;

typedef struct zPGN_APS_CFG_OV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_APS_CFG_OV *ptzExtra;   // Extra structures
} XB_tzPGN_APS_CFG_OV;

// Offline Power Supply Configuration - Under Voltage
typedef struct zPGN_EXTRA_OPS_CFG_UV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_OPS_CFG_UV;

typedef struct zPGN_OPS_CFG_UV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_OPS_CFG_UV *ptzExtra;   // Extra structures
} XB_tzPGN_OPS_CFG_UV;

// Offline Power Supply Configuration - Over Voltage
typedef struct zPGN_EXTRA_OPS_CFG_OV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_OPS_CFG_OV;

typedef struct zPGN_OPS_CFG_OV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_OPS_CFG_OV *ptzExtra;   // Extra structures
} XB_tzPGN_OPS_CFG_OV;

// High Voltage DC Bus Configuration - Under Voltage
typedef struct zPGN_EXTRA_HV_DC_BUS_CFG_UV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_HV_DC_BUS_CFG_UV;

typedef struct zPGN_HV_DC_BUS_CFG_UV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_HV_DC_BUS_CFG_UV *ptzExtra;   // Extra structures
} XB_tzPGN_HV_DC_BUS_CFG_UV;

// High Voltage DC Bus Configuration - Over Voltage
typedef struct zPGN_EXTRA_HV_DC_BUS_CFG_OV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_HV_DC_BUS_CFG_OV;

typedef struct zPGN_HV_DC_BUS_CFG_OV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_HV_DC_BUS_CFG_OV *ptzExtra;   // Extra structures
} XB_tzPGN_HV_DC_BUS_CFG_OV;

// External Temperature Configuration - Under Temp
typedef struct zPGN_EXTRA_EXT_TEMP_CFG_UT
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint16 uiUtLvl;                 // Under Temperature Level
    uint16 uiUtLvlMin;              // Under Temperature Level - Minimum
    uint16 uiUtLvlMax;              // Under Temperature Level - Maximum
    uint16 uiUtIntvl;               // Under Temperature Interval
    uint16 uiUtIntvlMin;            // Under Temperature Interval - Minimum
    uint16 uiUtIntvlMax;            // Under Temperature Interval - Maximum
} XB_tzPGN_EXTRA_EXT_TEMP_CFG_UT;

typedef struct zPGN_EXT_TEMP_CFG_UT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teEXT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_EXT_TEMP_CFG_UT *ptzExtra;   // Extra structures
} XB_tzPGN_EXT_TEMP_CFG_UT;

// External Temperature Configuration - Over Temp
typedef struct zPGN_EXTRA_EXT_TEMP_CFG_OT
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint16 uiOtLvl;                 // Over Temperature Level
    uint16 uiOtLvlMin;              // Over Temperature Level - Minimum
    uint16 uiOtLvlMax;              // Over Temperature Level - Maximum
    uint16 uiOtIntvl;               // Over Temperature Interval
    uint16 uiOtIntvlMin;            // Over Temperature Interval - Minimum
    uint16 uiOtIntvlMax;            // Over Temperature Interval - Maximum
} XB_tzPGN_EXTRA_EXT_TEMP_CFG_OT;

typedef struct zPGN_EXT_TEMP_CFG_OT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teEXT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_EXT_TEMP_CFG_OT *ptzExtra;   // Extra structures
} XB_tzPGN_EXT_TEMP_CFG_OT;

// Internal Temperature Configuration - Under Temp
typedef struct zPGN_EXTRA_INT_TEMP_CFG_UT
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint16 uiUtLvl;                 // Under Temperature Level
    uint16 uiUtLvlMin;              // Under Temperature Level - Minimum
    uint16 uiUtLvlMax;              // Under Temperature Level - Maximum
    uint16 uiUtIntvl;               // Under Temperature Interval
    uint16 uiUtIntvlMin;            // Under Temperature Interval - Minimum
    uint16 uiUtIntvlMax;            // Under Temperature Interval - Maximum
} XB_tzPGN_EXTRA_INT_TEMP_CFG_UT;

typedef struct zPGN_INT_TEMP_CFG_UT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teINT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INT_TEMP_CFG_UT *ptzExtra;   // Extra structures
} XB_tzPGN_INT_TEMP_CFG_UT;

// Internal Temperature Configuration - Over Temp
typedef struct zPGN_EXTRA_INT_TEMP_CFG_OT
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint16 uiOtLvl;                 // Over Temperature Level
    uint16 uiOtLvlMin;              // Over Temperature Level - Minimum
    uint16 uiOtLvlMax;              // Over Temperature Level - Maximum
    uint16 uiOtIntvl;               // Over Temperature Interval
    uint16 uiOtIntvlMin;            // Over Temperature Interval - Minimum
    uint16 uiOtIntvlMax;            // Over Temperature Interval - Maximum
} XB_tzPGN_EXTRA_INT_TEMP_CFG_OT;

typedef struct zPGN_INT_TEMP_CFG_OT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teINT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INT_TEMP_CFG_OT *ptzExtra;   // Extra structures
} XB_tzPGN_INT_TEMP_CFG_OT;

// Charger Configuration - Bulk
typedef struct zPGN_CHG_CFG_BULK
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    sint32 slDesiredBulkV;          // Desired Bulk Voltage
    sint32 slDesiredBulkVMin;       // Desired Bulk Voltage - Minimum
    sint32 slDesiredBulkVMax;       // Desired Bulk Voltage - Maximum
    uint32 ulDesiredBulkI;          // Desired Bulk Current
    uint32 ulDesiredBulkIMin;       // Desired Bulk Current - Minimum
    uint32 ulDesiredBulkIMax;       // Desired Bulk Current - Maximum
    sint32 slBulkTermV;             // Bulk Termination Voltage
    sint32 slBulkTermVMin;          // Bulk Termination Voltage - Minimum
    sint32 slBulkTermVMax;          // Bulk Termination Voltage - Maximum
    uint16 uiBulkTermTime;          // Bulk Termination Time
    uint16 uiBulkTermTimeMin;       // Bulk Termination Time - Minimum
    uint16 uiBulkTermTimeMax;       // Bulk Termination Time - Maximum
    sint16 siBulkPeriodTo;          // Bulk Period Timeout
    sint16 siBulkPeriodToMin;       // Bulk Period Timeout - Minimum
    sint16 siBulkPeriodToMax;       // Bulk Period Timeout - Maximum
} XB_tzPGN_CHG_CFG_BULK;

// Charger Configuration - Absorption
typedef struct zPGN_CHG_CFG_ABSORP
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint32 ulDesiredAbsV;           // Desired Absorption Voltage
    uint32 ulDesiredAbsVMin;        // Desired Absorption Voltage - Minimum
    uint32 ulDesiredAbsVMax;        // Desired Absorption Voltage - Maximum
    uint32 ulDesiredAbsI;           // Desired Absorption Current
    uint32 ulDesiredAbsIMin;        // Desired Absorption Current - Minimum
    uint32 ulDesiredAbsIMax;        // Desired Absorption Current - Maximum
    uint32 ulAbsTermI;              // Absorption Termination Current
    uint32 ulAbsTermIMin;           // Absorption Termination Current - Minimum
    uint32 ulAbsTermIMax;           // Absorption Termination Current - Maximum
    uint16 uiAbsTermTimeI;          // Absorption Termination Time - Current
    uint16 uiAbsTermTimeIMin;       // Absorption Termination Time - Current - Minimum
    uint16 uiAbsTermTimeIMax;       // Absorption Termination Time - Current - Maximum
    uint16 uiAbsTermTimeConstV;     // Absorption Termination Time - Constant Voltage
    uint16 uiAbsTermTimeConstVMin;  // Absorption Termination Time - Constant Voltage - Minimum
    uint16 uiAbsTermTimeConstVMax;  // Absorption Termination Time - Constant Voltage - Maximum
    sint16 siAbsPeriodTo;           // Absorption Period Timeout
    sint16 siAbsPeriodToMin;        // Absorption Period Timeout - Minimum
    sint16 siAbsPeriodToMax;        // Absorption Period Timeout - Maximum
} XB_tzPGN_CHG_CFG_ABSORP;

// Charger Configuration - Overcharge
typedef struct zPGN_CHG_CFG_OVERCHARGE
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint32 ulDesiredOChgV;          // Desired Over Charge Voltage
    uint32 ulDesiredOChgVMin;       // Desired Over Charge Voltage - Minimum
    uint32 ulDesiredOChgVMax;       // Desired Over Charge Voltage - Maximum
    uint32 ulDesiredOChgI;          // Desired Over Charge Current
    uint32 ulDesiredOChgIMin;       // Desired Over Charge Current - Minimum
    uint32 ulDesiredOChgIMax;       // Desired Over Charge Current - Maximum
    uint16 uiOChgPeriodTo;          // Over Charge Period Timeout
    uint16 uiOChgPeriodToMin;       // Over Charge Period Timeout - Minimum
    uint16 uiOChgPeriodToMax;       // Over Charge Period Timeout - Maximum
} XB_tzPGN_CHG_CFG_OVERCHARGE;

// Charger Configuration - Float
typedef struct zPGN_CHG_CFG_FLOAT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint32 ulDesiredFloatV;         // Desired Float Voltage
    uint32 ulDesiredFloatVMin;      // Desired Float Voltage - Minimum
    uint32 ulDesiredFloatVMax;      // Desired Float Voltage - Maximum
    uint32 ulDesiredFloatI;         // Desired Float Current
    uint32 ulDesiredFloatIMin;      // Desired Float Current - Minimum
    uint32 ulDesiredFloatIMax;      // Desired Float Current - Maximum
    uint32 ulFloatTermV;            // Float Termination Voltage
    uint32 ulFloatTermVMin;         // Float Termination Voltage - Minimum
    uint32 ulFloatTermVMax;         // Float Termination Voltage - Maximum
    uint16 uiFloatTermTime;         // Float Termination Time
    uint16 uiFloatTermTimeMin;      // Float Termination Time - Minimum
    uint16 uiFloatTermTimeMax;      // Float Termination Time - Maximum
    uint16 uiFloatPeriodTo;         // Float Period Timeout
    uint16 uiFloatPeriodToMin;      // Float Period Timeout - Minimum
    uint16 uiFloatPeriodToMax;      // Float Period Timeout - Maximum
} XB_tzPGN_CHG_CFG_FLOAT;

// Charger Configuration - Equalize
typedef struct zPGN_CHG_CFG_EQUALIZE
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint32 ulDesiredEqlzV;          // Desired Equalization Voltage
    uint32 ulDesiredEqlzVMin;       // Desired Equalization Voltage - Minimum
    uint32 ulDesiredEqlzVMax;       // Desired Equalization Voltage - Maximum
    uint32 ulDesiredEqlzI;          // Desired Equalization Current
    uint32 ulDesiredEqlzIMin;       // Desired Equalization Current - Minimum
    uint32 ulDesiredEqlzIMax;       // Desired Equalization Current - Maximum
    uint32 ulEqlzTermVDelta;        // Equalization Termination Voltage Delta
    uint32 ulEqlzTermVDeltaMin;     // Equalization Termination Voltage Delta - Minimum
    uint32 ulEqlzTermVDeltaMax;     // Equalization Termination Voltage Delta - Maximum
    uint16 uiEqlzTermTime;          // Equalization Termination Time
    uint16 uiEqlzTermTimeMin;       // Equalization Termination Time - Minimum
    uint16 uiEqlzTermTimeMax;       // Equalization Termination Time - Maximum
    sint16 siEqlzPeriodTo;          // Equalization Period Timeout
    sint16 siEqlzPeriodToMin;       // Equalization Period Timeout - Minimum
    sint16 siEqlzPeriodToMax;       // Equalization Period Timeout - Maximum
} XB_tzPGN_CHG_CFG_EQUALIZE;

// Charger Configuration - Constant Voltage Constant Current
typedef struct zPGN_CHG_CFG_CV_CI
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint32 ulDesiredOutV;           // Desired Output Voltage
    uint32 ulDesiredOutVMin;        // Desired Output Voltage - Minimum
    uint32 ulDesiredOutVMax;        // Desired Output Voltage - Maximum
    uint32 ulDesiredOutI;           // Desired Output Current
    uint32 ulDesiredOutIMin;        // Desired Output Current - Minimum
    uint32 ulDesiredOutIMax;        // Desired Output Current - Maximum
} XB_tzPGN_CHG_CFG_CV_CI;

// DC Source Configuration - Battery
typedef struct zPGN_DC_SRC_CFG_BATT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint32 ulNomV;                  // Nominal Voltage
    uint16 uiBattAmpHrRating;       // Battery Amp Hour Rating
    uint16 uiBattAmpHrRatingMin;    // Battery Amp Hour Rating - Minimum
    uint16 uiBattAmpHrRatingMax;    // Battery Amp Hour Rating - Maximum
    schar8 scBattTempCoeff;         // Battery Temperature Coefficient
    schar8 scBattTempCoeffMin;      // Battery Temperature Coefficient - Minimum
    schar8 scBattTempCoeffMax;      // Battery Temperature Coefficient - Maximum
    XB_teBATT_TYPE teBattType;      // Battery Type
    XB_teBATT_CHEM teBattChem;      // Battery Chemistry
    uchar8 ucPeukertExponent;       // Peukert Exponent
    uchar8 ucPeukertExponentMin;    // Peukert Exponent - Minimum
    uchar8 ucPeukertExponentMax;    // Peukert Exponent - Maximum
    schar8 scChgEfficFactor;        // Charge Efficiency Factor
    schar8 scChgEfficFactorMin;     // Charge Efficiency Factor - Minimum
    schar8 scChgEfficFactorMax;     // Charge Efficiency Factor - Maximum
} XB_tzPGN_DC_SRC_CFG_BATT;

// Calibration Command
typedef struct zPGN_CALIB_CMD
{
    XB_teCMD_PAIR teCalibEnDis;     // Calibration Enable/Disable
    uint32 ulStsPgn;                // Status Parameter Group Number
    uchar8 ucDataPtId;              // Data Point Identifier
    uchar8 ucDataPtCnt;             // Data Point Count
} XB_tzPGN_CALIB_CMD;

// AGS Control Command
typedef struct zPGN_AGS_CTRL_CMD
{
    XB_teGEN_ID teGenId;            // Generator Identifier
    XB_teAGS_MODE teDesiredMode;    // Desired Mode
} XB_tzPGN_AGS_CTRL_CMD;

// Inverter Configuration - Load Sense
typedef struct zPGN_INV_CFG_LOAD_SENSE
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiLoadSensePwrThresh;    // Load Sense Power Threshold
    uint16 uiLoadSensePwrThreshMin; // Load Sense Power Threshold - Minimum
    uint16 uiLoadSensePwrThreshMax; // Load Sense Power Threshold - Maximum
    uint16 uiLoadSenseInterval;     // Load Sense Interval
    uint16 uiLoadSenseIntervalMin;  // Load Sense Interval - Minimum
    uint16 uiLoadSenseIntervalMax;  // Load Sense Interval - Maximum
} XB_tzPGN_INV_CFG_LOAD_SENSE;

// Inverter Configuration
typedef struct zPGN_INV_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teCMD_PAIR teLoadSenseEnDis; // Load Sense Enable/Disable
    XB_teINV_MODE teInvMode;        // Inverter Mode
    XB_teXFR_SWITCH_MODE teXferSwMode; // Transfer Switch Mode
} XB_tzPGN_INV_CFG;

// System Identifier Configuration
typedef struct zPGN_SYS_ID_CFG
{
    uchar8 ucMsgCount;              // Message Count
    uint32 ulSysId;                 // System Identifier
} XB_tzPGN_SYS_ID_CFG;

// Reset Command
typedef struct zPGN_RESET_CMD
{
    uchar8 ucProcessorInst;         // Controller Instance
    XB_teRST_CMD teCmd;             // Command
} XB_tzPGN_RESET_CMD;

// Association Configuration
typedef struct zPGN_ASSOC_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teASSN_TYPE teAssocType;     // Association Type
    uchar8 ucAssocInst;             // Association Instance
    uchar8 ucAssocId;               // Association Identifier
} XB_tzPGN_ASSOC_CFG;

// AC Input Configuration
typedef struct zPGN_AC_IN_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint32 ulVoltage;               // Voltage
    uint32 ulVoltageMin;            // Voltage - Minimum
    uint32 ulVoltageMax;            // Voltage - Maximum
    uint16 uiUnitBreakerSz;         // Unit Breaker Size
    uint16 uiUnitBreakerSzMin;      // Unit Breaker Size - Minimum
    uint16 uiUnitBreakerSzMax;      // Unit Breaker Size - Maximum
    uint16 uiFreq;                  // Frequency
    uint16 uiFreqMin;               // Frequency - Minimum
    uint16 uiFreqMax;               // Frequency - Maximum
    uint32 ulRealPwr;               // Real Power
    uint32 ulRealPwrMin;            // Real Power - Minimum
    uint32 ulRealPwrMax;            // Real Power - Maximum
    uint16 uiSrcBreakerSz;          // Source Breaker Size
    uint16 uiSrcBreakerSzMin;       // Source Breaker Size - Minimum
    uint16 uiSrcBreakerSzMax;       // Source Breaker Size - Maximum
} XB_tzPGN_AC_IN_CFG;

// Charger Configuration - Multiple Nodes
typedef struct zPGN_CHG_CFG_MULTIPLE_NODES
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint32 ulNomDcV;                // Nominal DC Voltage
    uint32 ulNomDcVMin;             // Nominal DC Voltage - Minimum
    uint32 ulNomDcVMax;             // Nominal DC Voltage - Maximum
    uint32 ulMaxDcI;                // Maximum DC Current
    uint32 ulMaxDcIMin;             // Maximum DC Current - Minimum
    uint32 ulMaxDcIMax;             // Maximum DC Current - Maximum
    uint16 uiAcInBreakerSz;         // AC Input Breaker Size
    uint16 uiAcInBreakerSzMin;      // AC Input Breaker Size - Minimum
    uint16 uiAcInBreakerSzMax;      // AC Input Breaker Size - Maximum
} XB_tzPGN_CHG_CFG_MULTIPLE_NODES;

// Clear Command
typedef struct zPGN_CLEAR_CMD
{
    XB_teCLR_ITEM_ID teListItem;    // List Item
    XB_teFLT_ID teFaultId;          // Fault Identifier
    XB_teWRN_ID teWarnId;           // Warning Identifier
} XB_tzPGN_CLEAR_CMD;

// Battery Monitor Configuration
typedef struct zPGN_BATT_MON_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
} XB_tzPGN_BATT_MON_CFG;

// AGS Configuration
typedef struct zPGN_EXTRA_AGS_CFG
{
    uchar8 ucCntctInst;             // Contact Instance
    XB_teCMD_PAIR teCntctClsAutoEnDis; // Contact Closure Auto Enable/Disable
} XB_tzPGN_EXTRA_AGS_CFG;

typedef struct zPGN_AGS_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teGEN_ID teGenId;            // Generator Identifier
    uint16 uiQtBeg;                 // Quiet Time Begin
    uint16 uiQtEnd;                 // Quiet Time End
    XB_teCMD_PAIR teQtEnDis;        // Quiet Time Enable/Disable
    XB_teCMD_PAIR teDcVAutoStartEnDis; // DC Voltage Auto Start Enable/Disable
    XB_teCMD_PAIR teDcVAutoStopEnDis; // DC Voltage Auto Stop Enable/Disable
    XB_teCMD_PAIR teBattSocAutoStartEnDis; // Battery SOC Auto Start Enable/Disable
    XB_teCMD_PAIR teBattSocAutoStopEnDis; // Battery SOC Auto Stop Enable/Disable
    XB_teCMD_PAIR teAcIAutoStartEnDis; // AC Current Auto Start Enable/Disable
    XB_teCMD_PAIR teAcIAutoStopEnDis; // AC Current Auto Stop Enable/Disable
    XB_teCMD_PAIR teAbsorpAutoStopEnDis; // Absorption Auto Stop Enable/Disable
    XB_teCMD_PAIR teFloatAutoStopEnDis; // Float Auto Stop Enable/Disable
    uchar8 ucMaxAutoCycNoUser;      // Maximum Automatic Cycles with No User Intervention
    uchar8 ucMaxAutoCycNoUserMin;   // Maximum Automatic Cycles with No User Intervention - Minimum
    uchar8 ucMaxAutoCycNoUserMax;   // Maximum Automatic Cycles with No User Intervention - Maximum
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG;

// AGS Configuration - Generator
typedef struct zPGN_EXTRA_AGS_CFG_GEN
{
    XB_teRELAY_ID teRelayId;        // Relay Identifier
    XB_teRELAY_FUNC teRelayFunc;    // Relay Function
} XB_tzPGN_EXTRA_AGS_CFG_GEN;

typedef struct zPGN_AGS_CFG_GEN
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teGEN_ID teGenId;            // Generator Identifier
    XB_teGEN_INTERFACE_TYPE teGenIntfType; // Generator Interface Type
    XB_teGEN_OUT_TYPE teGenOutType; // Generator Output Type
    uint16 uiPreheatTime;           // Preheat Time
    uint16 uiPreheatTimeMin;        // Preheat Time - Minimum
    uint16 uiPreheatTimeMax;        // Preheat Time - Maximum
    uint16 uiStartDly;              // Start Delay
    uint16 uiStartDlyMin;           // Start Delay - Minimum
    uint16 uiStartDlyMax;           // Start Delay - Maximum
    uint16 uiCrankTime;             // Crank Time
    uint16 uiCrankTimeMin;          // Crank Time - Minimum
    uint16 uiCrankTimeMax;          // Crank Time - Maximum
    uint16 uiShutdownBypassTime;    // Shutdown Bypass Time
    uint16 uiShutdownBypassTimeMin; // Shutdown Bypass Time - Minimum
    uint16 uiShutdownBypassTimeMax; // Shutdown Bypass Time - Maximum
    uint16 uiStarterCooldownTime;   // Starter Cooldown Time
    uint16 uiStarterCooldownTimeMin; // Starter Cooldown Time - Minimum
    uint16 uiStarterCooldownTimeMax; // Starter Cooldown Time - Maximum
    uint16 uiCrankRetryTime;        // Crank Retry Time
    uint16 uiCrankRetryTimeMin;     // Crank Retry Time - Minimum
    uint16 uiCrankRetryTimeMax;     // Crank Retry Time - Maximum
    uint16 uiGenWarmupTime;         // Generator Warmup Time
    uint16 uiGenWarmupTimeMin;      // Generator Warmup Time - Minimum
    uint16 uiGenWarmupTimeMax;      // Generator Warmup Time - Maximum
    uint16 uiMaxRunTime;            // Maximum Run Time
    uint16 uiMaxRunTimeMin;         // Maximum Run Time - Minimum
    uint16 uiMaxRunTimeMax;         // Maximum Run Time - Maximum
    uint16 uiGenCooldownTime;       // Generator Cool Down Time
    uint16 uiGenCooldownTimeMin;    // Generator Cool Down Time - Minimum
    uint16 uiGenCooldownTimeMax;    // Generator Cool Down Time - Maximum
    uint16 uiSpindownTime;          // Spindown Time
    uint16 uiSpindownTimeMin;       // Spindown Time - Minimum
    uint16 uiSpindownTimeMax;       // Spindown Time - Maximum
    uint16 uiStopTimeout;           // Stop Timeout
    uint16 uiStopTimeoutMin;        // Stop Timeout - Minimum
    uint16 uiStopTimeoutMax;        // Stop Timeout - Maximum
    uchar8 ucMaxGenStartRetries;    // Maximum Generator Start Retries
    uchar8 ucMaxGenStartRetriesMin; // Maximum Generator Start Retries - Minimum
    uchar8 ucMaxGenStartRetriesMax; // Maximum Generator Start Retries - Maximum
    uchar8 ucExercisePer;           // Exercise Period
    uchar8 ucExercisePerMin;        // Exercise Period - Minimum
    uchar8 ucExercisePerMax;        // Exercise Period - Maximum
    uchar8 ucExerciseDur;           // Exercise Duration
    uchar8 ucExerciseDurMin;        // Exercise Duration - Minimum
    uchar8 ucExerciseDurMax;        // Exercise Duration - Maximum
    uint16 uiExerciseTod;           // Exercise Time of Day
    uint16 uiExerciseTodMin;        // Exercise Time of Day - Minimum
    uint16 uiExerciseTodMax;        // Exercise Time of Day - Maximum
    uint16 uiGenRunHoldTime;        // Generator Run Hold Time
    uint16 uiGenRunHoldTimeMin;     // Generator Run Hold Time - Minimum
    uint16 uiGenRunHoldTimeMax;     // Generator Run Hold Time - Maximum
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_GEN *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_GEN;

// Charger Configuration
typedef struct zPGN_CHG_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teCHG_ALG_TYPE teChgAlgorithmType; // Charging Algorithm Type
    uchar8 ucChgILimit;             // Charger Current Limit
    uchar8 ucChgILimitMin;          // Charger Current Limit - Minimum
    uchar8 ucChgILimitMax;          // Charger Current Limit - Maximum
    XB_teCMD_PAIR teEqlzOneTimeEnDis; // Equalize One-Time Enable/Disable
    XB_teCMD_PAIR teOverChgEnDis;   // Over Charge Enable/Disable
    XB_teCMD_PAIR teChgOverrideEnDis; // Charger Override Enable/Disable
    XB_teCHG_MODE teChgMode;        // Charge Mode
    XB_teBATT_TEMP_NO_SENS_OPTIONS teBattTempNoSensor; // Battery Temperature - No Sensor
} XB_tzPGN_CHG_CFG;

// Periodic Transmit Configuration
typedef struct zPGN_EXTRA_PER_XMIT_CFG
{
    uint32 ulParmGrpNum;            // PGN to Transmit
    uchar8 ucXmitAddr;              // Transmit Address
    uint16 uiXmitPeriod;            // Transmit Period
} XB_tzPGN_EXTRA_PER_XMIT_CFG;

typedef struct zPGN_PER_XMIT_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_PER_XMIT_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_PER_XMIT_CFG;

// Development - Peek at Address Request
typedef struct zPGN_DEV_PEEK_ADDR_REQ
{
    uchar8 ucProcessorInst;         // Controller Instance
    uint32 ulStartMemAddr;          // Start Memory Address
    uint16 uiNumBytesGet;           // Number of Bytes to Retrieve
} XB_tzPGN_DEV_PEEK_ADDR_REQ;

// Development - Peek at Address Response
typedef struct zPGN_EXTRA_DEV_PEEK_ADDR_RSP
{
    uchar8 ucBytesGot;              // Bytes Retrieved
} XB_tzPGN_EXTRA_DEV_PEEK_ADDR_RSP;

typedef struct zPGN_DEV_PEEK_ADDR_RSP
{
    uchar8 ucProcessorInst;         // Controller Instance
    uint32 ulStartMemAddr;          // Start memory Address
    uint16 uiNumBytesGot;           // Number of Bytes Retrieved
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DEV_PEEK_ADDR_RSP *ptzExtra;   // Extra structures
} XB_tzPGN_DEV_PEEK_ADDR_RSP;

// Development - Poke at Address
typedef struct zPGN_EXTRA_DEV_POKE_ADDR
{
    uchar8 ucBytesSet;              // Bytes to Set
} XB_tzPGN_EXTRA_DEV_POKE_ADDR;

typedef struct zPGN_DEV_POKE_ADDR
{
    uchar8 ucProcessorInst;         // Controller Instance
    uint32 ulStartMemAddr;          // Start Memory Address
    uint16 uiNumBytesSet;           // Number of Bytes to Set
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DEV_POKE_ADDR *ptzExtra;   // Extra structures
} XB_tzPGN_DEV_POKE_ADDR;

// File Download Block
typedef struct zPGN_EXTRA_FILE_DNLD_BLK
{
    uchar8 ucBlkData;               // Block Data
} XB_tzPGN_EXTRA_FILE_DNLD_BLK;

typedef struct zPGN_FILE_DNLD_BLK
{
    uint16 uiBlkNum;                // Block Number
    uint16 uiBlkSz;                 // Block Size
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_FILE_DNLD_BLK *ptzExtra;   // Extra structures
} XB_tzPGN_FILE_DNLD_BLK;

// File Download Information
typedef struct zPGN_FILE_DNLD_INF
{
    XB_teFUNC_CODE teDeviceFunction; // Device Function
    uchar8 ucProcessorInst;         // Controller Instance
    XB_teSW_MOD_ID teSwModId;       // Software Module Identifier
    uint32 ulSwVer;                 // Software Version
    uint32 ulFileSz;                // File Size
    uint16 uiCrc;                   // CRC
    uint16 uiExpectNumBlks;         // Expected Number of Blocks
} XB_tzPGN_FILE_DNLD_INF;

// Receive Timeout Configuration
typedef struct zPGN_EXTRA_RX_TO_CFG
{
    uint32 ulParmGrpNum;            // Parameter Group Number
    uint16 uiTimeout;               // Timeout
} XB_tzPGN_EXTRA_RX_TO_CFG;

typedef struct zPGN_RX_TO_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_RX_TO_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_RX_TO_CFG;

// Enable/Disable Configuration
typedef struct zPGN_EN_DIS_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teCMD_PAIR tePerTxEnDis;     // Periodic Transmit Enable/Disable
    XB_teCMD_PAIR teIdentEnDis;     // Identify Enable/Disable
} XB_tzPGN_EN_DIS_CFG;

// Charger Control Command
typedef struct zPGN_CHG_CTRL_CMD
{
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teCMD_PAIR teChgEnDis;       // Charger Enable/Disable
} XB_tzPGN_CHG_CTRL_CMD;

// Association Status
typedef struct zPGN_ASSOC_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teASSN_TYPE teAssocType;     // Association Type
    uchar8 ucAssocInst;             // Association Instance
    uchar8 ucAssocId;               // Association Identifier
} XB_tzPGN_ASSOC_STS;

// Inverter Control Command
typedef struct zPGN_INV_CTRL_CMD
{
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teCMD_PAIR teInvEnDis;       // Inverter Enable/Disable
} XB_tzPGN_INV_CTRL_CMD;

// Nova Calibration Configuration
typedef struct zPGN_NOVA_CALIB_CFG
{
    uchar8 ucMsgCount;              // Message Count
    uint32 ulStsPgn;                // Status Parameter Group Number
    uchar8 ucDataPtId;              // Data Point Identifier
    uint16 uiScale;                 // Scaling Factor (k)
    sint16 siOffset;                // Offset
    sint32 slValue;                 // Value
} XB_tzPGN_NOVA_CALIB_CFG;

// Test 1
typedef struct zPGN_TEST1
{
    uchar8 ucaByte;                 // 1 Byte
    uchar8 ucaChar;                 // 1 Byte
    uint16 uiaWord;                 // 2 Bytes
    sint16 sianInt;                 // 2 Bytes
    uint32 ulaDWord;                // 4 Bytes
    uint32 ulaLong;                 // 4 Bytes
} XB_tzPGN_TEST1;

// NAME Configuration
typedef struct zPGN_NAME_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint32 ulUniqueNumber;          // Unique Number (ISO Identity Number)
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    uchar8 ucRsvBit;                // Reserved Bit
    XB_teDEV_CLASS teDeviceClass;   // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    XB_teINDUSTRY_GRP teIndustryGroup; // Industry Group
    uchar8 ucSelfCfgAddr;           // ISO Self Configurable Address
} XB_tzPGN_NAME_CFG;

// File Download Status
typedef struct zPGN_FILE_DNLD_STS
{
    XB_teOP_STATE_LDR teOpState;    // Operating State
    XB_teDL_RESULT_CODE teResultCode; // Result Code
    uchar8 ucProcessorInst;         // Controller Instance
    uint16 uiModelNum;              // Model Number
    uint16 uiHwModRev;              // Hardware Module Revision
    uint16 uiBlkNum;                // Block Number
} XB_tzPGN_FILE_DNLD_STS;

// AGS Configuration - DC Voltage
typedef struct zPGN_EXTRA_AGS_CFG_DC_V
{
    XB_teCMD_PAIR teStartStop;      // Start or Stop
    uint16 uiPerBeg;                // Period Begin
    uint16 uiPerEnd;                // Period End
    uint32 ulVLvl;                  // Voltage Level to Start/Stop
    uint16 uiTimeInt;               // Time Interval to Start/Stop
} XB_tzPGN_EXTRA_AGS_CFG_DC_V;

typedef struct zPGN_AGS_CFG_DC_V
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teGEN_ID teGenId;            // Generator Identifier
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint32 ulVLvlStopMin;           // Voltage Level to Stop - Min
    uint32 ulVLvlStopMax;           // Voltage Level to Stop - Max
    uint16 uiTimeIntStopMin;        // Time Interval to Stop - Min
    uint16 uiTimeIntStopMax;        // Time Interval to Stop - Max
    uint32 ulVLvlStartMin;          // Voltage Level to Start - Min
    uint32 ulVLvlStartMax;          // Voltage Level to Start - Max
    uint16 uiTimeIntStartMin;       // Time Interval to Start - Min
    uint16 uiTimeIntStartMax;       // Time Interval to Start - Max
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_DC_V *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_DC_V;

// AGS Configuration - Battery SOC
typedef struct zPGN_EXTRA_AGS_CFG_BATT_SOC
{
    XB_teCMD_PAIR teStartStop;      // Start or Stop
    uint16 uiPerBeg;                // Period Begin
    uint16 uiPerEnd;                // Period End
    uchar8 ucSocLvl;                // State of Charge Level to Start/Stop
    uint16 uiTimeInt;               // Time Interval to Start/Stop
} XB_tzPGN_EXTRA_AGS_CFG_BATT_SOC;

typedef struct zPGN_AGS_CFG_BATT_SOC
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teGEN_ID teGenId;            // Generator Identifier
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uchar8 ucSocLvlStopMin;         // State of Charge Level to Stop - Min
    uchar8 ucSocLvlStopMax;         // State of Charge Level to Stop - Max
    uint16 uiTimeIntStopMin;        // Time Interval to Stop - Min
    uint16 uiTimeIntStopMax;        // Time Interval to Stop - Max
    uchar8 ucSocLvlStartMin;        // State of Charge Level to Start - Min
    uchar8 ucSocLvlStartMax;        // State of Charge Level to Start - Max
    uint16 uiTimeIntStartMin;       // Time Interval to Start - Min
    uint16 uiTimeIntStartMax;       // Time Interval to Start - Max
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_BATT_SOC *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_BATT_SOC;

// AGS Configuration - AC Current
typedef struct zPGN_EXTRA_AGS_CFG_AC_I
{
    XB_teCMD_PAIR teStartStop;      // Start or Stop
    uint16 uiPerBeg;                // Period Begin
    uint16 uiPerEnd;                // Period End
    uint32 ulAcILvl;                // AC Current Level to Start/Stop
    uint16 uiTimeInt;               // Time Interval to Start/Stop
} XB_tzPGN_EXTRA_AGS_CFG_AC_I;

typedef struct zPGN_AGS_CFG_AC_I
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teGEN_ID teGenId;            // Generator Identifier
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint32 ulAcILvlStopMin;         // AC Current Level to Stop - Min
    uint32 ulAcILvlStopMax;         // AC Current Level to Stop - Max
    uint16 uiTimeIntStopMin;        // Time Interval to Stop - Min
    uint16 uiTimeIntStopMax;        // Time Interval to Stop - Max
    uint32 ulAcILvlStartMin;        // AC Current Level to Start - Min
    uint32 ulAcILvlStartMax;        // AC Current Level to Start - Max
    uint16 uiTimeIntStartMin;       // Time Interval to Start - Min
    uint16 uiTimeIntStartMax;       // Time Interval to Start - Max
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_AC_I *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_AC_I;

// AGS Configuration - Contact Closure
typedef struct zPGN_EXTRA_AGS_CFG_CNTCT_CLS
{
    uchar8 ucCntctInst;             // Contact Instance
    uint16 uiPerBeg;                // Period Begin
    uint16 uiPerEnd;                // Period End
    uint16 uiClsDly;                // Closing Delay
    uint16 uiOpnDly;                // Opening Delay
} XB_tzPGN_EXTRA_AGS_CFG_CNTCT_CLS;

typedef struct zPGN_AGS_CFG_CNTCT_CLS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teGEN_ID teGenId;            // Generator Identifier
    uint16 uiClsDlyMin;             // Closing Delay - Min
    uint16 uiClsDlyMax;             // Closing Delay - Max
    uint16 uiOpnDlyMin;             // Opening Delay - Min
    uint16 uiOpnDlyMax;             // Opening Delay - Max
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_CNTCT_CLS *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_CNTCT_CLS;

// Control Command
typedef struct zPGN_CTRL_CMD
{
    XB_teCTRL_MODE teDesiredMode;   // Desired Mode
} XB_tzPGN_CTRL_CMD;

// User Interface Configuration
typedef struct zPGN_UI_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucDispBright;            // Display Brightness
    uchar8 ucDispContrast;          // Display Contrast
    uchar8 ucBtnHoldTo;             // Button Hold Timeout
    uchar8 ucBtnRptRate;            // Button Repeat Rate
    XB_teUSER_ACCESS_MODE teAccMode; // Access Mode
    uchar8 ucDispSeqTo;             // Display Seqeunce Timeout
    uchar8 ucScrnSaveTo;            // Screen Saver Timeout
    XB_teSPLASH_SCRN_STYLE teSplashScrnStyl; // Splash Screen Style
    uchar8 ucSplashScrnTo;          // Splash Screen Timeout
    uchar8 ucBkltTo;                // Backlight Timeout
    XB_teCMD_PAIR teSplashOnWakeEnDis; // Splash Screen on Wakeup Enable/Disable
    uchar8 ucVol;                   // Volume
    XB_teCMD_PAIR teSndEnDis;       // Sound Enable/Disable
    XB_teCMD_PAIR teBtnSndEnDis;    // Button Sound Enable/Disable
    XB_teCMD_PAIR teFaultSndEnDis;  // Fault Sound Enable/Disable
    XB_teCMD_PAIR teWarnSndEnDis;   // Warning Sound Enable/Disable
    XB_teMEASUREMENT_UNIT teMeasUnit; // Measurement Unit
    XB_teTIME_FORMAT teTimeFmt;     // Time Format
} XB_tzPGN_UI_CFG;

// User Interface Configuration - Splash Image
typedef struct zPGN_EXTRA_UI_CFG_SPLASH_IMG
{
    uchar8 ucImage;                 // Image Data
} XB_tzPGN_EXTRA_UI_CFG_SPLASH_IMG;

typedef struct zPGN_UI_CFG_SPLASH_IMG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teIMAGE_DEPTH teImgDepth;    // Image Depth
    uchar8 ucNPixRows;              // Number of Pixel Rows
    uchar8 ucNPixCols;              // Number of Pixel Columns
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_SPLASH_IMG *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_SPLASH_IMG;

// User Interface Configuration - Node Labels
typedef struct zPGN_EXTRA_UI_CFG_NODE_LBL
{
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    XB_teDEV_CLASS teDeviceClass;   // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    uchar8 aucNodeLbl[ 16 ];        // Node Label
} XB_tzPGN_EXTRA_UI_CFG_NODE_LBL;

typedef struct zPGN_UI_CFG_NODE_LBL
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_NODE_LBL *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_NODE_LBL;

// User Interface Configuration - Association Labels
typedef struct zPGN_EXTRA_UI_CFG_ASSOC_LBL
{
    XB_teASSN_TYPE teAssocType;     // Association Type
    uchar8 ucAssocId;               // Association Identifier
    uchar8 aucAssocLbl[ 16 ];       // Association Label
} XB_tzPGN_EXTRA_UI_CFG_ASSOC_LBL;

typedef struct zPGN_UI_CFG_ASSOC_LBL
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_ASSOC_LBL *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_ASSOC_LBL;

// User Interface Configuration - Faults Text
typedef struct zPGN_EXTRA_UI_CFG_FAULT_TXT
{
    XB_teFLT_TYPE teFaultType;      // Fault Type
    XB_teFLT_ID teFaultId;          // Fault Identifier
    uchar8 aucFaultTxt[ 32 ];       // Fault Text
} XB_tzPGN_EXTRA_UI_CFG_FAULT_TXT;

typedef struct zPGN_UI_CFG_FAULT_TXT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_FAULT_TXT *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_FAULT_TXT;

// User Interface Configuration - Warnings Text
typedef struct zPGN_EXTRA_UI_CFG_WARN_TXT
{
    XB_teWRN_TYPE teWarnType;       // Warning Type
    XB_teWRN_ID teWarnId;           // Warning Identifier
    uchar8 aucWarnTxt[ 32 ];        // Warning Text
} XB_tzPGN_EXTRA_UI_CFG_WARN_TXT;

typedef struct zPGN_UI_CFG_WARN_TXT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_WARN_TXT *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_WARN_TXT;

// Configuration
typedef struct zPGN_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiIdPeriod;              // Identify Period
    uchar8 ucEntSleepTo;            // Enter Sleep Timeout
    uchar8 ucEntHibTo;              // Enter Hibernate Timeout
    XB_teCMD_PAIR teFaultAutoRst;   // Fault Automatic Reset
} XB_tzPGN_CFG;

// Date and Time Configuration
typedef struct zPGN_DATE_TIME_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint32 ulCurTime;               // Time
    sint16 siLocalOffsetMins;       // Local Offset, Minutes
    XB_teDOW teLocalDow;            // Local Day of the Week
} XB_tzPGN_DATE_TIME_CFG;

// User Interface Configuration - Status Display
typedef struct zPGN_EXTRA_UI_CFG_STS_DISP
{
    uint32 ulFieldPgn;              // Field PGN
    uchar8 ucFieldNum;              // Field Number
    XB_teDISP_LABEL teFieldLabel;   // Field Label
    XB_teDISP_UNIT teFieldUnits;    // Field Units
    XB_teDISP_STYLE teFieldStyle;   // Field Style
    uchar8 ucFieldStartRow;         // Field Starting Row
    uchar8 ucFieldStartCol;         // Field Starting Column
} XB_tzPGN_EXTRA_UI_CFG_STS_DISP;

typedef struct zPGN_UI_CFG_STS_DISP
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teSTS_DISP_ID teStsDispId;   // Status Display Identifier
    uchar8 aucTitle[ 20 ];          // Title
    uchar8 ucTitleStartRow;         // Title Starting Row
    uchar8 ucTitleStartCol;         // Title Starting Column
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_STS_DISP *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_STS_DISP;

// Diagnostic - Indicator Command
typedef struct zPGN_EXTRA_DIAG_INDIC_CMD
{
    XB_teINDICATOR_ID teIndicId;    // Indicator Identifier
    XB_teCMD_PAIR teIndicState;     // Indicator State
} XB_tzPGN_EXTRA_DIAG_INDIC_CMD;

typedef struct zPGN_DIAG_INDIC_CMD
{
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DIAG_INDIC_CMD *ptzExtra;   // Extra structures
} XB_tzPGN_DIAG_INDIC_CMD;

// Diagnostic - Contact Command
typedef struct zPGN_EXTRA_DIAG_CNTCT_CMD
{
    XB_teCONTACT_ID teCntctId;      // Contact Identifier
    XB_teCMD_PAIR teCntctState;     // Contact State
} XB_tzPGN_EXTRA_DIAG_CNTCT_CMD;

typedef struct zPGN_DIAG_CNTCT_CMD
{
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DIAG_CNTCT_CMD *ptzExtra;   // Extra structures
} XB_tzPGN_DIAG_CNTCT_CMD;

// Diagnostic - Contact Status
typedef struct zPGN_EXTRA_DIAG_CNTCT_STS
{
    XB_teCONTACT_ID teCntctId;      // Contact Identifier
    XB_teGENERIC_STSPAIR teCntctState; // Contact State
} XB_tzPGN_EXTRA_DIAG_CNTCT_STS;

typedef struct zPGN_DIAG_CNTCT_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DIAG_CNTCT_STS *ptzExtra;   // Extra structures
} XB_tzPGN_DIAG_CNTCT_STS;

// Diagnostic - Fan Command
typedef struct zPGN_EXTRA_DIAG_FAN_CMD
{
    XB_teFAN_ID teFanId;            // Fan Identifier
    uchar8 ucFanSpd;                // Fan Speed
} XB_tzPGN_EXTRA_DIAG_FAN_CMD;

typedef struct zPGN_DIAG_FAN_CMD
{
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DIAG_FAN_CMD *ptzExtra;   // Extra structures
} XB_tzPGN_DIAG_FAN_CMD;

// AC Input Configuration - Over Frequency
typedef struct zPGN_EXTRA_AC_IN_CFG_OF
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint16 uiOfLvl;                 // Over Frequency Level
    uint16 uiOfLvlMin;              // Over Frequency Level - Minimum
    uint16 uiOfLvlMax;              // Over Frequency Level - Maximum
    uint16 uiOfIntvl;               // Over Frequency Interval
    uint16 uiOfIntvlMin;            // Over Frequency Interval - Minimum
    uint16 uiOfIntvlMax;            // Over Frequency Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_OF;

typedef struct zPGN_AC_IN_CFG_OF
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_OF *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_OF;

// AC Input Configuration - Under Frequency
typedef struct zPGN_EXTRA_AC_IN_CFG_UF
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint16 uiUfLvl;                 // Under Frequency Level
    uint16 uiUfLvlMin;              // Under Frequency Level - Minimum
    uint16 uiUfLvlMax;              // Under Frequency Level - Maximum
    uint16 uiUfIntvl;               // Under Frequency Interval
    uint16 uiUfIntvlMin;            // Under Frequency Interval - Minimum
    uint16 uiUfIntvlMax;            // Under Frequency Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_UF;

typedef struct zPGN_AC_IN_CFG_UF
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_UF *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_UF;

// Diagnostic - Manufacturing Configuration
typedef struct zPGN_DIAG_MFG_CFG
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teMFG_STEP teMfgStep;        // Manufacturing Step
    uint32 ulMfgTime;               // Manufacturing Time
    sint16 siLocalOffsetMins;       // Local Offset, Minutes
} XB_tzPGN_DIAG_MFG_CFG;

// AC Output Configuration - Over Voltage - RMS
typedef struct zPGN_EXTRA_AC_OUT_CFG_OV_RMS
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulOvLvl;                 // Over Voltage Level
    uint32 ulOvLvlMin;              // Over Voltage Level - Minimum
    uint32 ulOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_OUT_CFG_OV_RMS;

typedef struct zPGN_AC_OUT_CFG_OV_RMS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_OUT_CFG_OV_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_OUT_CFG_OV_RMS;

// AC Output Configuration - Under Voltage - RMS
typedef struct zPGN_EXTRA_AC_OUT_CFG_UV_RMS
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    uint32 ulUvLvl;                 // Under Voltage Level
    uint32 ulUvLvlMin;              // Under Voltage Level - Minimum
    uint32 ulUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_OUT_CFG_UV_RMS;

typedef struct zPGN_AC_OUT_CFG_UV_RMS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_OUT_CFG_UV_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_OUT_CFG_UV_RMS;

// DC Source Configuration - Photovoltaic Array
typedef struct zPGN_DC_SRC_CFG_PV_ARRAY
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teCMD_PAIR teMpptEnDis;      // MPPT Enable/Disable
    uchar8 ucPwrXfer;               // Power Transfer
    uchar8 ucPwrXferMin;            // Power Transfer - Minimum
    uchar8 ucPwrXferMax;            // Power Transfer - Maximum
} XB_tzPGN_DC_SRC_CFG_PV_ARRAY;

// User Interface Configuration - Faults Behavior
typedef struct zPGN_EXTRA_UI_CFG_FAULT_BEHAVIOR
{
    XB_teBEHAVIOR teFaultBehavior;  // Fault Behavior
    XB_teFLT_ID teFaultId;          // Fault Identifier
} XB_tzPGN_EXTRA_UI_CFG_FAULT_BEHAVIOR;

typedef struct zPGN_UI_CFG_FAULT_BEHAVIOR
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_FAULT_BEHAVIOR *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_FAULT_BEHAVIOR;

// User Interface Configuration - Warnings Behavior
typedef struct zPGN_EXTRA_UI_CFG_WARN_BEHAVIOR
{
    XB_teBEHAVIOR teWarnBehavior;   // Warning Behavior
    XB_teWRN_ID teWarnId;           // Warning Identifier
} XB_tzPGN_EXTRA_UI_CFG_WARN_BEHAVIOR;

typedef struct zPGN_UI_CFG_WARN_BEHAVIOR
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_WARN_BEHAVIOR *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_WARN_BEHAVIOR;

// PGN List - Transmitted PGN's Group Function
typedef struct zPGN_EXTRA_PGN_LIST_TX
{
    uint32 ulTXPgns;                // Transmittable PGNs
} XB_tzPGN_EXTRA_PGN_LIST_TX;

typedef struct zPGN_PGN_LIST_TX
{
    XB_teGRP_FUNC_TX_AND_RX_PGN_LIST teTXedPgnGroupFunctionCode; // Transmitted PGN Group Function Code
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_PGN_LIST_TX *ptzExtra;   // Extra structures
} XB_tzPGN_PGN_LIST_TX;

// PGN List - Received PGN's Group Function
typedef struct zPGN_EXTRA_PGN_LIST_RX
{
    uint32 ulRxPgns;                // Receivable PGNs
} XB_tzPGN_EXTRA_PGN_LIST_RX;

typedef struct zPGN_PGN_LIST_RX
{
    XB_teGRP_FUNC_TX_AND_RX_PGN_LIST teRxedPgnGroupFunctionCode; // Received PGN Group Function Code
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_PGN_LIST_RX *ptzExtra;   // Extra structures
} XB_tzPGN_PGN_LIST_RX;

// DC Source Status
typedef struct zPGN_DC_SRC_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint32 ulVoltage;               // Voltage
    sint32 slCurrent;               // Current
    XB_teEXT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTemp;                  // Temperature
    uchar8 ucSoc;                   // State of Charge
    uint16 uiTimeRemain;            // Time Remaining
    uchar8 ucSoh;                   // State of Health
    uint16 uiBattCapRemain;         // Battery Capacity Remaining
    uchar8 ucBattCapPer;            // Battery Capacity Percent of Maximum
    uint32 ulAcRipVRms;             // AC RMS Ripple Voltage
} XB_tzPGN_DC_SRC_STS;

// Communication Statistics
typedef struct zPGN_COMM_STATS
{
    uchar8 ucMsgCount;              // Message Count
    uint32 ulTxExtFrameCnt;         // Transmitted Extended Frames Count
    uint32 ulRxExtFrameCnt;         // Received Extended Frames Count
    uint16 uiRxErrCnt;              // Receive Error Count
    uint16 uiTxErrCnt;              // Transmit Error Count
    uint16 uiBusOffCnt;             // Bus-Off Error Count
    uint16 uiRxFrameDropCnt;        // Receive Frames Dropped Count
    uint16 uiTxFrameDropCnt;        // Transmit Frames Dropped Count
    uint16 uiMemAllocFailCnt;       // Memory Allocation Failure Count
    uchar8 ucMpToCnt;               // Multi-Packet Timeout Count
    uchar8 ucMpLateFrameCnt;        // Multi-Packet Late Frame Count
    uint16 uiAllocMemHiWaterMark;   // Allocated Memory High Water Mark
} XB_tzPGN_COMM_STATS;

// AC Input Status - RMS
typedef struct zPGN_EXTRA_AC_IN_STS_RMS
{
    XB_teAC_LINE teLine;            // Line
    XB_teSRC_QUAL teQuality;        // Quality
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulReactivePwr;           // Reactive Power
    uint32 ulRealPwr;               // Real Power
} XB_tzPGN_EXTRA_AC_IN_STS_RMS;

typedef struct zPGN_AC_IN_STS_RMS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_STS_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_STS_RMS;

// AC Input Status - Peak
typedef struct zPGN_EXTRA_AC_IN_STS_PEAK
{
    XB_teAC_LINE teLine;            // Line
    XB_teSRC_QUAL teQuality;        // Quality
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulReactivePwr;           // Reactive Power
    uint32 ulRealPwr;               // Real Power
} XB_tzPGN_EXTRA_AC_IN_STS_PEAK;

typedef struct zPGN_AC_IN_STS_PEAK
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_STS_PEAK *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_STS_PEAK;

// AC Input Status - Average
typedef struct zPGN_EXTRA_AC_IN_STS_AVG
{
    XB_teAC_LINE teLine;            // Line
    XB_teSRC_QUAL teQuality;        // Quality
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulReactivePwr;           // Reactive Power
    uint32 ulRealPwr;               // Real Power
} XB_tzPGN_EXTRA_AC_IN_STS_AVG;

typedef struct zPGN_AC_IN_STS_AVG
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_STS_AVG *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_STS_AVG;

// AC Output Status - RMS
typedef struct zPGN_EXTRA_AC_OUT_STS_RMS
{
    XB_teAC_LINE teLine;            // Line
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uchar8 ucCurrentPer;            // Current Percent of Maximum
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulReactivePwr;           // Reactive Power
    uint32 ulRealPwr;               // Real Power
    uchar8 ucRealPwrPer;            // Real Power Percent of Maximum
} XB_tzPGN_EXTRA_AC_OUT_STS_RMS;

typedef struct zPGN_AC_OUT_STS_RMS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teAC_WAVEFORMS teWaveform;   // Waveform
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_OUT_STS_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_OUT_STS_RMS;

// AC Output Status - Peak
typedef struct zPGN_EXTRA_AC_OUT_STS_PEAK
{
    XB_teAC_LINE teLine;            // Line
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uchar8 ucCurrentPer;            // Current Percent of Maximu
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulReactivePwr;           // Reactive Power
    uint32 ulRealPwr;               // Real Power
    uchar8 ucRealPwrPer;            // Real Power Percent of Maximum
} XB_tzPGN_EXTRA_AC_OUT_STS_PEAK;

typedef struct zPGN_AC_OUT_STS_PEAK
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teAC_WAVEFORMS teWaveform;   // Waveform
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_OUT_STS_PEAK *ptzExtra;   // Extra structures
} XB_tzPGN_AC_OUT_STS_PEAK;

// AC Output Status - Average
typedef struct zPGN_EXTRA_AC_OUT_STS_AVG
{
    XB_teAC_LINE teLine;            // Line
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uchar8 ucCurrentPer;            // Current Percent of Maximu
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulReactivePwr;           // Reactive Power
    uint32 ulRealPwr;               // Real Power
    uchar8 ucRealPwrPer;            // Real Power Percent of Maximum
} XB_tzPGN_EXTRA_AC_OUT_STS_AVG;

typedef struct zPGN_AC_OUT_STS_AVG
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teAC_WAVEFORMS teWaveform;   // Waveform
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_OUT_STS_AVG *ptzExtra;   // Extra structures
} XB_tzPGN_AC_OUT_STS_AVG;

// Auxiliary Power Supply Status
typedef struct zPGN_APS_STS
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucOutputId;              // Output Identifier
    sint32 slVoltage;               // Voltage
    sint32 slCurrent;               // Current
} XB_tzPGN_APS_STS;

// Offline Power Supply Status
typedef struct zPGN_OPS_STS
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucOutputId;              // Output Identifier
    sint32 slVoltage;               // Voltage
    sint32 slCurrent;               // Current
} XB_tzPGN_OPS_STS;

// High Voltage DC Bus Status
typedef struct zPGN_HV_DC_BUS_STS
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucOutputId;              // Output Instance
    uint32 ulVoltage;               // Voltage
    sint32 slCurrent;               // Current
} XB_tzPGN_HV_DC_BUS_STS;

// External Temperature Status
typedef struct zPGN_EXT_TEMP_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teEXT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTemp;                  // Temperature
} XB_tzPGN_EXT_TEMP_STS;

// Internal Temperature Status
typedef struct zPGN_INT_TEMP_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teINT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTemp;                  // Temperature
} XB_tzPGN_INT_TEMP_STS;

// Charger Status
typedef struct zPGN_CHG_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint32 ulCtrlV;                 // Control Votlage
    uint32 ulCtrlI;                 // Control Current
    uchar8 ucCtrlIPer;              // Control Current Percent of Maximum
    XB_teCHG_ALG_TYPE teChgAlgorithmType; // Charging Algorithm Type
    XB_teOP_STATE_CHG teOpState;    // Operating State
    XB_teCHG_MODE teChgMode;        // Charger Mode
    XB_teGENERIC_STSPAIR teChgEnDis; // Charger Enable/Disable
    XB_teGENERIC_STSPAIR teBattTempSensorPresent; // Battery Temperature Sensor Present
    XB_teGENERIC_STSPAIR teEqlzPending; // Equalization Pending
    uchar8 ucEqlzTimeRemain;        // Equalization Time Remaining
} XB_tzPGN_CHG_STS;

// Status
typedef struct zPGN_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teNETWORK_STATE teNetworkState; // Network State
    XB_teGENERIC_STSPAIR tePerTxEnDis; // Periodic Transmit Enable/Disable
    XB_teGENERIC_STSPAIR teNewFaultsFlag; // New Faults Flag
    XB_teGENERIC_STSPAIR teNewWarnsFlag; // New Warnings Flag
    XB_teCTRL_MODE teDesiredMode;   // Desired Mode
    XB_teCTRL_MODE teCurrentMode;   // Current Mode
    XB_teCTRL_MODE teLastMode;      // Last Mode
    XB_teGENERIC_STSPAIR teFaultFlag; // Fault Flag
    XB_teGENERIC_STSPAIR teFaultsChangedFlag; // Faults Changed Flag
    XB_teGENERIC_STSPAIR teWarnFlag; // Warning Flag
    XB_teGENERIC_STSPAIR teWarnsChangedFlag; // Warnings Changed Flag
} XB_tzPGN_STS;

// Inverter Statistics - AC
typedef struct zPGN_EXTRA_INV_STATS_AC
{
    XB_teAC_LINE teLine;            // Line
    uint32 ulCurrentMax;            // Highest AC Output Current
    uint32 ulVoltageMin;            // Lowest AC Output Voltage
    uint32 ulVoltageMax;            // Highest AC Output Voltage
} XB_tzPGN_EXTRA_INV_STATS_AC;

typedef struct zPGN_INV_STATS_AC
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiNumInvAcOutOL;         // Number of Inverter AC Output Over-loads
    uint16 uiNumTimesLoadSenseEngaged; // Number of Times Load Sense has been Engaged
    uint32 ulRealPwrMax;            // Highest Output Power
    uint32 ulTotalEnergyToday;      // Total Energy Delivered Today
    uint32 ulTotalEnergyLife;       // Total Energy Delivered Over the Lifetime
    uint16 uiTotalInvTimeToday;     // Total Invert Time Today
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INV_STATS_AC *ptzExtra;   // Extra structures
} XB_tzPGN_INV_STATS_AC;

// AGS Status
typedef struct zPGN_AGS_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teGEN_ID teGenId;            // Generator Identifier
    XB_teOP_STATE_AGS teOpState;    // Operating State
    XB_teGEN_STATE teGenState;      // Generator State
    XB_teGEN_ON_REASON teGenOnReason; // Generator 'On' Reason
    XB_teGEN_OFF_REASON teGenOffReason; // Generator 'Off' Reason
    XB_teGENERIC_STSPAIR teAgsGenSig; // AGS to Generator Signal
} XB_tzPGN_AGS_STS;

// System Identifier Status
typedef struct zPGN_SYS_ID_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint32 ulSysId;                 // System Identifier
} XB_tzPGN_SYS_ID_STS;

// Fault Log Status
typedef struct zPGN_EXTRA_FAULT_LOG_STS
{
    XB_teFLT_TYPE teFaultType;      // Fault Type
    XB_teFLT_ID teFaultId;          // Fault Identifier
    uint32 ulFaultTime;             // Fault Time
} XB_tzPGN_EXTRA_FAULT_LOG_STS;

typedef struct zPGN_FAULT_LOG_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_FAULT_LOG_STS *ptzExtra;   // Extra structures
} XB_tzPGN_FAULT_LOG_STS;

// Product Information Status
typedef struct zPGN_PROD_INFO_STS
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 aucModelName[ 16 ];      // Model Name
    uchar8 aucFga[ 12 ];            // Finished Goods Assembly
    uint32 ulPwrLvl;                // Power Level
    uint32 ulNomDcLvl;              // Nominal DC Level
    uint32 ulNomAcLvl;              // Nominal AC Level
    uint16 uiNomAcOutFreq;          // Nominal AC Output Frequency
} XB_tzPGN_PROD_INFO_STS;

// Battery Monitor - Battery Statistics
typedef struct zPGN_BATT_MON_BATT_STATS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uchar8 ucPeukertExponent;       // Peukert Exponent
    uint16 uiTimeToFull;            // Time to full
    uint16 uiTimeSinceFull;         // Time since full
    uint16 uiNumDischarges;         // Number of Discharges
    sint32 slLowestDcV;             // Lowest DC Voltage
    uint16 uiLowestAmpHr;           // Lowest Amp Hour
    uchar8 ucDeepestDischg;         // Deepest Discharge
    sint32 slHighestDcV;            // Highest DC Voltage
    uint16 uiHighestAmpHr;          // Highest Amp Hour
    uint32 ulHighestDcI;            // Highest DC Current
    uint16 uiAmpHrsRemain;          // Amp Hours Remaining
    uint32 ulWattHrsRemain;         // Watt Hours Remaining
    schar8 scChgEfficFactor;        // Charge Efficiency Factor
    uint16 uiChgEfficFactorAmpHrs;  // Charge Efficiency Factor - Amp Hours
    uint32 ulChgEfficFactorWattHrs; // Charge Efficiency Factor - Watt Hours
    uchar8 ucAvgDischg;             // Average Discharge
    uint16 uiAvgDischgTime;         // Average Discharge Time
    uint16 uiAvgChgTime;            // Average Charge Time
    uchar8 ucChgRemain;             // Charge Remaining
    uint16 uiChgEfficFactorRecalc;  // Charge Efficiency Factor Recalculations
    uint16 uiHighestTemp;           // Highest Temperature
    uint16 uiLowestTemp;            // Lowest Temperature
    sint16 siOverallAmpHrs;         // Overall Amp Hours In (+) or Out (-)
} XB_tzPGN_BATT_MON_BATT_STATS;

// AGS Status - Generator
typedef struct zPGN_AGS_STS_GEN
{
    uchar8 ucMsgCount;              // Message Count
    XB_teGEN_ID teGenId;            // Generator Identifier
    uint16 uiOilPress;              // Oil Pressure
    uint16 uiTemp;                  // Temperature
    uint32 ulBattV;                 // Battery Voltage
    uchar8 ucFuelLvl;               // Fuel Level
    uint16 uiFuelPress;             // Fuel Pressure
    uint16 uiEngineDiscreteWarnSts; // Engine Discrete Warning Status
} XB_tzPGN_AGS_STS_GEN;

// AGS Statistics - Generator
typedef struct zPGN_AGS_STATS_GEN
{
    uchar8 ucMsgCount;              // Message Count
    XB_teGEN_ID teGenId;            // Generator Identifier
    uint16 uiSuccStartCnt;          // Successful Starts Counter
    uint16 uiFailStartCnt;          // Failed Starts Counter
    uint16 uiTotalRunTime;          // Total Run Time
    uint16 uiPrevRunTime;           // Previous Run Time
    uint16 uiCurrRunTime;           // Current Run Time
} XB_tzPGN_AGS_STATS_GEN;

// Inverter Status
typedef struct zPGN_INV_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teOP_STATE_INV teOpState;    // Operating State
    XB_teGENERIC_STSPAIR teInvEnDis; // Inverter Enable/Disable
    XB_teGENERIC_STSPAIR teBattTempSensorPresent; // Battery Temperature Sensor Present
} XB_tzPGN_INV_STS;

// Charger Statistics - AC
typedef struct zPGN_EXTRA_CHG_STATS_AC
{
    XB_teAC_LINE teLine;            // Line
    uint16 uiFreqMin;               // Lowest AC Input Frequency
    uint16 uiFreqMax;               // Highest AC Input Frequency
    uint32 ulCurrentMax;            // Highest AC Input Current
    uint32 ulVoltageMin;            // Lowest AC Input Voltage
    uint32 ulVoltageMax;            // Highest AC Input Voltage
} XB_tzPGN_EXTRA_CHG_STATS_AC;

typedef struct zPGN_CHG_STATS_AC
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_CHG_STATS_AC *ptzExtra;   // Extra structures
} XB_tzPGN_CHG_STATS_AC;

// Battery Monitor Status
typedef struct zPGN_BATT_MON_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teOP_STATE_BATT_MON teOpState; // Operating State
} XB_tzPGN_BATT_MON_STS;

// User Interface Status
typedef struct zPGN_UI_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teOP_STATE_UI teOpState;     // Operating State
} XB_tzPGN_UI_STS;

// Inverter Statistics - DC
typedef struct zPGN_INV_STATS_DC
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiNumDcUvDetect;         // Number of DC Under Voltage Detections
    uint32 ulVoltageMin;            // Lowest DC Voltage
    uint32 ulVoltageMax;            // Highest DC Voltage
} XB_tzPGN_INV_STATS_DC;

// Inverter Statistics - Internal Temperature
typedef struct zPGN_EXTRA_INV_STATS_INT_TEMP
{
    XB_teINT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTempMax;               // Highest Recorded Temperature
} XB_tzPGN_EXTRA_INV_STATS_INT_TEMP;

typedef struct zPGN_INV_STATS_INT_TEMP
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INV_STATS_INT_TEMP *ptzExtra;   // Extra structures
} XB_tzPGN_INV_STATS_INT_TEMP;

// Inverter Statistics - External Temperature
typedef struct zPGN_EXTRA_INV_STATS_EXT_TEMP
{
    XB_teEXT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTempMin;               // Lowest Recorded Temperature
    uint16 uiTempMax;               // Highest Recorded Temperature
} XB_tzPGN_EXTRA_INV_STATS_EXT_TEMP;

typedef struct zPGN_INV_STATS_EXT_TEMP
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INV_STATS_EXT_TEMP *ptzExtra;   // Extra structures
} XB_tzPGN_INV_STATS_EXT_TEMP;

// Charger Statistics - DC
typedef struct zPGN_CHG_STATS_DC
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
} XB_tzPGN_CHG_STATS_DC;

// Charger Statistics - Internal Temperature
typedef struct zPGN_EXTRA_CHG_STATS_INT_TEMP
{
    XB_teINT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTempMax;               // Highest Recorded Temperature
} XB_tzPGN_EXTRA_CHG_STATS_INT_TEMP;

typedef struct zPGN_CHG_STATS_INT_TEMP
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_CHG_STATS_INT_TEMP *ptzExtra;   // Extra structures
} XB_tzPGN_CHG_STATS_INT_TEMP;

// Charger Statistics - External Temperature
typedef struct zPGN_EXTRA_CHG_STATS_EXT_TEMP
{
    XB_teEXT_TEMP_SENS_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTempMin;               // Lowest Recorded Temperature
    uint16 uiTempMax;               // Highest Recorded Temperature
} XB_tzPGN_EXTRA_CHG_STATS_EXT_TEMP;

typedef struct zPGN_CHG_STATS_EXT_TEMP
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_CHG_STATS_EXT_TEMP *ptzExtra;   // Extra structures
} XB_tzPGN_CHG_STATS_EXT_TEMP;

// Date and Time Status
typedef struct zPGN_DATE_TIME_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint32 ulCurTime;               // Time
    sint16 siLocalOffsetMins;       // Local Offset, Minutes
    XB_teDOW teLocalDow;            // Local Day of the Week
} XB_tzPGN_DATE_TIME_STS;

// Test 2
typedef struct zPGN_TEST2
{
    uchar8 ucByte0;                 // Byte 0
    uchar8 ucByte1;                 // Byte 1
    uchar8 ucByte2;                 // Byte 2
    uchar8 ucByte3;                 // Byte 3
    uchar8 ucByte4;                 // Byte 4
    uchar8 ucByte5;                 // Byte 5
    uchar8 ucByte6;                 // Byte 6
    uchar8 ucByte7;                 // Byte 7
} XB_tzPGN_TEST2;

// Active Faults Status
typedef struct zPGN_EXTRA_ACTIVE_FAULTS_STS
{
    XB_teFLT_TYPE teFaultType;      // Fault Type
    XB_teFLT_ID teFaultId;          // Fault Identifier
    uint32 ulFaultTime;             // Fault Time
} XB_tzPGN_EXTRA_ACTIVE_FAULTS_STS;

typedef struct zPGN_ACTIVE_FAULTS_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_ACTIVE_FAULTS_STS *ptzExtra;   // Extra structures
} XB_tzPGN_ACTIVE_FAULTS_STS;

// Warning Log Status
typedef struct zPGN_EXTRA_WARN_LOG_STS
{
    XB_teWRN_TYPE teWarnType;       // Warning Type
    XB_teWRN_ID teWarnId;           // Warning Identifier
    uint32 ulWarnTime;              // Warning Time
} XB_tzPGN_EXTRA_WARN_LOG_STS;

typedef struct zPGN_WARN_LOG_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_WARN_LOG_STS *ptzExtra;   // Extra structures
} XB_tzPGN_WARN_LOG_STS;

// Active Warnings Status
typedef struct zPGN_EXTRA_ACTIVE_WARNS_STS
{
    XB_teWRN_TYPE teWarnType;       // Warning Type
    XB_teWRN_ID teWarnId;           // Warning Identifier
    uint32 ulWarnTime;              // Warning Time
} XB_tzPGN_EXTRA_ACTIVE_WARNS_STS;

typedef struct zPGN_ACTIVE_WARNS_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_ACTIVE_WARNS_STS *ptzExtra;   // Extra structures
} XB_tzPGN_ACTIVE_WARNS_STS;

// Software Version Status
typedef struct zPGN_EXTRA_SW_VER_STS
{
    uchar8 ucProcessorInst;         // Controller or Processor Instance
    XB_teSW_MOD_ID teSwModId;       // Software Module Identifier
    uint32 ulSwVer;                 // Software Version
    uint16 uiSwBldNum;              // Software Build Number
} XB_tzPGN_EXTRA_SW_VER_STS;

typedef struct zPGN_SW_VER_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_SW_VER_STS *ptzExtra;   // Extra structures
} XB_tzPGN_SW_VER_STS;

// State/Event Log Status
typedef struct zPGN_EXTRA_STATE_EVT_LOG_STS
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teOP_STATE_ALL teStateId;    // State Identifier
    uint32 ulEvtTime;               // Event Time
} XB_tzPGN_EXTRA_STATE_EVT_LOG_STS;

typedef struct zPGN_STATE_EVT_LOG_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_STATE_EVT_LOG_STS *ptzExtra;   // Extra structures
} XB_tzPGN_STATE_EVT_LOG_STS;

// Hardware Revision Status
typedef struct zPGN_EXTRA_HW_REV_STS
{
    uchar8 ucHwModInst;             // Hardware Module Instance
    uint16 uiHwModRev;              // Hardware Module Revision
    uchar8 aucHwModSerNum[ 16 ];    // Hardware Module Serial Number
} XB_tzPGN_EXTRA_HW_REV_STS;

typedef struct zPGN_HW_REV_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiModelNum;              // Model Number
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_HW_REV_STS *ptzExtra;   // Extra structures
} XB_tzPGN_HW_REV_STS;


#endif
