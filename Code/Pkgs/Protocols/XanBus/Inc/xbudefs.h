/******************************************************************************

  (c) 2003 - 2018 Xantrex Canada ULC. All rights reserved.
  All trademarks are owned or licensed by Xantrex Canada ULC,
  its subsidiaries or affiliated companies.

****************************************************************************//**

  @addtogroup xbudefs xbudefs
  @{

    @brief 
      Definitions and types used by the application interfacing with XanBus.
      The file defines Parameter Group Numbers, the structures used by the
      application, and the enums used in many of the structure fields.


  @note
    - Autogenerated.

*******************************************************************************/
#ifndef XBUDEFS_H
#define XBUDEFS_H

#include "LIB_stddefs.h"

#include "pgnudefs.h"

#define XB_VER 10409L
#define XB_BUILD 960

/************************************************************************************
    The following defines the name for each PGN
************************************************************************************/

#define XB_PGN_AC_IN_CFG                  0x012600L
#define XB_PGN_AC_IN_CFG_OF               0x014E00L
#define XB_PGN_AC_IN_CFG_OV_AVG           0x010C00L
#define XB_PGN_AC_IN_CFG_OV_PEAK          0x010B00L
#define XB_PGN_AC_IN_CFG_OV_RMS           0x010A00L
#define XB_PGN_AC_IN_CFG_UF               0x014F00L
#define XB_PGN_AC_IN_CFG_UV_AVG           0x010900L
#define XB_PGN_AC_IN_CFG_UV_PEAK          0x010800L
#define XB_PGN_AC_IN_CFG_UV_RMS           0x010700L
#define XB_PGN_AC_IN_STS_AVG              0x01F005L
#define XB_PGN_AC_IN_STS_PEAK             0x01F004L
#define XB_PGN_AC_IN_STS_RMS              0x01F003L
#define XB_PGN_AC_LINE_CFG                0x016000L
#define XB_PGN_AC_OUT_CFG                 0x010600L
#define XB_PGN_AC_OUT_CFG_OV_RMS          0x015100L
#define XB_PGN_AC_OUT_CFG_UV_RMS          0x015200L
#define XB_PGN_AC_OUT_STS_AVG             0x01F008L
#define XB_PGN_AC_OUT_STS_PEAK            0x01F007L
#define XB_PGN_AC_OUT_STS_RMS             0x01F006L
#define XB_PGN_AC_STS_RMS                 0x01F016L
#define XB_PGN_ACTIVE_FAULT_STS           0x01F80BL
#define XB_PGN_ACTIVE_FAULT_STS2          0x01F8C6L
#define XB_PGN_ACTIVE_WARN_STS            0x01F80DL
#define XB_PGN_ACTIVE_WARN_STS2           0x01F8C5L
#define XB_PGN_AC_XFER_SW_CFG             0x01C400L
#define XB_PGN_AC_XFER_SW_STS             0x01F0BFL
#define XB_PGN_AGS_CFG                    0x012A00L
#define XB_PGN_AGS_CFG_AC_I               0x013E00L
#define XB_PGN_AGS_CFG_AC_PWR             0x015700L
#define XB_PGN_AGS_CFG_BATT_SOC           0x013D00L
#define XB_PGN_AGS_CFG_CNTCT_CLS          0x013F00L
#define XB_PGN_AGS_CFG_DC_I               0x015600L
#define XB_PGN_AGS_CFG_DC_V               0x013C00L
#define XB_PGN_AGS_CFG_GEN                0x012B00L
#define XB_PGN_AGS_CTRL_CMD               0x011F00L
#define XB_PGN_AGS_STATS_GEN              0x01F018L
#define XB_PGN_AGS_STS                    0x01F011L
#define XB_PGN_AGS_STS_GEN                0x01F017L
#define XB_PGN_APS_CFG_OV                 0x010E00L
#define XB_PGN_APS_CFG_UV                 0x010D00L
#define XB_PGN_APS_STS                    0x01F009L
#define XB_PGN_ASSOC_CFG                  0x012500L
#define XB_PGN_ASSOC_STS                  0x013600L
#define XB_PGN_BATT_MON_CFG               0x012900L
#define XB_PGN_BATT_MON_CFG_SYNC          0x016400L
#define XB_PGN_BATT_MON_CTRL_CMD          0x016900L
#define XB_PGN_BATT_MON_HIST              0x01F0CDL
#define XB_PGN_BATT_MON_STATS_BATT        0x01F015L
#define XB_PGN_BATT_MON_STS               0x01F01BL
#define XB_PGN_BATT_STS2                  0x01F0C4L
#define XB_PGN_BMS_CFG                    0x016300L
#define XB_PGN_BMS_STS                    0x01F029L
#define XB_PGN_CALIB_CMD                  0x011E00L
#define XB_PGN_CALIB_DATA_STS             0x01F026L
#define XB_PGN_CFG                        0x014700L
#define XB_PGN_CHG_CFG                    0x012C00L
#define XB_PGN_CHG_CFG_ABSORP             0x011800L
#define XB_PGN_CHG_CFG_BULK               0x011700L
#define XB_PGN_CHG_CFG_CV_CI              0x011C00L
#define XB_PGN_CHG_CFG_EQUALIZE           0x011B00L
#define XB_PGN_CHG_CFG_FLOAT              0x011A00L
#define XB_PGN_CHG_CFG_MULTIPLE_NODES     0x012700L
#define XB_PGN_CHG_CFG_OVERCHARGE         0x011900L
#define XB_PGN_CHG_CTRL_CMD               0x013500L
#define XB_PGN_CHG_CTRL_CMD2              0x01C800L
#define XB_PGN_CHG_STATS_AC               0x01F01AL
#define XB_PGN_CHG_STATS_AC2              0x01F0C0L
#define XB_PGN_CHG_STATS_BATT2            0x01F0BEL
#define XB_PGN_CHG_STATS_DC               0x01F021L
#define XB_PGN_CHG_STATS_DC2              0x01F0C1L
#define XB_PGN_CHG_STATS_EXT_TEMP         0x01F023L
#define XB_PGN_CHG_STATS_INT_TEMP         0x01F022L
#define XB_PGN_CHG_STS                    0x01F00EL
#define XB_PGN_CLEAR_CMD                  0x012800L
#define XB_PGN_COMM_STATS                 0x01F002L
#define XB_PGN_COMPLEX_REQ                0x01DE00L
#define XB_PGN_CTRL_CMD                   0x014000L
#define XB_PGN_CURVE_CFG                  0x016C00L
#define XB_PGN_CV_CI_CTRL_CMD             0x016700L
#define XB_PGN_DATE_TIME_CFG              0x014800L
#define XB_PGN_DATE_TIME_STS              0x01F809L
#define XB_PGN_DC_SRC_CFG_BATT            0x011D00L
#define XB_PGN_DC_SRC_CFG_OI              0x010400L
#define XB_PGN_DC_SRC_CFG_OV              0x010200L
#define XB_PGN_DC_SRC_CFG_PV_ARRAY        0x015300L
#define XB_PGN_DC_SRC_CFG_PV_ARRAY2       0x01C300L
#define XB_PGN_DC_SRC_CFG_RIP_OV_PEAK     0x010500L
#define XB_PGN_DC_SRC_CFG_UI              0x010300L
#define XB_PGN_DC_SRC_CFG_UV              0x010100L
#define XB_PGN_DC_SRC_STS                 0x01F001L
#define XB_PGN_DC_SRC_STS2                0x01F0C5L
#define XB_PGN_DEBUG_FP                   0x013900L
#define XB_PGN_DEV_PEEK_ADDR_REQ          0x012E00L
#define XB_PGN_DEV_PEEK_ADDR_RSP          0x012F00L
#define XB_PGN_DEV_POKE_ADDR              0x013000L
#define XB_PGN_DIAG_CNTCT_CMD             0x014B00L
#define XB_PGN_DIAG_CNTCT_STS             0x014C00L
#define XB_PGN_DIAG_FAN_CMD               0x014D00L
#define XB_PGN_DIAG_INDIC_CMD             0x014A00L
#define XB_PGN_DIAG_MFG_CFG               0x015000L
#define XB_PGN_EMS_CFG                    0x015E00L
#define XB_PGN_EMS_CKT_CFG                0x015F00L
#define XB_PGN_EMS_CKT_STS                0x01F028L
#define XB_PGN_EMS_STS                    0x01F027L
#define XB_PGN_EN_DIS_CFG                 0x013400L
#define XB_PGN_EN_DIS_CFG_TOD             0x01C100L
#define XB_PGN_EXT_TEMP_CFG_OT            0x011400L
#define XB_PGN_EXT_TEMP_CFG_UT            0x011300L
#define XB_PGN_EXT_TEMP_STATS2            0x01F0C7L
#define XB_PGN_EXT_TEMP_STS               0x01F00CL
#define XB_PGN_FAN_STATS                  0x01F0CCL
#define XB_PGN_FAN_STS                    0x01F0CBL
#define XB_PGN_FAULT_LOG_STS              0x01F013L
#define XB_PGN_FAULT_LOG_STS2             0x01F8C8L
#define XB_PGN_FEATURE_EN_DIS_CFG         0x014900L
#define XB_PGN_FILE_DNLD_BLK              0x013100L
#define XB_PGN_FILE_DNLD_INF              0x013200L
#define XB_PGN_FILE_DNLD_STS              0x013B00L
#define XB_PGN_GFS_CFG                    0x016100L
#define XB_PGN_GO_CFG_YOURSELF_CMD        0x01C200L
#define XB_PGN_GRID_INTERACTION_CFG       0x016D00L
#define XB_PGN_GRID_TIE_CFG               0x01C000L
#define XB_PGN_GRID_TIE_CFG_BATT_SOC      0x016B00L
#define XB_PGN_GRID_TIE_CTRL_CMD          0x016600L
#define XB_PGN_GVS_CFG                    0x016A00L
#define XB_PGN_GW_CFG                     0x015C00L
#define XB_PGN_GW_CFG_ADDR_TRANS_OTH_INTF    0x015B00L
#define XB_PGN_GW_CFG_ADDR_TRANS_XB_INTF    0x015800L
#define XB_PGN_GW_CFG_ID_TRANS            0x015D00L
#define XB_PGN_GW_CFG_MSG_FILTERS_OTH_INTF    0x015A00L
#define XB_PGN_GW_CFG_MSG_FILTERS_XB_INTF    0x015900L
#define XB_PGN_GW_STATS                   0x01F025L
#define XB_PGN_GW_STS                     0x01F024L
#define XB_PGN_HV_DC_BUS_CFG_OV           0x011200L
#define XB_PGN_HV_DC_BUS_CFG_UV           0x011100L
#define XB_PGN_HV_DC_BUS_STS              0x01F00BL
#define XB_PGN_HW_REV_STS                 0x01F810L
#define XB_PGN_INT_TEMP_CFG_OT            0x011600L
#define XB_PGN_INT_TEMP_CFG_UT            0x011500L
#define XB_PGN_INT_TEMP_STATS2            0x01F0C8L
#define XB_PGN_INT_TEMP_STS               0x01F00DL
#define XB_PGN_INV_CFG                    0x012200L
#define XB_PGN_INV_CFG_LOAD_SENSE         0x012100L
#define XB_PGN_INV_CTRL_CMD               0x013700L
#define XB_PGN_INV_STATS_AC               0x01F010L
#define XB_PGN_INV_STATS_AC2              0x01F0C2L
#define XB_PGN_INV_STATS_DC               0x01F01EL
#define XB_PGN_INV_STATS_DC2              0x01F0C3L
#define XB_PGN_INV_STATS_EXT_TEMP         0x01F020L
#define XB_PGN_INV_STATS_INT_TEMP         0x01F01FL
#define XB_PGN_INV_STS                    0x01F019L
#define XB_PGN_INV_STS2                   0x01F0BDL
#define XB_PGN_INV_STS_LOAD_SHARE_HS      0x01F01DL
#define XB_PGN_ISO_ACK                    0x00E800L
#define XB_PGN_ISO_ADDR_CLAIM             0x00EE00L
#define XB_PGN_ISO_CMD_ADDR               0x00FED8L
#define XB_PGN_ISO_REQ                    0x00EA00L
#define XB_PGN_ISO_TP_CONN_MAN            0x00EC00L
#define XB_PGN_ISO_TP_CONN_MAN            0x00EC00L
#define XB_PGN_ISO_TP_CONN_MAN            0x00EC00L
#define XB_PGN_ISO_TP_CONN_MAN            0x00EC00L
#define XB_PGN_ISO_TP_CONN_MAN            0x00EC00L
#define XB_PGN_ISO_TP_XFER                0x00EB00L
#define XB_PGN_MPPT_STS                   0x01F0C9L
#define XB_PGN_NAME_CFG                   0x013A00L
#define XB_PGN_OPS_CFG_OV                 0x011000L
#define XB_PGN_OPS_CFG_UV                 0x010F00L
#define XB_PGN_OPS_STS                    0x01F00AL
#define XB_PGN_PER_XMIT_CFG               0x012D00L
#define XB_PGN_PGN_LIST                   0x01EE00L
#define XB_PGN_PGN_LIST                   0x01EE00L
#define XB_PGN_PID_CFG                    0x01C900L
#define XB_PGN_PID_STS                    0x01F0CAL
#define XB_PGN_PROD_INFO_STS              0x01F014L
#define XB_PGN_PRODUCT_CFG                0x016E00L
#define XB_PGN_RESET_CMD                  0x012400L
#define XB_PGN_RMT_PROC_CALL_CMD          0x01DF00L
#define XB_PGN_RS485CFG                   0x016500L
#define XB_PGN_RVC_DC_SRC_STS4            0x01FEC9L
#define XB_PGN_RX_TO_CFG                  0x013300L
#define XB_PGN_SIMPLE_CALIB_CFG           0x013800L
#define XB_PGN_SPS_CFG                    0x01C600L
#define XB_PGN_SPS_CFG_BATT_SOC           0x016200L
#define XB_PGN_SPS_CFG_TRIG               0x01C700L
#define XB_PGN_SPS_CTRL_CMD               0x01C500L
#define XB_PGN_SPS_STS                    0x01F0C6L
#define XB_PGN_STATE_EVT_LOG_STS          0x01F80FL
#define XB_PGN_STATE_EVT_LOG_STS2         0x01F8C9L
#define XB_PGN_STRING_CFG                 0x01DD00L
#define XB_PGN_STS                        0x01F00FL
#define XB_PGN_SW_VER_STS                 0x01F80EL
#define XB_PGN_SYS_ID_CFG                 0x012300L
#define XB_PGN_SYS_ID_STS                 0x01F012L
#define XB_PGN_UI_CFG                     0x014100L
#define XB_PGN_UI_CFG_ASSOC_LBL           0x014400L
#define XB_PGN_UI_CFG_FAULT_BEHAVIOUR     0x015400L
#define XB_PGN_UI_CFG_FAULT_TXT           0x014500L
#define XB_PGN_UI_CFG_NODE_LBL            0x014300L
#define XB_PGN_UI_CFG_SPLASH_IMG          0x014200L
#define XB_PGN_UI_CFG_WARN_BEHAVIOUR      0x015500L
#define XB_PGN_UI_CFG_WARN_TXT            0x014600L
#define XB_PGN_UI_STS                     0x01F01CL
#define XB_PGN_WARN_LOG_STS               0x01F80CL
#define XB_PGN_WARN_LOG_STS2              0x01F8C7L

// Count of PGNs
#define XB_PGN_TOTAL_COUNT          204
#define XB_PGN_FASTPACKET_COUNT     144

/************************************************************************************
    The following defines give the length of each PGN in bytes
************************************************************************************/

#define XB_DLC_AC_IN_CFG                   45
#define XB_DLC_AC_IN_CFG_OF                 3
#define XB_DLC_EXTRA_AC_IN_CFG_OF          16
#define XB_DLC_AC_IN_CFG_OV_AVG             3
#define XB_DLC_EXTRA_AC_IN_CFG_OV_AVG      22
#define XB_DLC_AC_IN_CFG_OV_PEAK            3
#define XB_DLC_EXTRA_AC_IN_CFG_OV_PEAK     22
#define XB_DLC_AC_IN_CFG_OV_RMS             3
#define XB_DLC_EXTRA_AC_IN_CFG_OV_RMS      22
#define XB_DLC_AC_IN_CFG_UF                 3
#define XB_DLC_EXTRA_AC_IN_CFG_UF          16
#define XB_DLC_AC_IN_CFG_UV_AVG             3
#define XB_DLC_EXTRA_AC_IN_CFG_UV_AVG      22
#define XB_DLC_AC_IN_CFG_UV_PEAK            3
#define XB_DLC_EXTRA_AC_IN_CFG_UV_PEAK     22
#define XB_DLC_AC_IN_CFG_UV_RMS             3
#define XB_DLC_EXTRA_AC_IN_CFG_UV_RMS      22
#define XB_DLC_AC_IN_STS_AVG                2
#define XB_DLC_EXTRA_AC_IN_STS_AVG         22
#define XB_DLC_AC_IN_STS_PEAK               2
#define XB_DLC_EXTRA_AC_IN_STS_PEAK        22
#define XB_DLC_AC_IN_STS_RMS                2
#define XB_DLC_EXTRA_AC_IN_STS_RMS         22
#define XB_DLC_AC_LINE_CFG                  3
#define XB_DLC_EXTRA_AC_LINE_CFG            2
#define XB_DLC_AC_OUT_CFG                  39
#define XB_DLC_AC_OUT_CFG_OV_RMS            3
#define XB_DLC_EXTRA_AC_OUT_CFG_OV_RMS     22
#define XB_DLC_AC_OUT_CFG_UV_RMS            3
#define XB_DLC_EXTRA_AC_OUT_CFG_UV_RMS     22
#define XB_DLC_AC_OUT_STS_AVG               4
#define XB_DLC_EXTRA_AC_OUT_STS_AVG        23
#define XB_DLC_AC_OUT_STS_PEAK              4
#define XB_DLC_EXTRA_AC_OUT_STS_PEAK       23
#define XB_DLC_AC_OUT_STS_RMS               4
#define XB_DLC_EXTRA_AC_OUT_STS_RMS        23
#define XB_DLC_AC_STS_RMS                   3
#define XB_DLC_EXTRA_AC_STS_RMS            25
#define XB_DLC_ACTIVE_FAULT_STS             1
#define XB_DLC_EXTRA_ACTIVE_FAULT_STS       6
#define XB_DLC_ACTIVE_FAULT_STS2            1
#define XB_DLC_EXTRA_ACTIVE_FAULT_STS2      8
#define XB_DLC_ACTIVE_WARN_STS              1
#define XB_DLC_EXTRA_ACTIVE_WARN_STS        6
#define XB_DLC_ACTIVE_WARN_STS2             1
#define XB_DLC_EXTRA_ACTIVE_WARN_STS2       8
#define XB_DLC_AC_XFER_SW_CFG               3
#define XB_DLC_EXTRA_AC_XFER_SW_CFG         3
#define XB_DLC_AC_XFER_SW_STS               4
#define XB_DLC_AGS_CFG                     14
#define XB_DLC_EXTRA_AGS_CFG                1
#define XB_DLC_AGS_CFG_AC_I                28
#define XB_DLC_EXTRA_AGS_CFG_AC_I          11
#define XB_DLC_AGS_CFG_AC_PWR              28
#define XB_DLC_EXTRA_AGS_CFG_AC_PWR        11
#define XB_DLC_AGS_CFG_BATT_SOC            16
#define XB_DLC_EXTRA_AGS_CFG_BATT_SOC       8
#define XB_DLC_AGS_CFG_CNTCT_CLS           11
#define XB_DLC_EXTRA_AGS_CFG_CNTCT_CLS      9
#define XB_DLC_AGS_CFG_DC_I                28
#define XB_DLC_EXTRA_AGS_CFG_DC_I          11
#define XB_DLC_AGS_CFG_DC_V                28
#define XB_DLC_EXTRA_AGS_CFG_DC_V          11
#define XB_DLC_AGS_CFG_GEN                 92
#define XB_DLC_EXTRA_AGS_CFG_GEN            2
#define XB_DLC_AGS_CTRL_CMD                 2
#define XB_DLC_AGS_STATS_GEN               12
#define XB_DLC_AGS_STS                     10
#define XB_DLC_AGS_STS_GEN                 15
#define XB_DLC_APS_CFG_OV                   3
#define XB_DLC_EXTRA_APS_CFG_OV            22
#define XB_DLC_APS_CFG_UV                   3
#define XB_DLC_EXTRA_APS_CFG_UV            22
#define XB_DLC_APS_STS                     10
#define XB_DLC_ASSOC_CFG                    4
#define XB_DLC_ASSOC_STS                    3
#define XB_DLC_BATT_MON_CFG                28
#define XB_DLC_BATT_MON_CFG_SYNC           19
#define XB_DLC_BATT_MON_CTRL_CMD            2
#define XB_DLC_BATT_MON_HIST               24
#define XB_DLC_BATT_MON_STATS_BATT          2
#define XB_DLC_EXTRA_BATT_MON_STATS_BATT     66
#define XB_DLC_BATT_MON_STS                39
#define XB_DLC_BATT_STS2                   36
#define XB_DLC_BMS_CFG                     16
#define XB_DLC_BMS_STS                     30
#define XB_DLC_CALIB_CMD                    6
#define XB_DLC_CALIB_DATA_STS               8
#define XB_DLC_CFG                          7
#define XB_DLC_CHG_CFG                     10
#define XB_DLC_CHG_CFG_ABSORP              58
#define XB_DLC_CHG_CFG_BULK                52
#define XB_DLC_CHG_CFG_CV_CI               28
#define XB_DLC_CHG_CFG_EQUALIZE            53
#define XB_DLC_CHG_CFG_FLOAT               52
#define XB_DLC_CHG_CFG_MULTIPLE_NODES      32
#define XB_DLC_CHG_CFG_OVERCHARGE          34
#define XB_DLC_CHG_CTRL_CMD                 2
#define XB_DLC_CHG_CTRL_CMD2                3
#define XB_DLC_CHG_STATS_AC                 2
#define XB_DLC_EXTRA_CHG_STATS_AC          17
#define XB_DLC_CHG_STATS_AC2                2
#define XB_DLC_EXTRA_CHG_STATS_AC2         18
#define XB_DLC_CHG_STATS_BATT2              6
#define XB_DLC_EXTRA_CHG_STATS_BATT2       27
#define XB_DLC_CHG_STATS_DC                 2
#define XB_DLC_CHG_STATS_DC2                2
#define XB_DLC_EXTRA_CHG_STATS_DC2         19
#define XB_DLC_CHG_STATS_EXT_TEMP           1
#define XB_DLC_EXTRA_CHG_STATS_EXT_TEMP      5
#define XB_DLC_CHG_STATS_INT_TEMP           1
#define XB_DLC_EXTRA_CHG_STATS_INT_TEMP      3
#define XB_DLC_CHG_STS                     17
#define XB_DLC_CLEAR_CMD                    5
#define XB_DLC_COMM_STATS                  25
#define XB_DLC_COMPLEX_REQ                  3
#define XB_DLC_EXTRA_COMPLEX_REQ            5
#define XB_DLC_CTRL_CMD                     1
#define XB_DLC_CURVE_CFG                   21
#define XB_DLC_EXTRA_CURVE_CFG              8
#define XB_DLC_CV_CI_CTRL_CMD               5
#define XB_DLC_DATE_TIME_CFG                9
#define XB_DLC_DATE_TIME_STS                8
#define XB_DLC_DC_SRC_CFG_BATT             24
#define XB_DLC_DC_SRC_CFG_OI                3
#define XB_DLC_EXTRA_DC_SRC_CFG_OI         22
#define XB_DLC_DC_SRC_CFG_OV                3
#define XB_DLC_EXTRA_DC_SRC_CFG_OV         22
#define XB_DLC_DC_SRC_CFG_PV_ARRAY          7
#define XB_DLC_DC_SRC_CFG_PV_ARRAY2        19
#define XB_DLC_DC_SRC_CFG_RIP_OV_PEAK       3
#define XB_DLC_EXTRA_DC_SRC_CFG_RIP_OV_PEAK     22
#define XB_DLC_DC_SRC_CFG_UI                3
#define XB_DLC_EXTRA_DC_SRC_CFG_UI         22
#define XB_DLC_DC_SRC_CFG_UV                3
#define XB_DLC_EXTRA_DC_SRC_CFG_UV         22
#define XB_DLC_DC_SRC_STS                  24
#define XB_DLC_DC_SRC_STS2                 21
#define XB_DLC_DEBUG_FP                     0
#define XB_DLC_EXTRA_DEBUG_FP               1
#define XB_DLC_DEV_PEEK_ADDR_REQ            7
#define XB_DLC_DEV_PEEK_ADDR_RSP            7
#define XB_DLC_EXTRA_DEV_PEEK_ADDR_RSP      1
#define XB_DLC_DEV_POKE_ADDR                7
#define XB_DLC_EXTRA_DEV_POKE_ADDR          1
#define XB_DLC_DIAG_CNTCT_CMD               0
#define XB_DLC_EXTRA_DIAG_CNTCT_CMD         1
#define XB_DLC_DIAG_CNTCT_STS               1
#define XB_DLC_EXTRA_DIAG_CNTCT_STS         1
#define XB_DLC_DIAG_FAN_CMD                 0
#define XB_DLC_EXTRA_DIAG_FAN_CMD           2
#define XB_DLC_DIAG_INDIC_CMD               0
#define XB_DLC_EXTRA_DIAG_INDIC_CMD         1
#define XB_DLC_DIAG_MFG_CFG                 9
#define XB_DLC_EMS_CFG                     25
#define XB_DLC_EMS_CKT_CFG                 50
#define XB_DLC_EMS_CKT_STS                  1
#define XB_DLC_EXTRA_EMS_CKT_STS           10
#define XB_DLC_EMS_STS                      2
#define XB_DLC_EXTRA_EMS_STS                4
#define XB_DLC_EN_DIS_CFG                   3
#define XB_DLC_EN_DIS_CFG_TOD               2
#define XB_DLC_EXTRA_EN_DIS_CFG_TOD         6
#define XB_DLC_EXT_TEMP_CFG_OT              3
#define XB_DLC_EXTRA_EXT_TEMP_CFG_OT       22
#define XB_DLC_EXT_TEMP_CFG_UT              3
#define XB_DLC_EXTRA_EXT_TEMP_CFG_UT       22
#define XB_DLC_EXT_TEMP_STATS2              2
#define XB_DLC_EXTRA_EXT_TEMP_STATS2        5
#define XB_DLC_EXT_TEMP_STS                 4
#define XB_DLC_FAN_STATS                    1
#define XB_DLC_EXTRA_FAN_STATS              5
#define XB_DLC_FAN_STS                      1
#define XB_DLC_EXTRA_FAN_STS                2
#define XB_DLC_FAULT_LOG_STS                1
#define XB_DLC_EXTRA_FAULT_LOG_STS          6
#define XB_DLC_FAULT_LOG_STS2               1
#define XB_DLC_EXTRA_FAULT_LOG_STS2         8
#define XB_DLC_FEATURE_EN_DIS_CFG           2
#define XB_DLC_EXTRA_FEATURE_EN_DIS_CFG     18
#define XB_DLC_FILE_DNLD_BLK                4
#define XB_DLC_EXTRA_FILE_DNLD_BLK          1
#define XB_DLC_FILE_DNLD_INF               15
#define XB_DLC_FILE_DNLD_STS                8
#define XB_DLC_GFS_CFG                     58
#define XB_DLC_GO_CFG_YOURSELF_CMD          3
#define XB_DLC_GRID_INTERACTION_CFG        60
#define XB_DLC_GRID_TIE_CFG                72
#define XB_DLC_GRID_TIE_CFG_BATT_SOC       22
#define XB_DLC_GRID_TIE_CTRL_CMD            3
#define XB_DLC_GVS_CFG                     52
#define XB_DLC_GW_CFG                       3
#define XB_DLC_GW_CFG_ADDR_TRANS_OTH_INTF      2
#define XB_DLC_EXTRA_GW_CFG_ADDR_TRANS_OTH_INTF      8
#define XB_DLC_GW_CFG_ADDR_TRANS_XB_INTF      2
#define XB_DLC_EXTRA_GW_CFG_ADDR_TRANS_XB_INTF     10
#define XB_DLC_GW_CFG_ID_TRANS              2
#define XB_DLC_EXTRA_GW_CFG_ID_TRANS        3
#define XB_DLC_GW_CFG_MSG_FILTERS_OTH_INTF      2
#define XB_DLC_EXTRA_GW_CFG_MSG_FILTERS_OTH_INTF      4
#define XB_DLC_GW_CFG_MSG_FILTERS_XB_INTF      2
#define XB_DLC_EXTRA_GW_CFG_MSG_FILTERS_XB_INTF      4
#define XB_DLC_GW_STATS                     1
#define XB_DLC_GW_STS                       3
#define XB_DLC_HV_DC_BUS_CFG_OV             3
#define XB_DLC_EXTRA_HV_DC_BUS_CFG_OV      22
#define XB_DLC_HV_DC_BUS_CFG_UV             3
#define XB_DLC_EXTRA_HV_DC_BUS_CFG_UV      22
#define XB_DLC_HV_DC_BUS_STS               10
#define XB_DLC_HW_REV_STS                   3
#define XB_DLC_EXTRA_HW_REV_STS            19
#define XB_DLC_INT_TEMP_CFG_OT              3
#define XB_DLC_EXTRA_INT_TEMP_CFG_OT       22
#define XB_DLC_INT_TEMP_CFG_UT              3
#define XB_DLC_EXTRA_INT_TEMP_CFG_UT       22
#define XB_DLC_INT_TEMP_STATS2              2
#define XB_DLC_EXTRA_INT_TEMP_STATS2        5
#define XB_DLC_INT_TEMP_STS                 4
#define XB_DLC_INV_CFG                      6
#define XB_DLC_INV_CFG_LOAD_SENSE          15
#define XB_DLC_INV_CTRL_CMD                 2
#define XB_DLC_INV_STATS_AC                21
#define XB_DLC_EXTRA_INV_STATS_AC          13
#define XB_DLC_INV_STATS_AC2                2
#define XB_DLC_EXTRA_INV_STATS_AC2         26
#define XB_DLC_INV_STATS_DC                12
#define XB_DLC_INV_STATS_DC2                2
#define XB_DLC_EXTRA_INV_STATS_DC2         19
#define XB_DLC_INV_STATS_EXT_TEMP           1
#define XB_DLC_EXTRA_INV_STATS_EXT_TEMP      5
#define XB_DLC_INV_STATS_INT_TEMP           1
#define XB_DLC_EXTRA_INV_STATS_INT_TEMP      3
#define XB_DLC_INV_STS                      5
#define XB_DLC_INV_STS2                     8
#define XB_DLC_INV_STS_LOAD_SHARE_HS        4
#define XB_DLC_ISO_ACK                      8
#define XB_DLC_ISO_ADDR_CLAIM               8
#define XB_DLC_ISO_CMD_ADDR                 9
#define XB_DLC_ISO_REQ                      3
#define XB_DLC_ISO_TP_CONN_MAN_ABORT        8
#define XB_DLC_ISO_TP_CONN_MAN_BAM          8
#define XB_DLC_ISO_TP_CONN_MAN_CTS          8
#define XB_DLC_ISO_TP_CONN_MAN_EOM          8
#define XB_DLC_ISO_TP_CONN_MAN_RTS          8
#define XB_DLC_ISO_TP_XFER                  8
#define XB_DLC_MPPT_STS                     2
#define XB_DLC_NAME_CFG                    10
#define XB_DLC_OPS_CFG_OV                   3
#define XB_DLC_EXTRA_OPS_CFG_OV            22
#define XB_DLC_OPS_CFG_UV                   3
#define XB_DLC_EXTRA_OPS_CFG_UV            22
#define XB_DLC_OPS_STS                     10
#define XB_DLC_PER_XMIT_CFG                 2
#define XB_DLC_EXTRA_PER_XMIT_CFG           6
#define XB_DLC_PGN_LIST_RX                  1
#define XB_DLC_EXTRA_PGN_LIST_RX            3
#define XB_DLC_PGN_LIST_TX                  1
#define XB_DLC_EXTRA_PGN_LIST_TX            3
#define XB_DLC_PID_CFG                     32
#define XB_DLC_PID_STS                      1
#define XB_DLC_EXTRA_PID_STS               41
#define XB_DLC_PROD_INFO_STS               43
#define XB_DLC_PRODUCT_CFG                  8
#define XB_DLC_RESET_CMD                    2
#define XB_DLC_RMT_PROC_CALL_CMD            0
#define XB_DLC_EXTRA_RMT_PROC_CALL_CMD      8
#define XB_DLC_RS485CFG                     5
#define XB_DLC_RVC_DC_SRC_STS4              8
#define XB_DLC_RX_TO_CFG                    2
#define XB_DLC_EXTRA_RX_TO_CFG              5
#define XB_DLC_SIMPLE_CALIB_CFG            13
#define XB_DLC_SPS_CFG                     28
#define XB_DLC_SPS_CFG_BATT_SOC            22
#define XB_DLC_SPS_CFG_TRIG                 3
#define XB_DLC_EXTRA_SPS_CFG_TRIG           3
#define XB_DLC_SPS_CTRL_CMD                 2
#define XB_DLC_SPS_STS                     14
#define XB_DLC_STATE_EVT_LOG_STS            1
#define XB_DLC_EXTRA_STATE_EVT_LOG_STS      8
#define XB_DLC_STATE_EVT_LOG_STS2           1
#define XB_DLC_EXTRA_STATE_EVT_LOG_STS2     10
#define XB_DLC_STRING_CFG                   5
#define XB_DLC_EXTRA_STRING_CFG             1
#define XB_DLC_STS                          6
#define XB_DLC_SW_VER_STS                   1
#define XB_DLC_EXTRA_SW_VER_STS             8
#define XB_DLC_SYS_ID_CFG                   5
#define XB_DLC_SYS_ID_STS                   5
#define XB_DLC_UI_CFG                      17
#define XB_DLC_UI_CFG_ASSOC_LBL             2
#define XB_DLC_EXTRA_UI_CFG_ASSOC_LBL      18
#define XB_DLC_UI_CFG_FAULT_BEHAVIOUR       2
#define XB_DLC_EXTRA_UI_CFG_FAULT_BEHAVIOUR      2
#define XB_DLC_UI_CFG_FAULT_TXT             2
#define XB_DLC_EXTRA_UI_CFG_FAULT_TXT      34
#define XB_DLC_UI_CFG_NODE_LBL              2
#define XB_DLC_EXTRA_UI_CFG_NODE_LBL       20
#define XB_DLC_UI_CFG_SPLASH_IMG            5
#define XB_DLC_EXTRA_UI_CFG_SPLASH_IMG      1
#define XB_DLC_UI_CFG_WARN_BEHAVIOUR        2
#define XB_DLC_EXTRA_UI_CFG_WARN_BEHAVIOUR      2
#define XB_DLC_UI_CFG_WARN_TXT              2
#define XB_DLC_EXTRA_UI_CFG_WARN_TXT       34
#define XB_DLC_UI_STS                       3
#define XB_DLC_WARN_LOG_STS                 1
#define XB_DLC_EXTRA_WARN_LOG_STS           6
#define XB_DLC_WARN_LOG_STS2                1
#define XB_DLC_EXTRA_WARN_LOG_STS2          8

/************************************************************************************
    Enums used for some message fields
************************************************************************************/

// Curve Identifier
// Used in the following fields:
//   XB_tzPGN_CURVE_CFG.eCurveId
typedef enum XB_eCURVE_ID
{
    XB_eCURVE_ID_LOW_FREQUENCYRIDETHRU  = 257,
    XB_eCURVE_ID_HIGH_FREQUENCYRIDETHRU = 258,
    XB_eCURVE_ID_LOW_VOLTAGERIDETHRU    = 513,
    XB_eCURVE_ID_HIGH_VOLTAGERIDETHRU   = 514,
    XB_eCURVE_ID_FREQUENCY_WATT         = 769,
    XB_eCURVE_ID_DYNAMIC_VOLT_V_AR      = 1025,
    XB_eCURVE_ID_ACTIVE_POWER_REACTIVEPOWER = 1281
} XB_teCURVE_ID;

// Region Code
// Used in the following fields:
//   XB_tzPGN_PRODUCT_CFG.eRegionCode
typedef enum XB_eREGION_CODE
{
    XB_eREGION_CODE_NOT_DEFINED         =   0,
    XB_eREGION_CODE_RULE21              =   1,
    XB_eREGION_CODE_PREPA               =   2,
    XB_eREGION_CODE_HECO                =   3,
    XB_eREGION_CODE_IEEE1547            =   4,
    XB_eREGION_CODE_AS4777              =   5,
    XB_eREGION_CODE_NO_DATA             = 255
} XB_teREGION_CODE;

// Charge State RVC
// Used in the following fields:
//   XB_tzPGN_RVC_DC_SRC_STS4.eDesChgState
typedef enum XB_eCHG_STATE_RVC
{
    XB_eCHG_STATE_RVC_UNDEFINED         =   0,
    XB_eCHG_STATE_RVC_DO_NOT_CHARGE     =   1,
    XB_eCHG_STATE_RVC_BULK              =   2,
    XB_eCHG_STATE_RVC_ABSORPTION        =   3,
    XB_eCHG_STATE_RVC_OVERCHARGE        =   4,
    XB_eCHG_STATE_RVC_EQUALIZE          =   5,
    XB_eCHG_STATE_RVC_FLOAT             =   6,
    XB_eCHG_STATE_RVC_CONSTANT_VOLTAGE  =   7
} XB_teCHG_STATE_RVC;

// Battery Type RVC
// Used in the following fields:
//   XB_tzPGN_RVC_DC_SRC_STS4.eBattType
typedef enum XB_eBATT_TYPE_RVC
{
    XB_eBATT_TYPE_RVC_FLOODED           =   0,
    XB_eBATT_TYPE_RVC_GEL               =   1,
    XB_eBATT_TYPE_RVC_AGM               =   2,
    XB_eBATT_TYPE_RVC_LITHIUM_IRON_PHOSPHATE =   3
} XB_teBATT_TYPE_RVC;

// Mppt Mode
// Used in the following fields:
//   XB_tzPGN_MPPT_STS.eMpptMode
typedef enum XB_eMPPT_MODE
{
    XB_eMPPT_MODE_NOT_AVAILABLE         =   0,
    XB_eMPPT_MODE_MPPT                  =   1,
    XB_eMPPT_MODE_CONSTANT_CURRENT      =   2,
    XB_eMPPT_MODE_CONSTANT_VOLTAGE      =   3,
    XB_eMPPT_MODE_CONSTANT_POWER        =   4
} XB_teMPPT_MODE;

// Character Type
// Used in the following fields:
//   XB_tzPGN_STRING_CFG.eCharType
typedef enum XB_eCHARACTER_TYPE
{
    XB_eCHARACTER_TYPE_UNICODE          =   0,
    XB_eCHARACTER_TYPE_ASCII            =   1
} XB_teCHARACTER_TYPE;

// Operating State, AC Transfer Switch
// Used in the following fields:
//   XB_tzPGN_AC_XFER_SW_STS.eOpState
typedef enum XB_eOP_STATE_AC_XFR_SWITCH
{
    XB_eOP_STATE_AC_XFR_SWITCH_INACTIVE = 800,
    XB_eOP_STATE_AC_XFR_SWITCH_INPUT1ACTIVE = 801,
    XB_eOP_STATE_AC_XFR_SWITCH_INPUT2ACTIVE = 802,
    XB_eOP_STATE_AC_XFR_SWITCH_INPUT1DELAY = 803,
    XB_eOP_STATE_AC_XFR_SWITCH_INPUT2DELAY = 804
} XB_teOP_STATE_AC_XFR_SWITCH;

// Secondary Power Supply Desired State
// Used in the following fields:
//   XB_tzPGN_SPS_CTRL_CMD.eDesiredState
typedef enum XB_eSECONDARY_PWR_SUPPLY_DESIRED_STATE
{
    XB_eSECONDARY_PWR_SUPPLY_DESIRED_STATE_MANUAL_OFF =   0,
    XB_eSECONDARY_PWR_SUPPLY_DESIRED_STATE_MANUAL_ON =   1,
    XB_eSECONDARY_PWR_SUPPLY_DESIRED_STATE_AUTOMATIC =   2
} XB_teSECONDARY_PWR_SUPPLY_DESIRED_STATE;

// Secondary Power Supply Active Level
// Used in the following fields:
//   XB_tzPGN_SPS_CFG.eActiveLevel
typedef enum XB_eSECONDARY_PWR_SUPPLY_ACTIVE_LVL
{
    XB_eSECONDARY_PWR_SUPPLY_ACTIVE_LVL_ACTIVE_LOW =   0,
    XB_eSECONDARY_PWR_SUPPLY_ACTIVE_LVL_ACTIVE_HIGH =   1,
    XB_eSECONDARY_PWR_SUPPLY_ACTIVE_LVL_DATA_NOT_SUPPORTED =   2
} XB_teSECONDARY_PWR_SUPPLY_ACTIVE_LVL;

// Industry Group
// Used in the following fields:
//   XB_tzPGN_ISO_ADDR_CLAIM.eIndustryGroup
//   XB_tzPGN_ISO_CMD_ADDR.eIndustryGroup
//   XB_tzPGN_NAME_CFG.eIndustryGroup
typedef enum XB_eINDUSTRY_GRP
{
    XB_eINDUSTRY_GRP_ALL                =   0,
    XB_eINDUSTRY_GRP_ON_HIGHWAY         =   1,
    XB_eINDUSTRY_GRP_AGRICULTURE        =   2,
    XB_eINDUSTRY_GRP_CONSTRUCTION       =   3,
    XB_eINDUSTRY_GRP_MARINE             =   4,
    XB_eINDUSTRY_GRP_INDUSTRIAL         =   5,
    XB_eINDUSTRY_GRP_RESERVED1          =   6,
    XB_eINDUSTRY_GRP_RESERVED2          =   7
} XB_teINDUSTRY_GRP;

// ACK Status
// Used in the following fields:
//   XB_tzPGN_ISO_ACK.eCtrlByte
typedef enum XB_eACK_STS
{
    XB_eACK_STS_ACK                     =   0,
    XB_eACK_STS_NAK                     =   1,
    XB_eACK_STS_DNY                     =   2
} XB_teACK_STS;

// Group Function Value
// Used in the following fields:
//   XB_tzPGN_ISO_ACK.eGroupFunctionValue
typedef enum XB_eGRP_FUNC_VALUE
{
    XB_eGRP_FUNC_VALUE_DO_NOT_CARE      =  -1,
    XB_eGRP_FUNC_VALUE_UNSUPPORTED      = 241,
    XB_eGRP_FUNC_VALUE_NOT_AVAILABLE    = 242,
    XB_eGRP_FUNC_VALUE_DATA_ACCESS_ERROR = 243,
    XB_eGRP_FUNC_VALUE_DATA_NOT_AVAILABLE = 244,
    XB_eGRP_FUNC_VALUE_DATA_INVALID     = 245,
    XB_eGRP_FUNC_VALUE_DLC_INVALID      = 246,
    XB_eGRP_FUNC_VALUE_MESSAGE_COUNT    = 247,
    XB_eGRP_FUNC_VALUE_CAC              = 248,
    XB_eGRP_FUNC_VALUE_CONFIGURATION_TYPE = 249,
    XB_eGRP_FUNC_VALUE_PROTOCOL         = 250,
    XB_eGRP_FUNC_VALUE_SECURITY         = 251,
    XB_eGRP_FUNC_VALUE_WRONG_MODE       = 252,
    XB_eGRP_FUNC_VALUE_MEMORY_ERROR     = 253
} XB_teGRP_FUNC_VALUE;

// Function Code
// Used in the following fields:
//   XB_tzPGN_GW_CFG_ADDR_TRANS_OTH_INTF.eOthDeviceFunction
//   XB_tzPGN_GW_CFG_ADDR_TRANS_OTH_INTF.eXbDeviceFunction
//   XB_tzPGN_ISO_ADDR_CLAIM.eDeviceFunction
//   XB_tzPGN_ISO_CMD_ADDR.eDeviceFunction
//   XB_tzPGN_FILE_DNLD_INF.eDeviceFunction
//   XB_tzPGN_NAME_CFG.eDeviceFunction
//   XB_tzPGN_GW_CFG_ADDR_TRANS_XB_INTF.eXbDeviceFunction
//   XB_tzPGN_GW_CFG_ADDR_TRANS_XB_INTF.eOthDeviceFunction
//   XB_tzPGN_UI_CFG_NODE_LBL.eDeviceFunction
typedef enum XB_eFUNC_CODE
{
    XB_eFUNC_CODE_USER_INTERFACE        = 128,
    XB_eFUNC_CODE_INVERTER_CHARGER      = 129,
    XB_eFUNC_CODE_INVERTER              = 130,
    XB_eFUNC_CODE_CHARGER               = 131,
    XB_eFUNC_CODE_BATTERY_MONITOR       = 132,
    XB_eFUNC_CODE_AGS                   = 133,
    XB_eFUNC_CODE_DIAGNOSTIC_TERMINAL   = 134,
    XB_eFUNC_CODE_GATEWAY               = 135,
    XB_eFUNC_CODE_ENERGY_MANAGEMENT_SYSTEM = 136,
    XB_eFUNC_CODE_BATTERY_MANAGEMENT_SYSTEM = 137
} XB_teFUNC_CODE;

// Device Class
// Used in the following fields:
//   XB_tzPGN_GW_CFG_ADDR_TRANS_OTH_INTF.eOthDeviceClass
//   XB_tzPGN_GW_CFG_ADDR_TRANS_OTH_INTF.eXbDeviceClass
//   XB_tzPGN_ISO_ADDR_CLAIM.eDeviceClass
//   XB_tzPGN_ISO_CMD_ADDR.eDeviceClass
//   XB_tzPGN_NAME_CFG.eDeviceClass
//   XB_tzPGN_GW_CFG_ADDR_TRANS_XB_INTF.eXbDeviceClass
//   XB_tzPGN_GW_CFG_ADDR_TRANS_XB_INTF.eOthDeviceClass
//   XB_tzPGN_UI_CFG_NODE_LBL.eDeviceClass
typedef enum XB_eDEVICE_CLASS
{
    XB_eDEVICE_CLASS_POWER_MANAGEMENT   =  30
} XB_teDEVICE_CLASS;

// Command Pair
// Used in the following fields:
//   XB_tzPGN_GRID_INTERACTION_CFG.ePowerFactorEnDis
//   XB_tzPGN_CURVE_CFG.eCurveEnDis
//   XB_tzPGN_GRID_INTERACTION_CFG.eSellEnDis
//   XB_tzPGN_AGS_CFG_AC_I.eStartStop
//   XB_tzPGN_AGS_CFG_BATT_SOC.eStartStop
//   XB_tzPGN_AGS_CFG_AC_PWR.eStartStop
//   XB_tzPGN_INV_CTRL_CMD.eInvEnDis
//   XB_tzPGN_INV_CTRL_CMD.eSellToGridEnDis
//   XB_tzPGN_INV_CTRL_CMD.eForceSell
//   XB_tzPGN_CHG_CTRL_CMD2.eChgEnDis
//   XB_tzPGN_CHG_CTRL_CMD.eChgEnDis
//   XB_tzPGN_GFS_CFG.eGfsEnDis
//   XB_tzPGN_CHG_CFG_EQUALIZE.eEqlzSuppEnDis
//   XB_tzPGN_INV_CFG.eLoadSenseEnDis
//   XB_tzPGN_AGS_CFG.eQtEnDis
//   XB_tzPGN_AGS_CFG.eDcVAutoStartEnDis
//   XB_tzPGN_AGS_CFG.eDcVAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eDcIAutoStartEnDis
//   XB_tzPGN_AGS_CFG.eDcIAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eBattSocAutoStartEnDis
//   XB_tzPGN_AGS_CFG.eBattSocAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eAcIAutoStartEnDis
//   XB_tzPGN_AGS_CFG.eAcIAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eAcPwrAutoStartEnDis
//   XB_tzPGN_AGS_CFG.eAcPwrAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eAbsorpAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eFloatAutoStopEnDis
//   XB_tzPGN_AGS_CFG.eCntctClsAutoEnDis
//   XB_tzPGN_INV_STS2.eForceSell
//   XB_tzPGN_EN_DIS_CFG.ePerTxEnDis
//   XB_tzPGN_EN_DIS_CFG.eIdentEnDis
//   XB_tzPGN_GRID_TIE_CFG.eGridTieEnDis
//   XB_tzPGN_AGS_CFG_DC_V.eStartStop
//   XB_tzPGN_UI_CFG.eSplashOnWakeEnDis
//   XB_tzPGN_UI_CFG.eSndEnDis
//   XB_tzPGN_UI_CFG.eBtnSndEnDis
//   XB_tzPGN_UI_CFG.eFaultSndEnDis
//   XB_tzPGN_UI_CFG.eWarnSndEnDis
//   XB_tzPGN_DIAG_INDIC_CMD.eIndicState
//   XB_tzPGN_CHG_CFG.eEqlzOneTimeEnDis
//   XB_tzPGN_CHG_CFG.eOverChgEnDis
//   XB_tzPGN_CHG_CFG.eChgOverrideEnDis
//   XB_tzPGN_CALIB_CMD.eCalibEnDis
//   XB_tzPGN_DC_SRC_CFG_PV_ARRAY.eMpptEnDis
//   XB_tzPGN_AGS_CFG_DC_I.eStartStop
//   XB_tzPGN_DIAG_CNTCT_CMD.eCntctState
//   XB_tzPGN_DC_SRC_CFG_PV_ARRAY2.eMpptEnDis
//   XB_tzPGN_PID_CFG.eLoopEnDis
//   XB_tzPGN_CFG.eFaultAutoRst
//   XB_tzPGN_FEATURE_EN_DIS_CFG.eFeatureEnDis
//   XB_tzPGN_EMS_CKT_CFG.eEnDisCircuit
//   XB_tzPGN_EMS_CKT_STS.eEnDisSts
//   XB_tzPGN_EMS_CFG.eBreakerDeratingEnDis
//   XB_tzPGN_EMS_STS.eRequestAcDisqualify
//   XB_tzPGN_BATT_MON_CFG.eSetupLock
//   XB_tzPGN_BATT_MON_CTRL_CMD.eSyncEnDis
//   XB_tzPGN_GVS_CFG.eGvsEnDis
//   XB_tzPGN_GRID_TIE_CFG_BATT_SOC.eGridTieSocEnDis
typedef enum XB_eCMD_PAIR
{
    XB_eCMD_PAIR_OFF                    =   0,
    XB_eCMD_PAIR_ON                     =   1,
    XB_eCMD_PAIR_RESERVED               =   2,
    XB_eCMD_PAIR_NO_CHANGE              =   3
} XB_teCMD_PAIR;

// Generic Status Pair
// Used in the following fields:
//   XB_tzPGN_DC_SRC_STS2.eDeratingSts
//   XB_tzPGN_GW_CFG_MSG_FILTERS_XB_INTF.eAllowedEnDis
//   XB_tzPGN_AC_OUT_STS_RMS.eTotalFlag
//   XB_tzPGN_AC_OUT_STS_PEAK.eTotalFlag
//   XB_tzPGN_AC_OUT_STS_AVG.eTotalFlag
//   XB_tzPGN_CHG_STS.eChgEnDis
//   XB_tzPGN_CHG_STS.eBattTempSensorPresent
//   XB_tzPGN_CHG_STS.eEqlzPending
//   XB_tzPGN_STS.ePerTxEnDis
//   XB_tzPGN_STS.eNewFaultsFlag
//   XB_tzPGN_STS.eNewWarnsFlag
//   XB_tzPGN_STS.eFaultFlag
//   XB_tzPGN_STS.eFaultsChangedFlag
//   XB_tzPGN_STS.eWarnFlag
//   XB_tzPGN_STS.eWarnsChangedFlag
//   XB_tzPGN_INV_STS.eInvEnDis
//   XB_tzPGN_INV_STS.eSellToGridEnDis
//   XB_tzPGN_INV_STS.eBattTempSensorPresent
//   XB_tzPGN_AGS_STS.eAgsGenSig
//   XB_tzPGN_INV_STATS_AC.eTotalFlag
//   XB_tzPGN_GRID_TIE_CFG.eAntiIslandingEnDis
//   XB_tzPGN_GRID_TIE_CFG.ePeakLoadShavingEnDis
//   XB_tzPGN_DIAG_CNTCT_STS.eCntctState
//   XB_tzPGN_GW_CFG_MSG_FILTERS_OTH_INTF.eAllowedEnDis
//   XB_tzPGN_INV_STS2.eInvEnDis
//   XB_tzPGN_INV_STS2.eBattTempSensorPresent
//   XB_tzPGN_INV_STS2.eSellToGridEnDis
//   XB_tzPGN_INV_STS2.ePeakLoadShavingEnDis
//   XB_tzPGN_INV_STS2.eAntiIslandingEnDis
//   XB_tzPGN_INV_STS2.eGridEnDis
//   XB_tzPGN_SPS_CFG_TRIG.eTrigEnDis
//   XB_tzPGN_AC_STS_RMS.eTotalFlag
//   XB_tzPGN_BATT_MON_STS.eBtsPresent
typedef enum XB_eGENERIC_STS_PAIR
{
    XB_eGENERIC_STS_PAIR_OFF            =   0,
    XB_eGENERIC_STS_PAIR_ON             =   1,
    XB_eGENERIC_STS_PAIR_ERROR          =   2,
    XB_eGENERIC_STS_PAIR_UNKNOWN        =   3
} XB_teGENERIC_STS_PAIR;

// Warning Identifier
// Used in the following fields:
//   XB_tzPGN_UI_CFG_WARN_TXT.eWarnId
//   XB_tzPGN_WARN_LOG_STS.eWarnId
//   XB_tzPGN_WARN_LOG_STS2.eWarnId
//   XB_tzPGN_CLEAR_CMD.eWarnId
//   XB_tzPGN_ACTIVE_WARN_STS.eWarnId
//   XB_tzPGN_UI_CFG_WARN_BEHAVIOUR.eWarnId
//   XB_tzPGN_ACTIVE_WARN_STS2.eWarnId
typedef enum XB_eWRN_ID
{
    XB_eWRN_ID_TRANSISTOR_OVER_TEMPERATURE_WARNING1 =   0,
    XB_eWRN_ID_TRANSISTOR_OVER_TEMPERATURE_WARNING2 =   1,
    XB_eWRN_ID_CAPACITOR_OVER_TEMPERATURE_WARNING1 =   2,
    XB_eWRN_ID_TRANSFORMER_OVER_TEMPERATURE_WARNING1 =   3,
    XB_eWRN_ID_BATTERY_OVER_TEMPERATURE_WARNING1 =   4,
    XB_eWRN_ID_AMBIENT_OVER_TEMPERATURE_WARNING1 =   5,
    XB_eWRN_ID_AC_OUTPUT_OVERLOAD_WARNING =   6,
    XB_eWRN_ID_AUTO_RESTART_AFTER_FAULT_ENABLED_WARNING =   7,
    XB_eWRN_ID_BATTERY_SENSOR_NOT_PRESENT_WARNING =   9,
    XB_eWRN_ID_BATTERY_SENSOR_SHORT_WARNING =  10,
    XB_eWRN_ID_DC_OVER_VOLTAGE_WARNING1 =  11,
    XB_eWRN_ID_DC_UNDER_VOLTAGE_WARNING1 =  12,
    XB_eWRN_ID_AC_LINE1INPUT_OVER_VOLTAGE_WARNING =  13,
    XB_eWRN_ID_AC_LINE1INPUT_UNDER_VOLTAGE_WARNING =  14,
    XB_eWRN_ID_AC_LINE2INPUT_OVER_VOLTAGE_WARNING =  15,
    XB_eWRN_ID_AC_LINE2INPUT_UNDER_VOLTAGE_WARNING =  16,
    XB_eWRN_ID_CANNOT_EQUALIZE          =  18,
    XB_eWRN_ID_EQUALIZATION_TERMINATED_ABNORMALLY =  19,
    XB_eWRN_ID_AC_OUTPUT_OVER_VOLTAGE_WARNING1 =  20,
    XB_eWRN_ID_AC_OUTPUT_UNDER_VOLTAGE_WARNING1 =  21,
    XB_eWRN_ID_AC_OUTPUT_OVER_VOLTAGE_WARNING2 =  22,
    XB_eWRN_ID_AC_OUTPUT_UNDER_VOLTAGE_WARNING2 =  23,
    XB_eWRN_ID_GENERATOR_LINE1INPUT_OVER_VOLTAGE_WARNING =  24,
    XB_eWRN_ID_GENERATOR_LINE1INPUT_UNDER_VOLTAGE_WARNING =  25,
    XB_eWRN_ID_GENERATOR_LINE2INPUT_OVER_VOLTAGE_WARNING =  26,
    XB_eWRN_ID_GENERATOR_LINE2INPUT_UNDER_VOLTAGE_WARNING =  27,
    XB_eWRN_ID_GENERATOR_LINE1INPUT_OVER_FREQUENCY_WARNING =  28,
    XB_eWRN_ID_GENERATOR_LINE1INPUT_UNDER_FREQUENCY_WARNING =  29,
    XB_eWRN_ID_GENERATOR_LINE2INPUT_OVER_FREQUENCY_WARNING =  30,
    XB_eWRN_ID_GENERATOR_LINE2INPUT_UNDER_FREQUENCY_WARNING =  31,
    XB_eWRN_ID_AC_INPUT_L1L2120OVER_FREQUENCY_WARNING =  32,
    XB_eWRN_ID_AC_INPUT_L1L2120UNDER_FREQUENCY_WARNING =  33,
    XB_eWRN_ID_DC_OVER_VOLTAGE_WARNING2 =  34,
    XB_eWRN_ID_HEATSINK_OVER_TEMPERATURE_WARNING1 =  35,
    XB_eWRN_ID_HEATSINK_TEMP_SENSOR_ERROR =  36,
    XB_eWRN_ID_BOARD_TEMP_SENSOR_ERROR  =  37,
    XB_eWRN_ID_CAP_TEMP_SENSOR_ERROR    =  38,
    XB_eWRN_ID_EXTERNAL_GENSET_SHUTDOWN_WARNING = 200,
    XB_eWRN_ID_EXTERNAL_GENSET_STARTUP_WARNING = 201,
    XB_eWRN_ID_UNABLE_TO_START_GENSET_WARNING = 202,
    XB_eWRN_ID_REACHED_MAX_RUN_TIME_WARNING = 203,
    XB_eWRN_ID_MAX_GENSET_CYCLE_WITH_NO_INTERVENTION_WARNING = 204,
    XB_eWRN_ID_GEN_ON_NOT_AGS           = 205,
    XB_eWRN_ID_ORPHANED_AUTO_START_TRIGGER = 206,
    XB_eWRN_ID_ORPHANED_AUTO_STOP_TRIGGER = 207,
    XB_eWRN_ID_NO_AUTO_TRIGGERS_DEFINED = 208,
    XB_eWRN_ID_GEN_OFF_NOT_AGS          = 209,
    XB_eWRN_ID_BATT_OUT_OF_SYNC         = 230,
    XB_eWRN_ID_FAILED_TO_SET_VALUE_WARNING = 250,
    XB_eWRN_ID_CONFIRM_EQUALIZATION_WARNING = 251,
    XB_eWRN_ID_CONFIRM_RESTORE_DEFAULTS_WARNING = 252,
    XB_eWRN_ID_ABORTED_EQUALIZATION     = 253,
    XB_eWRN_ID_FAILED_TO_SET_VALUE_DUE_TO_SYSTEM_MODE = 254,
    XB_eWRN_ID_CLOCK_NOT_SET            = 255,
    XB_eWRN_ID_DEVICE_LOST              = 256,
    XB_eWRN_ID_NEW_DEVICE               = 257,
    XB_eWRN_ID_NODE_INSTANCE_DUPLICATED = 258,
    XB_eWRN_ID_CONFIRM_STANDBY_MODE     = 259,
    XB_eWRN_ID_LOADER_NAME_CHANGED      = 260,
    XB_eWRN_ID_FREQUENCY_CHANGE         = 261,
    XB_eWRN_ID_HIGH_CURRENT_DISCHARGE   = 300,
    XB_eWRN_ID_HIGH_CURRENT_CHARGE      = 301,
    XB_eWRN_ID_LOW_TEMPERATURE          = 302,
    XB_eWRN_ID_HIGH_TEMPERATURE         = 303,
    XB_eWRN_ID_BATTERY_LOW_VOLTAGE      = 304,
    XB_eWRN_ID_BATTERY_HIGH_VOLTAGE     = 305,
    XB_eWRN_ID_CELL_IMBALANCE           = 306,
    XB_eWRN_ID_BMS_INTERNAL             = 307,
    XB_eWRN_ID_SYS_CONFIGURATION        = 308,
    XB_eWRN_ID_XB_DEVICE_NOT_INITIALIZED = 309,
    XB_eWRN_ID_LOST_NETWORK_CONNECTION  = 500,
    XB_eWRN_ID_DEFAULTS_RESTORED_ON_POWERUP_WARNING = 501,
    XB_eWRN_ID_MISSING_EXPECTED_STATUS  = 502,
    XB_eWRN_ID_ASSOCIATIONS_INVALID     = 599,
    XB_eWRN_ID_RESERVED                 = 8189,
    XB_eWRN_ID_OUT_OF_RANGE             = 8190,
    XB_eWRN_ID_NO_CHANGE_DATA_NA        = 8191
} XB_teWRN_ID;

// Event Identifier
// Used in the following fields:
//   XB_tzPGN_AC_OUT_CFG_UV_RMS.eEvtId
//   XB_tzPGN_AC_OUT_CFG_UV_RMS.eRefEvtId
//   XB_tzPGN_AC_IN_CFG_OF.eEvtId
//   XB_tzPGN_AC_IN_CFG_OF.eRefEvtId
//   XB_tzPGN_DC_SRC_CFG_UV.eEvtId
//   XB_tzPGN_DC_SRC_CFG_UV.eRefEvtId
//   XB_tzPGN_DC_SRC_CFG_OV.eEvtId
//   XB_tzPGN_DC_SRC_CFG_OV.eRefEvtId
//   XB_tzPGN_DC_SRC_CFG_UI.eEvtId
//   XB_tzPGN_DC_SRC_CFG_UI.eRefEvtId
//   XB_tzPGN_DC_SRC_CFG_OI.eEvtId
//   XB_tzPGN_DC_SRC_CFG_OI.eRefEvtId
//   XB_tzPGN_DC_SRC_CFG_RIP_OV_PEAK.eEvtId
//   XB_tzPGN_DC_SRC_CFG_RIP_OV_PEAK.eRefEvtId
//   XB_tzPGN_AC_IN_CFG_UV_RMS.eEvtId
//   XB_tzPGN_AC_IN_CFG_UV_RMS.eRefEvtId
//   XB_tzPGN_AC_IN_CFG_UV_PEAK.eEvtId
//   XB_tzPGN_AC_IN_CFG_UV_PEAK.eRefEvtId
//   XB_tzPGN_AC_IN_CFG_UV_AVG.eEvtId
//   XB_tzPGN_AC_IN_CFG_UV_AVG.eRefEvtId
//   XB_tzPGN_AC_IN_CFG_OV_RMS.eEvtId
//   XB_tzPGN_AC_IN_CFG_OV_RMS.eRefEvtId
//   XB_tzPGN_AC_IN_CFG_OV_PEAK.eEvtId
//   XB_tzPGN_AC_IN_CFG_OV_PEAK.eRefEvtId
//   XB_tzPGN_AC_IN_CFG_OV_AVG.eEvtId
//   XB_tzPGN_AC_IN_CFG_OV_AVG.eRefEvtId
//   XB_tzPGN_APS_CFG_UV.eEvtId
//   XB_tzPGN_APS_CFG_UV.eRefEvtId
//   XB_tzPGN_APS_CFG_OV.eEvtId
//   XB_tzPGN_APS_CFG_OV.eRefEvtId
//   XB_tzPGN_OPS_CFG_UV.eEvtId
//   XB_tzPGN_OPS_CFG_UV.eRefEvtId
//   XB_tzPGN_OPS_CFG_OV.eEvtId
//   XB_tzPGN_OPS_CFG_OV.eRefEvtId
//   XB_tzPGN_HV_DC_BUS_CFG_UV.eEvtId
//   XB_tzPGN_HV_DC_BUS_CFG_UV.eRefEvtId
//   XB_tzPGN_HV_DC_BUS_CFG_OV.eEvtId
//   XB_tzPGN_HV_DC_BUS_CFG_OV.eRefEvtId
//   XB_tzPGN_EXT_TEMP_CFG_UT.eEvtId
//   XB_tzPGN_EXT_TEMP_CFG_UT.eRefEvtId
//   XB_tzPGN_EXT_TEMP_CFG_OT.eEvtId
//   XB_tzPGN_EXT_TEMP_CFG_OT.eRefEvtId
//   XB_tzPGN_INT_TEMP_CFG_UT.eEvtId
//   XB_tzPGN_INT_TEMP_CFG_UT.eRefEvtId
//   XB_tzPGN_INT_TEMP_CFG_OT.eEvtId
//   XB_tzPGN_INT_TEMP_CFG_OT.eRefEvtId
//   XB_tzPGN_STATE_EVT_LOG_STS.eEvtId
//   XB_tzPGN_AC_IN_CFG_UF.eEvtId
//   XB_tzPGN_AC_IN_CFG_UF.eRefEvtId
//   XB_tzPGN_AC_OUT_CFG_OV_RMS.eEvtId
//   XB_tzPGN_AC_OUT_CFG_OV_RMS.eRefEvtId
//   XB_tzPGN_STATE_EVT_LOG_STS2.eEvtId
//   XB_tzPGN_SPS_CFG_TRIG.eEvtId
typedef enum XB_eEVT_ID
{
    XB_eEVT_ID_CONTROL_COMMAND_HIBERNATE =  10,
    XB_eEVT_ID_CONTROL_COMMAND_SAFE     =  11,
    XB_eEVT_ID_CONTROL_COMMAND_POWER_SAVE =  12,
    XB_eEVT_ID_CONTROL_COMMAND_OPERATING =  13,
    XB_eEVT_ID_CONTROL_COMMAND_DIAGNOSTIC =  14,
    XB_eEVT_ID_CONTROL_COMMAND_LAST_MODE =  15,
    XB_eEVT_ID_RESET_COMMAND_REBOOT     =  20,
    XB_eEVT_ID_RESET_COMMAND_DOWNLOAD   =  21,
    XB_eEVT_ID_RESET_COMMAND_OEM        =  22,
    XB_eEVT_ID_RESET_COMMAND_FACTORY    =  23,
    XB_eEVT_ID_RESET_COMMAND_REBOOT_CLEAR_NV =  24,
    XB_eEVT_ID_POWERED_UP               =  25,
    XB_eEVT_ID_CLEAR_COMMAND_ACTIVE_FAULTS =  30,
    XB_eEVT_ID_CLEAR_COMMAND_FAULT_LOG  =  31,
    XB_eEVT_ID_CLEAR_COMMAND_ACTIVE_WARNS =  32,
    XB_eEVT_ID_CLEAR_COMMAND_WARN_LOG   =  33,
    XB_eEVT_ID_CLEAR_COMMAND_STATE_EVENT_LOG =  34,
    XB_eEVT_ID_CLEAR_COMMAND_COMM_STATS =  35,
    XB_eEVT_ID_CLEAR_COMMAND_STATS      =  36,
    XB_eEVT_ID_CLEAR_COMMAND_ALL        =  37,
    XB_eEVT_ID_CLEAR_COMMAND_USER_STATS =  38,
    XB_eEVT_ID_DATE_TIME_CONFIGURED     =  40,
    XB_eEVT_ID_WARN_CLEARED             =  50,
    XB_eEVT_ID_FAULT_CLEARED            =  51,
    XB_eEVT_ID_FAULT_SET                =  52,
    XB_eEVT_ID_USER_CFG_CHANGED         =  60,
    XB_eEVT_ID_OEM_CFG_CHANGED          =  61,
    XB_eEVT_ID_TRIGGERED_FAULT          =  70,
    XB_eEVT_ID_SHUTDOWN_THRESHOLD       = 250,
    XB_eEVT_ID_SHUTDOWN_HYSTERESIS      = 251,
    XB_eEVT_ID_WARNING_THRESHOLD        = 252,
    XB_eEVT_ID_WARNING_HYSTERESIS       = 253,
    XB_eEVT_ID_TRANSFER_THRESHOLD       = 254,
    XB_eEVT_ID_FAN0THRESHOLD            = 255,
    XB_eEVT_ID_FAN10THRESHOLD           = 256,
    XB_eEVT_ID_FAN20THRESHOLD           = 257,
    XB_eEVT_ID_FAN30THRESHOLD           = 258,
    XB_eEVT_ID_FAN40THRESHOLD           = 259,
    XB_eEVT_ID_FAN50THRESHOLD           = 260,
    XB_eEVT_ID_FAN60THRESHOLD           = 261,
    XB_eEVT_ID_FAN70THRESHOLD           = 262,
    XB_eEVT_ID_FAN80THRESHOLD           = 263,
    XB_eEVT_ID_FAN90THRESHOLD           = 264,
    XB_eEVT_ID_FAN100THRESHOLD          = 265,
    XB_eEVT_ID_RELAY_OPEN_THRESHOLD     = 266,
    XB_eEVT_ID_RELAY_CLOSE_THRESHOLD    = 267,
    XB_eEVT_ID_CHARGER_DERATING_AC_IN_V = 268,
    XB_eEVT_ID_CHARGER_DERATING_AC_IN_I = 269,
    XB_eEVT_ID_CHARGER_DERATING_EXT_TEMP = 270,
    XB_eEVT_ID_CHARGER_DERATING_INT_TEMP = 271,
    XB_eEVT_ID_CHARGER_DERATING_RIPPLE_V = 272,
    XB_eEVT_ID_LOST_AC_THRESHOLD        = 273,
    XB_eEVT_ID_LOST_AC_HYSTERESIS       = 274,
    XB_eEVT_ID_IMM_SHUTDOWN_THRESHOLD   = 275,
    XB_eEVT_ID_IMM_SHUTDOWN_HYSTERESIS  = 276,
    XB_eEVT_ID_CHARGER_SHUTDOWN_THRESHOLD = 277,
    XB_eEVT_ID_CHARGER_SHUTDOWN_HYSTERESIS = 278,
    XB_eEVT_ID_CHARGER_WARNING_THRESHOLD = 279,
    XB_eEVT_ID_CHARGER_WARNING_HYSTERESIS = 280,
    XB_eEVT_ID_INVERTER_SHUTDOWN_THRESHOLD = 281,
    XB_eEVT_ID_INVERTER_SHUTDOWN_HYSTERESIS = 282,
    XB_eEVT_ID_INVERTER_WARNING_THRESHOLD = 283,
    XB_eEVT_ID_INVERTER_WARNING_HYSTERESIS = 284,
    XB_eEVT_ID_CHARGER_DERATING_TEMP_START_POINT = 285,
    XB_eEVT_ID_CHARGER_DERATING_TEMP_END_POINT = 286,
    XB_eEVT_ID_CHARGER_RECHARGE_THRESHOLD = 287,
    XB_eEVT_ID_AGS_EXERCISE_START       = 300,
    XB_eEVT_ID_AGS_EXERCISE_STOP        = 301,
    XB_eEVT_ID_AGS_QUIET_TIME_BEGIN     = 302,
    XB_eEVT_ID_AGS_QUIET_TIME_END       = 303,
    XB_eEVT_ID_AGS_BATTERY_SOC_START    = 304,
    XB_eEVT_ID_AGS_BATTERY_SOC_STOP     = 305,
    XB_eEVT_ID_AGS_DC_V_START           = 306,
    XB_eEVT_ID_AGS_DC_V_STOP            = 307,
    XB_eEVT_ID_AGS_AC_I_START           = 308,
    XB_eEVT_ID_AGS_AC_I_STOP            = 309,
    XB_eEVT_ID_AGS_CONTACT_START        = 310,
    XB_eEVT_ID_AGS_CONTACT_STOP         = 311,
    XB_eEVT_ID_AGS_FLOAT_STOP           = 312,
    XB_eEVT_ID_AGS_ABSORP_STOP          = 313,
    XB_eEVT_ID_AGS_MANUAL_ON            = 314,
    XB_eEVT_ID_AGS_MANUAL_OFF           = 315,
    XB_eEVT_ID_AGS_AUTO                 = 316,
    XB_eEVT_ID_AGS_EXTERNAL_ON          = 317,
    XB_eEVT_ID_AGS_EXTERNAL_OFF         = 318,
    XB_eEVT_ID_GEN_EXTERNAL_ON          = 319,
    XB_eEVT_ID_GEN_EXTERNAL_OFF         = 320,
    XB_eEVT_ID_AGS_EXTERNAL_SHUTDOWN    = 321,
    XB_eEVT_ID_AGS_AUTO_OFF             = 322,
    XB_eEVT_ID_AGS_DC_I_START           = 323,
    XB_eEVT_ID_AGS_DC_I_STOP            = 324,
    XB_eEVT_ID_AGS_AC_POWER_START       = 325,
    XB_eEVT_ID_AGS_AC_POWER_STOP        = 326,
    XB_eEVT_ID_AGS_MANUAL_ON_AUTO_OFF   = 327,
    XB_eEVT_ID_SPS_MANUAL_OFF           = 400,
    XB_eEVT_ID_SPS_MANUAL_ON            = 401,
    XB_eEVT_ID_SPS_AUTO_OFF             = 410,
    XB_eEVT_ID_SPS_AUTO_ON              = 411,
    XB_eEVT_ID_SPS_AUTO_OFF_BATT_V_LOW  = 420,
    XB_eEVT_ID_SPS_AUTO_ON_BATT_V_LOW   = 421,
    XB_eEVT_ID_SPS_AUTO_OFF_BATT_V_HIGH = 422,
    XB_eEVT_ID_SPS_AUTO_ON_BATT_V_HIGH  = 423,
    XB_eEVT_ID_SPS_AUTO_OFF_ARRAY_V_HIGH = 424,
    XB_eEVT_ID_SPS_AUTO_ON_ARRAY_V_HIGH = 425,
    XB_eEVT_ID_SPS_AUTO_OFF_BATT_TEMP_LOW = 426,
    XB_eEVT_ID_SPS_AUTO_ON_BATT_TEMP_LOW = 427,
    XB_eEVT_ID_SPS_AUTO_OFF_BATT_TEMP_HIGH = 428,
    XB_eEVT_ID_SPS_AUTO_ON_BATT_TEMP_HIGH = 429,
    XB_eEVT_ID_SPS_AUTO_OFF_HEAT_SINK_TEMP_HIGH = 430,
    XB_eEVT_ID_SPS_AUTO_ON_HEAT_SINK_TEMP_HIGH = 431,
    XB_eEVT_ID_SPS_AUTO_OFF_FAULT       = 432,
    XB_eEVT_ID_SPS_AUTO_ON_FAULT        = 433,
    XB_eEVT_ID_APS_CHECK_TIMEOUT        = 434,
    XB_eEVT_ID_APS_QUALIFY_TIMEOUT      = 435,
    XB_eEVT_ID_SPS_AUTO_OFF_ARRAY_V_LOW = 436,
    XB_eEVT_ID_SPS_AUTO_ON_ARRAY_V_LOW  = 437,
    XB_eEVT_ID_SPS_AUTO_OFF_GROUND_FLT  = 438,
    XB_eEVT_ID_SPS_AUTO_ON_GROUND_FLT   = 439,
    XB_eEVT_ID_SPS_AUTO_OFF_EXTERNAL_SHUTDOWN_FLT = 440,
    XB_eEVT_ID_SPS_AUTO_ON_EXTERNAL_SHUTDOWN_FLT = 441,
    XB_eEVT_ID_SPS_AUTO_OFF_INPUT_OVER_VOLT_FLT = 442,
    XB_eEVT_ID_SPS_AUTO_ON_INPUT_OVER_VOLT_FLT = 443,
    XB_eEVT_ID_SPS_AUTO_OFF_INPUT_OVER_VOLT_ERR = 444,
    XB_eEVT_ID_SPS_AUTO_ON_INPUT_OVER_VOLT_ERR = 445,
    XB_eEVT_ID_SPS_AUTO_OFF_INPUT_OVER_VOLT_WRN = 446,
    XB_eEVT_ID_SPS_AUTO_ON_INPUT_OVER_VOLT_WRN = 447,
    XB_eEVT_ID_SPS_AUTO_OFF_OUTPUT_OVER_VOLT_ERR = 448,
    XB_eEVT_ID_SPS_AUTO_ON_OUTPUT_OVER_VOLT_ERR = 449,
    XB_eEVT_ID_SPS_AUTO_OFF_OUTPUT_OVER_VOLT_WRN = 450,
    XB_eEVT_ID_SPS_AUTO_ON_OUTPUT_OVER_VOLT_WRN = 451,
    XB_eEVT_ID_SPS_AUTO_OFF_OUTPUT_UNDER_VOLT_ERR = 452,
    XB_eEVT_ID_SPS_AUTO_ON_OUTPUT_UNDER_VOLT_ERR = 453,
    XB_eEVT_ID_SPS_AUTO_OFF_OUTPUT_UNDER_VOLT_WRN = 454,
    XB_eEVT_ID_SPS_AUTO_ON_OUTPUT_UNDER_VOLT_WRN = 455,
    XB_eEVT_ID_SPS_AUTO_OFF_OUTPUT_OVER_CURR_ERR = 456,
    XB_eEVT_ID_SPS_AUTO_ON_OUTPUT_OVER_CURR_ERR = 457,
    XB_eEVT_ID_SPS_AUTO_OFF_BATT_OVER_TEMP_ERR = 458,
    XB_eEVT_ID_SPS_AUTO_ON_BATT_OVER_TEMP_ERR = 459,
    XB_eEVT_ID_SPS_AUTO_OFF_BATT_OVER_TEMP_WRN = 460,
    XB_eEVT_ID_SPS_AUTO_ON_BATT_OVER_TEMP_WRN = 461,
    XB_eEVT_ID_SPS_AUTO_OFF_BATT_UNDER_TEMP_WRN = 462,
    XB_eEVT_ID_SPS_AUTO_ON_BATT_UNDER_TEMP_WRN = 463,
    XB_eEVT_ID_SPS_AUTO_OFF_HEATSINK_OVER_TEMP_ERR = 464,
    XB_eEVT_ID_SPS_AUTO_ON_HEATSINK_OVER_TEMP_ERR = 465,
    XB_eEVT_ID_SPS_AUTO_OFF_HEATSINK_OVER_TEMP_WRN = 466,
    XB_eEVT_ID_SPS_AUTO_ON_HEATSINK_OVER_TEMP_WRN = 467,
    XB_eEVT_ID_SPS_AUTO_OFF_AMBIENT_OVER_TEMP_ERR = 468,
    XB_eEVT_ID_SPS_AUTO_ON_AMBIENT_OVER_TEMP_ERR = 469,
    XB_eEVT_ID_SPS_AUTO_OFF_AMBIENT_OVER_TEMP_WRN = 470,
    XB_eEVT_ID_SPS_AUTO_ON_AMBIENT_OVER_TEMP_WRN = 471,
    XB_eEVT_ID_SPS_AUTO_OFF_CAPACITOR_OVER_TEMP_ERR = 472,
    XB_eEVT_ID_SPS_AUTO_ON_CAPACITOR_OVER_TEMP_ERR = 473,
    XB_eEVT_ID_SPS_AUTO_OFF_FAN_FLT     = 474,
    XB_eEVT_ID_SPS_AUTO_ON_FAN_FLT      = 475,
    XB_eEVT_ID_SPS_AUTO_OFF_FAN_ERR     = 476,
    XB_eEVT_ID_SPS_AUTO_ON_FAN_ERR      = 477,
    XB_eEVT_ID_SPS_AUTO_OFF_INPUT_OVER_CURR_ERR = 478,
    XB_eEVT_ID_SPS_AUTO_ON_INPUT_OVER_CURR_ERR = 479,
    XB_eEVT_ID_SPS_AUTO_OFF_OUTPUT_OVER_CURR_FLT = 480,
    XB_eEVT_ID_SPS_AUTO_ON_OUTPUT_OVER_CURR_FLT = 481,
    XB_eEVT_ID_SPS_AUTO_OFF_NETWORK_PS_FLT = 482,
    XB_eEVT_ID_SPS_AUTO_ON_NETWORK_PS_FLT = 483,
    XB_eEVT_ID_SPS_AUTO_OFF_SETUP_FLT   = 484,
    XB_eEVT_ID_SPS_AUTO_ON_SETUP_FLT    = 485,
    XB_eEVT_ID_SPS_AUTO_ON_BULK_EXIT    = 486,
    XB_eEVT_ID_SPS_AUTO_OFF_BULK_EXIT   = 487,
    XB_eEVT_ID_SPS_AUTO_ON_ABSORPTION_EXIT = 488,
    XB_eEVT_ID_SPS_AUTO_OFF_ABSORPTION_EXIT = 489,
    XB_eEVT_ID_SPS_AUTO_ON_STATE_OF_CHARGE_LOW = 490,
    XB_eEVT_ID_SPS_AUTO_OFF_STATE_OF_CHARGE_LOW = 491,
    XB_eEVT_ID_SPS_AUTO_ON_TIME_OF_DAY  = 492,
    XB_eEVT_ID_SPS_AUTO_OFF_TIME_OF_DAY = 493,
    XB_eEVT_ID_RESUME_FROM_SAFE         = 512,
    XB_eEVT_ID_AC_FAULT_SET             = 513,
    XB_eEVT_ID_INVERT_FAULT_SET         = 514,
    XB_eEVT_ID_CHARGE_FAULT_SET         = 515,
    XB_eEVT_ID_CHARGER_ENABLE           = 516,
    XB_eEVT_ID_CHARGER_DISABLE          = 517,
    XB_eEVT_ID_INVERTER_ENABLE          = 518,
    XB_eEVT_ID_INVERTER_DISABLE         = 519,
    XB_eEVT_ID_CHARGE_SUSPEND_ON        = 520,
    XB_eEVT_ID_CHARGE_SUSPEND_OFF       = 521,
    XB_eEVT_ID_AC_GOOD                  = 522,
    XB_eEVT_ID_AC_BAD                   = 523,
    XB_eEVT_ID_LOAD_SENSE_ENABLE        = 524,
    XB_eEVT_ID_LOAD_SENSE_ACTIVE        = 525,
    XB_eEVT_ID_INVERT_ACTIVE            = 526,
    XB_eEVT_ID_BULK_EXIT                = 527,
    XB_eEVT_ID_ABSORPTION_EXIT          = 528,
    XB_eEVT_ID_FLOAT_EXIT               = 529,
    XB_eEVT_ID_FLOAT3STAGE_SET          = 530,
    XB_eEVT_ID_FLOAT2STAGE_SET          = 531,
    XB_eEVT_ID_EQUALIZE_ENABLE          = 532,
    XB_eEVT_ID_EQUALIZE_DISABLE         = 533,
    XB_eEVT_ID_EQUALIZE_EXIT            = 534,
    XB_eEVT_ID_LOAD_SENSE_DISABLE       = 535,
    XB_eEVT_ID_SELL_TO_GRID_ENABLED     = 536,
    XB_eEVT_ID_SELL_TO_GRID_DISABLED    = 537,
    XB_eEVT_ID_GRID_SUPPORT_ENABLE      = 538,
    XB_eEVT_ID_GRID_SUPPORT_DISABLE     = 539,
    XB_eEVT_ID_GEN_SUPPORT_ENABLE       = 540,
    XB_eEVT_ID_GEN_SUPPORT_DISABLE      = 541,
    XB_eEVT_ID_PEAK_LOAD_SHAVING_ENABLE = 542,
    XB_eEVT_ID_PEAK_LOAD_SHAVING_DISABLE = 543,
    XB_eEVT_ID_PEAK_LOAD_SHAVING_TOD_START = 544,
    XB_eEVT_ID_PEAK_LOAD_SHAVING_TOD_STOP = 545,
    XB_eEVT_ID_UNIT_OFF                 = 546,
    XB_eEVT_ID_SYSTEM_ABSORPTION_EXIT   = 547,
    XB_eEVT_ID_SYSTEM_INVERTER_ENABLE   = 548,
    XB_eEVT_ID_SYSTEM_AC_GOOD           = 549,
    XB_eEVT_ID_ANTI_ISLANDING_CONDITION = 550,
    XB_eEVT_ID_HIBERNATE_TIMEOUT        = 551,
    XB_eEVT_ID_EXTERNAL_SYNC_ERROR      = 552,
    XB_eEVT_ID_EXTERNAL_SUSPEND_REQUEST = 553,
    XB_eEVT_ID_ENGAGING_CHARGER         = 554,
    XB_eEVT_ID_ENGAGING_GEN_SUPPORT     = 555,
    XB_eEVT_ID_GRID_TIE_ENGAGE_TIMEOUT  = 556,
    XB_eEVT_ID_GEN_SUPPORT_ENGAGE_TIMEOUT = 557,
    XB_eEVT_ID_CHARGE_ENGAGE_TIMEOUT    = 558,
    XB_eEVT_ID_INVERTER_ENGAGE_TIMEOUT  = 559,
    XB_eEVT_ID_CHARGE_EXIT_TIMEOUT      = 560,
    XB_eEVT_ID_GRID_SUPPORT_ENTRY_AMPS  = 561,
    XB_eEVT_ID_GRID_SUPPORT_EXIT_AMPS   = 562,
    XB_eEVT_ID_GEN_SUPPORT_ENTRY_AMPS   = 563,
    XB_eEVT_ID_GEN_SUPPORT_EXIT_AMPS    = 564,
    XB_eEVT_ID_GRID_SUPPORT_ENTRY_VDC   = 565,
    XB_eEVT_ID_GRID_SUPPORT_EXIT_VDC    = 566,
    XB_eEVT_ID_LOW_BATT_CUT_OFF_ENTRY_VDC = 567,
    XB_eEVT_ID_LOW_BATT_RECHARGE_VDC    = 568,
    XB_eEVT_ID_LOW_BATT_CUT_OFF_EXIT_VDC = 569,
    XB_eEVT_ID_INVERT_TO_BYPASS_TIMEOUT = 570,
    XB_eEVT_ID_FORCE_CHARGE             = 571,
    XB_eEVT_ID_SYSTEM_ENGAGE_BULK_CHARGE = 572,
    XB_eEVT_ID_AC_GOOD_PENDING          = 573,
    XB_eEVT_ID_GRID_SAFE                = 574,
    XB_eEVT_ID_POWER_CONVERSION_FAULT   = 575,
    XB_eEVT_ID_LOW_BATTERY_SUPPORT_EXIT = 576,
    XB_eEVT_ID_GRID_SUPPORT_EXIT        = 577,
    XB_eEVT_ID_GFS_ENABLE               = 578,
    XB_eEVT_ID_GFS_DISABLE              = 579,
    XB_eEVT_ID_FORCE_SELL               = 580,
    XB_eEVT_ID_SELL_TIME_OF_DAY_START   = 581,
    XB_eEVT_ID_SELL_TIME_OF_DAY_STOP    = 582,
    XB_eEVT_ID_AUX_PORT_TIME_OF_DAY_START = 583,
    XB_eEVT_ID_AUX_PORT_TIME_OF_DAY_STOP = 584,
    XB_eEVT_ID_PLS_TIME_IN_FLOAT_READY  = 585,
    XB_eEVT_ID_CBG_BATTERY_SOC_START    = 600,
    XB_eEVT_ID_CBG_BATTERY_SOC_STOP     = 601
} XB_teEVT_ID;

// Fault Identifier
// Used in the following fields:
//   XB_tzPGN_UI_CFG_FAULT_BEHAVIOUR.eFaultId
//   XB_tzPGN_ACTIVE_FAULT_STS2.eFaultId
//   XB_tzPGN_FAULT_LOG_STS.eFaultId
//   XB_tzPGN_ACTIVE_FAULT_STS.eFaultId
//   XB_tzPGN_CLEAR_CMD.eFaultId
//   XB_tzPGN_FAULT_LOG_STS2.eFaultId
//   XB_tzPGN_UI_CFG_FAULT_TXT.eFaultId
typedef enum XB_eFLT_ID
{
    XB_eFLT_ID_TRANSISTOR_OVER_TEMPERATURE_SHUTDOWN1 =   0,
    XB_eFLT_ID_TRANSISTOR_OVER_TEMPERATURE_SHUTDOWN2 =   1,
    XB_eFLT_ID_CAPACITOR_OVER_TEMPERATURE_SHUTDOWN1 =   2,
    XB_eFLT_ID_TRANSFORMER_OVER_TEMPERATURE_SHUTDOWN1 =   3,
    XB_eFLT_ID_BATTERY_OVER_TEMPERATURE_SHUTDOWN1 =   4,
    XB_eFLT_ID_AMBIENT_OVER_TEMPERATURE_SHUTDOWN1 =   5,
    XB_eFLT_ID_AC_OUTPUT_OVERLOAD_SHUTDOWN1 =   6,
    XB_eFLT_ID_AC_OUTPUT_OVERLOAD_PEAK_CURRENT_SHUTDOWN1 =   7,
    XB_eFLT_ID_NEUTRAL_LOSS_SHUTDOWN    =   8,
    XB_eFLT_ID_DC_OVER_VOLTAGE_SHUTDOWN1 =   9,
    XB_eFLT_ID_DC_UNDER_VOLTAGE_IMMEDIATE_SHUTDOWN1 =  10,
    XB_eFLT_ID_DC_UNDER_VOLTAGE_SHUTDOWN1 =  11,
    XB_eFLT_ID_AC_INPUT_LINE1OVER_VOLTAGE_SHUTDOWN =  12,
    XB_eFLT_ID_AC_INPUT_LINE1UNDER_VOLTAGE_SHUTDOWN =  13,
    XB_eFLT_ID_AC_INPUT_LINE2OVER_VOLTAGE_SHUTDOWN =  14,
    XB_eFLT_ID_AC_INPUT_LINE2UNDER_VOLTAGE_SHUTDOWN =  15,
    XB_eFLT_ID_AC_INPUT_LINE1OVER_FREQUENCY_SHUTDOWN =  16,
    XB_eFLT_ID_AC_INPUT_LINE1UNDER_FREQUENCY_SHUTDOWN =  17,
    XB_eFLT_ID_AC_INPUT_LINE2OVER_FREQUENCY_SHUTDOWN =  18,
    XB_eFLT_ID_AC_INPUT_LINE2UNDER_FREQUENCY_SHUTDOWN =  19,
    XB_eFLT_ID_ADC_CONVERSION_TIMEOUT   =  22,
    XB_eFLT_ID_AC_OUTPUT_OVER_VOLTAGE_SHUTDOWN1 =  23,
    XB_eFLT_ID_AC_OUTPUT_UNDER_VOLTAGE_SHUTDOWN1 =  24,
    XB_eFLT_ID_APS_OVER_VOLTAGE         =  25,
    XB_eFLT_ID_APS_UNDER_VOLTAGE        =  26,
    XB_eFLT_ID_OPS_OVER_VOLTAGE         =  27,
    XB_eFLT_ID_OPS_UNDER_VOLTAGE        =  28,
    XB_eFLT_ID_AC_BACKFEED_SHUTDOWN     =  29,
    XB_eFLT_ID_BATTERY_UNDER_TEMPERATURE =  30,
    XB_eFLT_ID_ECHO_CHARGER_SHORT_CIRCUIT =  31,
    XB_eFLT_ID_ECHO_CHARGER_REVERSE_POLARITY =  32,
    XB_eFLT_ID_ECHO_CHARGER_INPUT_OVER_VOLTAGE =  33,
    XB_eFLT_ID_ECHO_CHARGER_INPUT_UNDER_VOLTAGE =  34,
    XB_eFLT_ID_ECHO_CHARGER_OVER_TEMPERATURE =  35,
    XB_eFLT_ID_ECHO_CHARGER_UNDER_TEMPERATURE =  36,
    XB_eFLT_ID_ECHO_CHARGER_NOT_COMMUNICATING =  37,
    XB_eFLT_ID_LOST_INTERPROCESSOR_COMMUNICATIONS =  40,
    XB_eFLT_ID_DEAD_BATTERY_CHARGE_TIMEOUT =  41,
    XB_eFLT_ID_AC_OUTPUT_OVER_VOLTAGE_SHUTDOWN2 =  42,
    XB_eFLT_ID_AC_OUTPUT_UNDER_VOLTAGE_SHUTDOWN2 =  43,
    XB_eFLT_ID_GENERATOR_LINE1INPUT_OVER_VOLTAGE_SHUTDOWN =  44,
    XB_eFLT_ID_GENERATOR_LINE1INPUT_UNDER_VOLTAGE_SHUTDOWN =  45,
    XB_eFLT_ID_GENERATOR_LINE2INPUT_OVER_VOLTAGE_SHUTDOWN =  46,
    XB_eFLT_ID_GENERATOR_LINE2INPUT_UNDER_VOLTAGE_SHUTDOWN =  47,
    XB_eFLT_ID_GENERATOR_LINE1INPUT_OVER_FREQUENCY_SHUTDOWN =  48,
    XB_eFLT_ID_GENERATOR_LINE1INPUT_UNDER_FREQUENCY_SHUTDOWN =  49,
    XB_eFLT_ID_GENERATOR_LINE2INPUT_OVER_FREQUENCY_SHUTDOWN =  50,
    XB_eFLT_ID_GENERATOR_LINE2INPUT_UNDER_FREQUENCY_SHUTDOWN =  51,
    XB_eFLT_ID_AC_INPUT_L1L2120OVER_FREQUENCY_SHUTDOWN =  52,
    XB_eFLT_ID_AC_INPUT_L1L2120UNDER_FREQUENCY_SHUTDOWN =  53,
    XB_eFLT_ID_APS1OFF                  =  54,
    XB_eFLT_ID_HEATSINK1OVER_TEMPERATURE_SHUTDOWN =  55,
    XB_eFLT_ID_GROUND_FAULT             =  56,
    XB_eFLT_ID_EXTERNAL_SHUTDOWN        =  57,
    XB_eFLT_ID_AC_OUTPUT1VOLTAGE_SHUTDOWN =  58,
    XB_eFLT_ID_AC_OUTPUT1FREQUENCY_SHUTDOWN =  59,
    XB_eFLT_ID_AC_OUTPUT1IMPEDANCE_SHUTDOWN =  60,
    XB_eFLT_ID_RECONNECTING1            =  61,
    XB_eFLT_ID_DCDC1SATURATED           =  62,
    XB_eFLT_ID_USER_SHUTDOWN            =  63,
    XB_eFLT_ID_NEUTRAL_OVER_CURRENT1    =  64,
    XB_eFLT_ID_OVER_VOLTAGE_ANTIISLANDING =  65,
    XB_eFLT_ID_UNDER_VOLTAGE_ANTIISLANDING =  66,
    XB_eFLT_ID_OVER_FREQUENCY_ANTIISLANDING =  67,
    XB_eFLT_ID_UNDER_FREQUENCY_ANTIISLANDING =  68,
    XB_eFLT_ID_BATTERY_CONFLICTING_SETUP =  69,
    XB_eFLT_ID_DC_OVER_VOLTAGE_SHUTDOWN2 =  70,
    XB_eFLT_ID_DC_OVER_CURRENT_SHUTDOWN =  71,
    XB_eFLT_ID_SPS_OVERLOAD             =  72,
    XB_eFLT_ID_DC_OVER_CURRENT_SHUTDOWN2 =  73,
    XB_eFLT_ID_DC_OVER_VOLTAGE_SHUTDOWN3 =  74,
    XB_eFLT_ID_FAN_PROBLEM1             =  75,
    XB_eFLT_ID_FAN_PROBLEM2             =  76,
    XB_eFLT_ID_DC_OVER_CURRENT_SHUTDOWN3 =  77,
    XB_eFLT_ID_DC_OVER_CURRENT_SHUTDOWN4 =  78,
    XB_eFLT_ID_FAN_PROBLEM3             =  79,
    XB_eFLT_ID_FAN_PROBLEM4             =  80,
    XB_eFLT_ID_FAN_PROBLEM5             =  81,
    XB_eFLT_ID_NETWORK_POWER_SUPPLY_FAILURE =  82,
    XB_eFLT_ID_BATTERY_DISCHARGE_OVER_CURRENT =  83,
    XB_eFLT_ID_GROUND_FAULT2            =  84,
    XB_eFLT_ID_ARC_FAULT                =  85,
    XB_eFLT_ID_BMS_DISCONNECTED         =  90,
    XB_eFLT_ID_MAX_START_RETRIES        = 200,
    XB_eFLT_ID_UNABLETO_STOP_GENERATOR  = 201,
    XB_eFLT_ID_GEN_STOPBY_EXT_SHUTDOWN  = 203,
    XB_eFLT_ID_CLOCK_NOT_SET            = 250,
    XB_eFLT_ID_DEVICE_LOST              = 251,
    XB_eFLT_ID_NEW_DEVICE               = 252,
    XB_eFLT_ID_HIGH_CURRENT_DISCHARGE   = 300,
    XB_eFLT_ID_HIGH_CURRENT_CHARGE      = 301,
    XB_eFLT_ID_LOW_TEMPERATURE          = 302,
    XB_eFLT_ID_HIGH_TEMPERATURE         = 303,
    XB_eFLT_ID_BATTERY_LOW_VOLTAGE      = 304,
    XB_eFLT_ID_BATTERY_HIGH_VOLTAGE     = 305,
    XB_eFLT_ID_CELL_IMBALANCE           = 306,
    XB_eFLT_ID_BMS_INTERNAL             = 307,
    XB_eFLT_ID_LOW_TEMPERATURE_CHARGE   = 308,
    XB_eFLT_ID_LOW_TEMPERATURE_DISCHARGE = 309,
    XB_eFLT_ID_HIGH_TEMPERATURE_POWER_SWITCH = 310,
    XB_eFLT_ID_DEEP_DISCHARGE_PROTECTION_SWITCH = 311,
    XB_eFLT_ID_POWER_SWITCH_FAILURE     = 312,
    XB_eFLT_ID_COMM_ERROR_CURRENT_SENSOR = 313,
    XB_eFLT_ID_COMM_ERROR_VOLTAGE_SENSOR = 314,
    XB_eFLT_ID_SIL_FUNCTIONALITY_TRIGGERED = 315,
    XB_eFLT_ID_PYRO_SWITCH_NOT_RESPONDING = 316,
    XB_eFLT_ID_CELL_DAMAGED             = 317,
    XB_eFLT_ID_NO_BMS_DETECTED          = 318,
    XB_eFLT_ID_SUB_PACK1ERROR           = 319,
    XB_eFLT_ID_SUB_PACK2ERROR           = 320,
    XB_eFLT_ID_SUB_RELAY_COMMAND        = 321,
    XB_eFLT_ID_SYS_CONFIGURATION_ERROR  = 322,
    XB_eFLT_ID_BATTERY_OVER_CHARGE      = 323,
    XB_eFLT_ID_BATTERY_OVER_DISCHARGE   = 324,
    XB_eFLT_ID_ENDOF_LIFE               = 325,
    XB_eFLT_ID_XW_INCOMPATIBLE_VERSION  = 326,
    XB_eFLT_ID_MPPT_INCOMPATIBLE_VERSION = 327,
    XB_eFLT_ID_MULTIPLE_BMS             = 328,
    XB_eFLT_ID_SILICON_SERIAL_ID_FAILURE = 500,
    XB_eFLT_ID_NON_VOLATILE_ERROR       = 501,
    XB_eFLT_ID_WATCHDOG_RESET           = 502,
    XB_eFLT_ID_REALTIME_CLOCK_FAILURE   = 503,
    XB_eFLT_ID_LOST_NETWORK_CONNECTION  = 504,
    XB_eFLT_ID_CONTROLLER_FAILURE       = 505,
    XB_eFLT_ID_WRONG_FAULT_IDENTIFIER   = 506,
    XB_eFLT_ID_WRONG_WARNING_IDENTIFIER = 507,
    XB_eFLT_ID_INVALID_INTERRUPT        = 508,
    XB_eFLT_ID_ASSOCIATIONS_INVALID     = 599,
    XB_eFLT_ID_RESERVED                 = 8189,
    XB_eFLT_ID_OUT_OF_RANGE             = 8190,
    XB_eFLT_ID_NO_CHANGE_DATA_NA        = 8191
} XB_teFLT_ID;

// Operating State, All
// Used in the following fields:
//   XB_tzPGN_STATE_EVT_LOG_STS.eStateId
//   XB_tzPGN_STATE_EVT_LOG_STS2.eStateId
typedef enum XB_eOP_STATE_ALL
{
    XB_eOP_STATE_ALL_HIBERNATE          =   0,
    XB_eOP_STATE_ALL_SAFE               =   1,
    XB_eOP_STATE_ALL_POWER_SAVE         =   2,
    XB_eOP_STATE_ALL_OPERATING          =   3,
    XB_eOP_STATE_ALL_DIAGNOSTIC         =   4,
    XB_eOP_STATE_ALL_QUIET_TIME         = 265,
    XB_eOP_STATE_ALL_AUTO_ON            = 266,
    XB_eOP_STATE_ALL_AUTO_OFF           = 267,
    XB_eOP_STATE_ALL_MANUAL_ON          = 268,
    XB_eOP_STATE_ALL_MANUAL_OFF         = 269,
    XB_eOP_STATE_ALL_GENERATOR_SHUTDOWN = 270,
    XB_eOP_STATE_ALL_EXTERNAL_SHUTDOWN  = 271,
    XB_eOP_STATE_ALL_AGS_FAULT          = 272,
    XB_eOP_STATE_ALL_SUSPEND            = 273,
    XB_eOP_STATE_ALL_NOT_OPERATING      = 274,
    XB_eOP_STATE_ALL_MONITORING         = 512,
    XB_eOP_STATE_ALL_NOT_CHARGING       = 768,
    XB_eOP_STATE_ALL_BULK               = 769,
    XB_eOP_STATE_ALL_ABSORPTION         = 770,
    XB_eOP_STATE_ALL_OVERCHARGE         = 771,
    XB_eOP_STATE_ALL_EQUALIZE           = 772,
    XB_eOP_STATE_ALL_FLOAT              = 773,
    XB_eOP_STATE_ALL_NO_FLOAT           = 774,
    XB_eOP_STATE_ALL_CONSTANT_VI        = 775,
    XB_eOP_STATE_ALL_CHARGER_DISABLED   = 776,
    XB_eOP_STATE_ALL_QUALIFYING_AC      = 777,
    XB_eOP_STATE_ALL_QUALIFYING_APS     = 778,
    XB_eOP_STATE_ALL_ENGAGING_CHARGER   = 779,
    XB_eOP_STATE_ALL_CHARGE_FAULT       = 780,
    XB_eOP_STATE_ALL_CHARGER_SUSPEND    = 781,
    XB_eOP_STATE_ALL_AC_GOOD            = 782,
    XB_eOP_STATE_ALL_APS_GOOD           = 783,
    XB_eOP_STATE_ALL_AC_FAULT           = 784,
    XB_eOP_STATE_ALL_CHARGE             = 785,
    XB_eOP_STATE_ALL_ABSORPTION_EXIT_PENDING = 786,
    XB_eOP_STATE_ALL_GROUND_FAULT       = 787,
    XB_eOP_STATE_ALL_INACTIVE           = 800,
    XB_eOP_STATE_ALL_INPUT1ACTIVE       = 801,
    XB_eOP_STATE_ALL_INPUT2ACTIVE       = 802,
    XB_eOP_STATE_ALL_INPUT1DELAY        = 803,
    XB_eOP_STATE_ALL_INPUT2DELAY        = 804,
    XB_eOP_STATE_ALL_INV                = 1024,
    XB_eOP_STATE_ALL_AC_PASSTHRU        = 1025,
    XB_eOP_STATE_ALL_APS_ONLY           = 1026,
    XB_eOP_STATE_ALL_LOAD_SENSE_ACTIVE  = 1027,
    XB_eOP_STATE_ALL_INVERTER_DISABLED  = 1028,
    XB_eOP_STATE_ALL_LOAD_SENSE_READY   = 1029,
    XB_eOP_STATE_ALL_ENGAGING_INVERTER  = 1030,
    XB_eOP_STATE_ALL_INVERT_FAULT       = 1031,
    XB_eOP_STATE_ALL_INVERTER_STANDBY   = 1032,
    XB_eOP_STATE_ALL_GRID_TIED          = 1033,
    XB_eOP_STATE_ALL_GRID_SUPPORT       = 1034,
    XB_eOP_STATE_ALL_GEN_SUPPORT        = 1035,
    XB_eOP_STATE_ALL_SELL_TO_GRID       = 1036,
    XB_eOP_STATE_ALL_LOAD_SHAVING       = 1037,
    XB_eOP_STATE_ALL_SCREEN_SAVER       = 1280,
    XB_eOP_STATE_ALL_ACTIVE             = 1281,
    XB_eOP_STATE_ALL_GATEWAY_TRANSLATING = 1408,
    XB_eOP_STATE_ALL_GATEWAY_DISABLED   = 1409,
    XB_eOP_STATE_ALL_GRID_FREQUENCY_STABILIZATION = 1410
} XB_teOP_STATE_ALL;

// Source Quality
// Used in the following fields:
//   XB_tzPGN_AC_IN_STS_RMS.eQuality
//   XB_tzPGN_AC_IN_STS_PEAK.eQuality
//   XB_tzPGN_AC_IN_STS_AVG.eQuality
//   XB_tzPGN_AC_STS_RMS.eQuality
typedef enum XB_eSRC_QUAL
{
    XB_eSRC_QUAL_INVALID                =   0,
    XB_eSRC_QUAL_BEING_QUALIFIED        =   1,
    XB_eSRC_QUAL_BAD_FREQUENCY          =   2,
    XB_eSRC_QUAL_BAD_LEVEL              =   3,
    XB_eSRC_QUAL_GOOD                   =   4,
    XB_eSRC_QUAL_FREQUENCY_LOW          =  21,
    XB_eSRC_QUAL_FREQUENCY_HIGH         =  22,
    XB_eSRC_QUAL_VOLTAGE_LOW            =  31,
    XB_eSRC_QUAL_VOLTAGE_HIGH           =  32,
    XB_eSRC_QUAL_RESERVED               = 253,
    XB_eSRC_QUAL_OUT_OF_RANGE           = 254,
    XB_eSRC_QUAL_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teSRC_QUAL;

// DC Source Identifier
// Used in the following fields:
//   XB_tzPGN_BATT_STS2.eDcSrcId
//   XB_tzPGN_DC_SRC_STS2.eDcSrcId
//   XB_tzPGN_AGS_CFG_BATT_SOC.eDcSrcId
//   XB_tzPGN_BATT_MON_STS.eDcSrcId
//   XB_tzPGN_CHG_CTRL_CMD2.eDcSrcId
//   XB_tzPGN_DC_SRC_STS.eDcSrcId
//   XB_tzPGN_CHG_STS.eDcSrcId
//   XB_tzPGN_BATT_MON_STATS_BATT.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_UV.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_OV.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_UI.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_OI.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_RIP_OV_PEAK.eDcSrcId
//   XB_tzPGN_CHG_CFG_BULK.eDcSrcId
//   XB_tzPGN_CHG_CTRL_CMD.eDcSrcId
//   XB_tzPGN_CHG_CFG_ABSORP.eDcSrcId
//   XB_tzPGN_CHG_CFG_OVERCHARGE.eDcSrcId
//   XB_tzPGN_CHG_CFG_FLOAT.eDcSrcId
//   XB_tzPGN_CHG_CFG_EQUALIZE.eDcSrcId
//   XB_tzPGN_CHG_CFG_CV_CI.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_BATT.eDcSrcId
//   XB_tzPGN_BATT_MON_CFG.eDcSrcId
//   XB_tzPGN_CHG_STATS_DC.eDcSrcId
//   XB_tzPGN_GO_CFG_YOURSELF_CMD.eDcSrcId
//   XB_tzPGN_AGS_CFG_DC_V.eDcSrcId
//   XB_tzPGN_CHG_CFG.eDcSrcId
//   XB_tzPGN_INV_STATS_DC2.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_PV_ARRAY.eDcSrcId
//   XB_tzPGN_AGS_CFG_DC_I.eDcSrcId
//   XB_tzPGN_DC_SRC_CFG_PV_ARRAY2.eDcSrcId
//   XB_tzPGN_INV_STATS_DC.eDcSrcId
//   XB_tzPGN_CHG_STATS_DC2.eDcSrcId
//   XB_tzPGN_CHG_STATS_BATT2.eDcSrcId
//   XB_tzPGN_EMS_CKT_CFG.eDcSrcId
//   XB_tzPGN_EMS_CKT_STS.eDcSrcId
//   XB_tzPGN_SPS_CFG_BATT_SOC.eDcSrcId
//   XB_tzPGN_BMS_CFG.eDcSrcId
//   XB_tzPGN_BMS_STS.eDcSrcId
//   XB_tzPGN_BATT_MON_CFG_SYNC.eDcSrcId
//   XB_tzPGN_CV_CI_CTRL_CMD.eDcSrcId
//   XB_tzPGN_BATT_MON_CTRL_CMD.eDcSrcId
//   XB_tzPGN_BATT_MON_HIST.eDcSrcId
typedef enum XB_eDC_SRC_ID
{
    XB_eDC_SRC_ID_INVALID               =   0,
    XB_eDC_SRC_ID_NONE                  =   1,
    XB_eDC_SRC_ID_ANONYMOUS             =   2,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK1       =   3,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK2       =   4,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK3       =   5,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK4       =   6,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK5       =   7,
    XB_eDC_SRC_ID_HOUSE_BAT_BANK6       =   8,
    XB_eDC_SRC_ID_START_BAT_BANK1       =   9,
    XB_eDC_SRC_ID_START_BAT_BANK2       =  10,
    XB_eDC_SRC_ID_START_BAT_BANK3       =  11,
    XB_eDC_SRC_ID_START_BAT_BANK4       =  12,
    XB_eDC_SRC_ID_START_BAT_BANK5       =  13,
    XB_eDC_SRC_ID_START_BAT_BANK6       =  14,
    XB_eDC_SRC_ID_SOLAR_ARRAY1          =  21,
    XB_eDC_SRC_ID_SOLAR_ARRAY2          =  22,
    XB_eDC_SRC_ID_SOLAR_ARRAY3          =  23,
    XB_eDC_SRC_ID_SOLAR_ARRAY4          =  24,
    XB_eDC_SRC_ID_SOLAR_ARRAY5          =  25,
    XB_eDC_SRC_ID_SOLAR_ARRAY6          =  26,
    XB_eDC_SRC_ID_SOLAR_ARRAY7          =  27,
    XB_eDC_SRC_ID_SOLAR_ARRAY8          =  28,
    XB_eDC_SRC_ID_SOLAR_ARRAY9          =  29,
    XB_eDC_SRC_ID_SOLAR_ARRAY10         =  30,
    XB_eDC_SRC_ID_SOLAR_ARRAY11         =  31,
    XB_eDC_SRC_ID_SOLAR_ARRAY12         =  32,
    XB_eDC_SRC_ID_SOLAR_ARRAY13         =  33,
    XB_eDC_SRC_ID_SOLAR_ARRAY14         =  34,
    XB_eDC_SRC_ID_SOLAR_ARRAY15         =  35,
    XB_eDC_SRC_ID_SOLAR_ARRAY16         =  36,
    XB_eDC_SRC_ID_ALL                   = 252,
    XB_eDC_SRC_ID_RESERVED              = 253,
    XB_eDC_SRC_ID_OUTOF_RANGE           = 254,
    XB_eDC_SRC_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teDC_SRC_ID;

// AC Source Identifier
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_AC_I.eAcSrcId
//   XB_tzPGN_AC_OUT_CFG_UV_RMS.eAcSrcId
//   XB_tzPGN_AGS_CFG_AC_PWR.eAcSrcId
//   XB_tzPGN_INV_CTRL_CMD.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_OF.eAcSrcId
//   XB_tzPGN_AC_IN_STS_RMS.eAcSrcId
//   XB_tzPGN_AC_IN_STS_PEAK.eAcSrcId
//   XB_tzPGN_AC_IN_STS_AVG.eAcSrcId
//   XB_tzPGN_AC_OUT_STS_RMS.eAcSrcId
//   XB_tzPGN_AC_OUT_STS_PEAK.eAcSrcId
//   XB_tzPGN_AC_OUT_STS_AVG.eAcSrcId
//   XB_tzPGN_INV_STATS_AC2.eAcSrcId
//   XB_tzPGN_INV_STS.eAcSrcId
//   XB_tzPGN_AGS_STS.eAcSrcId
//   XB_tzPGN_AGS_STS_GEN.eAcSrcId
//   XB_tzPGN_AC_OUT_CFG.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_UV_RMS.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_UV_PEAK.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_UV_AVG.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_OV_RMS.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_OV_PEAK.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_OV_AVG.eAcSrcId
//   XB_tzPGN_AGS_STATS_GEN.eAcSrcId
//   XB_tzPGN_GFS_CFG.eAcSrcId
//   XB_tzPGN_INV_CFG_LOAD_SENSE.eAcSrcId
//   XB_tzPGN_INV_CFG.eAcSrcId
//   XB_tzPGN_AC_IN_CFG.eAcSrcId
//   XB_tzPGN_AGS_CFG.eAcSrcId
//   XB_tzPGN_AGS_CFG_GEN.eAcSrcId
//   XB_tzPGN_INV_STATS_AC.eAcSrcId
//   XB_tzPGN_AC_STS_RMS.eAcSrcId
//   XB_tzPGN_GRID_TIE_CFG.eAcSrcId
//   XB_tzPGN_CHG_STATS_AC2.eAcSrcId
//   XB_tzPGN_CHG_STATS_AC.eAcSrcId
//   XB_tzPGN_GO_CFG_YOURSELF_CMD.eAcSrcId
//   XB_tzPGN_AGS_CFG_CNTCT_CLS.eAcSrcId
//   XB_tzPGN_AC_IN_CFG_UF.eAcSrcId
//   XB_tzPGN_AGS_CTRL_CMD.eAcSrcId
//   XB_tzPGN_AC_OUT_CFG_OV_RMS.eAcSrcId
//   XB_tzPGN_INV_STS_LOAD_SHARE_HS.eAcSrcId
//   XB_tzPGN_AC_XFER_SW_CFG.eAcSrcId
//   XB_tzPGN_INV_STS2.eAcSrcId
//   XB_tzPGN_AC_LINE_CFG.eAcSrcId
//   XB_tzPGN_EMS_CKT_CFG.eAcSrcId
//   XB_tzPGN_EMS_CKT_STS.eAcSrcId
//   XB_tzPGN_GRID_TIE_CTRL_CMD.eAcSrcId
//   XB_tzPGN_GVS_CFG.eAcSrcId
//   XB_tzPGN_GRID_TIE_CFG_BATT_SOC.eAcSrcId
typedef enum XB_eAC_SRC_ID
{
    XB_eAC_SRC_ID_INVALID               =   0,
    XB_eAC_SRC_ID_NONE                  =   1,
    XB_eAC_SRC_ID_ANONYMOUS             =   2,
    XB_eAC_SRC_ID_SHORE1                =   3,
    XB_eAC_SRC_ID_SHORE2                =   4,
    XB_eAC_SRC_ID_SHORE3                =   5,
    XB_eAC_SRC_ID_SHORE4                =   6,
    XB_eAC_SRC_ID_SHORE5                =   7,
    XB_eAC_SRC_ID_SHORE6                =   8,
    XB_eAC_SRC_ID_SHORE7                =   9,
    XB_eAC_SRC_ID_SHORE8                =  10,
    XB_eAC_SRC_ID_SHORE9                =  11,
    XB_eAC_SRC_ID_SHORE10               =  12,
    XB_eAC_SRC_ID_SHORE11               =  13,
    XB_eAC_SRC_ID_SHORE12               =  14,
    XB_eAC_SRC_ID_SHORE13               =  15,
    XB_eAC_SRC_ID_SHORE14               =  16,
    XB_eAC_SRC_ID_SHORE15               =  17,
    XB_eAC_SRC_ID_SHORE16               =  18,
    XB_eAC_SRC_ID_GEN1                  =  19,
    XB_eAC_SRC_ID_GEN2                  =  20,
    XB_eAC_SRC_ID_GEN3                  =  21,
    XB_eAC_SRC_ID_GEN4                  =  22,
    XB_eAC_SRC_ID_GEN5                  =  23,
    XB_eAC_SRC_ID_GEN6                  =  24,
    XB_eAC_SRC_ID_GEN7                  =  25,
    XB_eAC_SRC_ID_GEN8                  =  26,
    XB_eAC_SRC_ID_GEN9                  =  27,
    XB_eAC_SRC_ID_GEN10                 =  28,
    XB_eAC_SRC_ID_GEN11                 =  29,
    XB_eAC_SRC_ID_GEN12                 =  30,
    XB_eAC_SRC_ID_GEN13                 =  31,
    XB_eAC_SRC_ID_GEN14                 =  32,
    XB_eAC_SRC_ID_GEN15                 =  33,
    XB_eAC_SRC_ID_GEN16                 =  34,
    XB_eAC_SRC_ID_AC1                   =  35,
    XB_eAC_SRC_ID_AC2                   =  36,
    XB_eAC_SRC_ID_AC3                   =  37,
    XB_eAC_SRC_ID_AC4                   =  38,
    XB_eAC_SRC_ID_AC5                   =  39,
    XB_eAC_SRC_ID_AC6                   =  40,
    XB_eAC_SRC_ID_AC7                   =  41,
    XB_eAC_SRC_ID_AC8                   =  42,
    XB_eAC_SRC_ID_AC9                   =  43,
    XB_eAC_SRC_ID_AC10                  =  44,
    XB_eAC_SRC_ID_AC11                  =  45,
    XB_eAC_SRC_ID_AC12                  =  46,
    XB_eAC_SRC_ID_AC13                  =  47,
    XB_eAC_SRC_ID_AC14                  =  48,
    XB_eAC_SRC_ID_AC15                  =  49,
    XB_eAC_SRC_ID_AC16                  =  50,
    XB_eAC_SRC_ID_AC_LOAD1              =  51,
    XB_eAC_SRC_ID_AC_LOAD2              =  52,
    XB_eAC_SRC_ID_AC_LOAD3              =  53,
    XB_eAC_SRC_ID_AC_LOAD4              =  54,
    XB_eAC_SRC_ID_AC_LOAD5              =  55,
    XB_eAC_SRC_ID_AC_LOAD6              =  56,
    XB_eAC_SRC_ID_AC_LOAD7              =  57,
    XB_eAC_SRC_ID_AC_LOAD8              =  58,
    XB_eAC_SRC_ID_AC_LOAD9              =  59,
    XB_eAC_SRC_ID_AC_LOAD10             =  60,
    XB_eAC_SRC_ID_AC_LOAD11             =  61,
    XB_eAC_SRC_ID_AC_LOAD12             =  62,
    XB_eAC_SRC_ID_AC_LOAD13             =  63,
    XB_eAC_SRC_ID_AC_LOAD14             =  64,
    XB_eAC_SRC_ID_AC_LOAD15             =  65,
    XB_eAC_SRC_ID_AC_LOAD16             =  66,
    XB_eAC_SRC_ID_GRID1                 =  67,
    XB_eAC_SRC_ID_GRID2                 =  68,
    XB_eAC_SRC_ID_GRID3                 =  69,
    XB_eAC_SRC_ID_GRID4                 =  70,
    XB_eAC_SRC_ID_GRID5                 =  71,
    XB_eAC_SRC_ID_GRID6                 =  72,
    XB_eAC_SRC_ID_GRID7                 =  73,
    XB_eAC_SRC_ID_GRID8                 =  74,
    XB_eAC_SRC_ID_GRID9                 =  75,
    XB_eAC_SRC_ID_GRID10                =  76,
    XB_eAC_SRC_ID_GRID11                =  77,
    XB_eAC_SRC_ID_GRID12                =  78,
    XB_eAC_SRC_ID_GRID13                =  79,
    XB_eAC_SRC_ID_GRID14                =  80,
    XB_eAC_SRC_ID_GRID15                =  81,
    XB_eAC_SRC_ID_GRID16                =  82,
    XB_eAC_SRC_ID_ALL                   = 252,
    XB_eAC_SRC_ID_RESERVED              = 253,
    XB_eAC_SRC_ID_OUT_OF_RANGE          = 254,
    XB_eAC_SRC_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teAC_SRC_ID;

// AC Line
// Used in the following fields:
//   XB_tzPGN_AC_IN_STS_RMS.eLine
//   XB_tzPGN_AC_IN_STS_PEAK.eLine
//   XB_tzPGN_AC_IN_STS_AVG.eLine
//   XB_tzPGN_AC_OUT_STS_RMS.eLine
//   XB_tzPGN_AC_OUT_STS_PEAK.eLine
//   XB_tzPGN_AC_OUT_STS_AVG.eLine
//   XB_tzPGN_INV_STATS_AC2.eLine
//   XB_tzPGN_INV_STATS_AC.eLine
//   XB_tzPGN_AC_STS_RMS.eLine
//   XB_tzPGN_CHG_STATS_AC2.eLine
//   XB_tzPGN_CHG_STATS_AC.eLine
//   XB_tzPGN_INV_STS_LOAD_SHARE_HS.eLine
//   XB_tzPGN_AC_LINE_CFG.eAcLineLocal
//   XB_tzPGN_AC_LINE_CFG.eAcLineRemote
//   XB_tzPGN_EMS_CKT_CFG.eAcLine
//   XB_tzPGN_EMS_CKT_STS.eAcLine
//   XB_tzPGN_EMS_STS.eAcLine
typedef enum XB_eAC_LINE
{
    XB_eAC_LINE_INVALID                 =   0,
    XB_eAC_LINE_LINE1                   =   1,
    XB_eAC_LINE_LINE2                   =   2,
    XB_eAC_LINE_LINE3                   =   3,
    XB_eAC_LINE_RESERVED                = 253,
    XB_eAC_LINE_OUT_OF_RANGE            = 254,
    XB_eAC_LINE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teAC_LINE;

// Reset Command
// Used in the following fields:
//   XB_tzPGN_RESET_CMD.eCmd
typedef enum XB_eRST_CMD
{
    XB_eRST_CMD_REBOOT                  =   0,
    XB_eRST_CMD_REBOOT_DL_MODE          =   1,
    XB_eRST_CMD_FACTORY                 =   2,
    XB_eRST_CMD_OEM                     =   3,
    XB_eRST_CMD_CLEAR_NV_AND_REBOOT     =   4,
    XB_eRST_CMD_NO_CHANGE               = 252,
    XB_eRST_CMD_RESERVED                = 253,
    XB_eRST_CMD_OUT_OF_RANGE            = 254,
    XB_eRST_CMD_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teRST_CMD;

// Association Type
// Used in the following fields:
//   XB_tzPGN_UI_CFG_ASSOC_LBL.eAssocType
//   XB_tzPGN_ASSOC_CFG.eAssocType
//   XB_tzPGN_ASSOC_STS.eAssocType
//   XB_tzPGN_EMS_CKT_CFG.eAssocType
//   XB_tzPGN_EMS_CKT_STS.eAssocType
typedef enum XB_eASSN_TYPE
{
    XB_eASSN_TYPE_INVALID               =   0,
    XB_eASSN_TYPE_DC_INPUT              =   1,
    XB_eASSN_TYPE_DC_OUT                =   2,
    XB_eASSN_TYPE_DC_INPUT_OUT          =   3,
    XB_eASSN_TYPE_RESERVED              =   4,
    XB_eASSN_TYPE_AC_INPUT              =   5,
    XB_eASSN_TYPE_AC_OUT                =   6,
    XB_eASSN_TYPE_AC_INPUT_OUT          =   7
} XB_teASSN_TYPE;

// Operating State, AGS
// Used in the following fields:
//   XB_tzPGN_AGS_STS.eOpState
typedef enum XB_eOP_STATE_AGS
{
    XB_eOP_STATE_AGS_QUIET_TIME         = 265,
    XB_eOP_STATE_AGS_AUTO_ON            = 266,
    XB_eOP_STATE_AGS_AUTO_OFF           = 267,
    XB_eOP_STATE_AGS_MANUAL_ON          = 268,
    XB_eOP_STATE_AGS_MANUAL_OFF         = 269,
    XB_eOP_STATE_AGS_GENERATOR_SHUTDOWN = 270,
    XB_eOP_STATE_AGS_EXTERNAL_SHUTDOWN  = 271,
    XB_eOP_STATE_AGS_AGS_FAULT          = 272,
    XB_eOP_STATE_AGS_SUSPEND            = 273,
    XB_eOP_STATE_AGS_NOT_OPERATING      = 274
} XB_teOP_STATE_AGS;

// Network State
// Used in the following fields:
//   XB_tzPGN_STS.eNetworkState
typedef enum XB_eNETWORK_STATE
{
    XB_eNETWORK_STATE_ERROR_ACTIVE      =   0,
    XB_eNETWORK_STATE_ERROR_PASSIVE     =   1,
    XB_eNETWORK_STATE_BUS_OFF           =   2,
    XB_eNETWORK_STATE_UNKNOWN           =   3
} XB_teNETWORK_STATE;

// Clear Item Identifier
// Used in the following fields:
//   XB_tzPGN_CLEAR_CMD.eListItem
typedef enum XB_eCLR_ITEM_ID
{
    XB_eCLR_ITEM_ID_NONE                =   0,
    XB_eCLR_ITEM_ID_FAULT_LOG           =   1,
    XB_eCLR_ITEM_ID_ACTIVE_FAULTS       =   2,
    XB_eCLR_ITEM_ID_WARNING_LOG         =   4,
    XB_eCLR_ITEM_ID_ACTIVE_WARNINGS     =   8,
    XB_eCLR_ITEM_ID_STATE_EVENT_LOG     =  16,
    XB_eCLR_ITEM_ID_COMM_STATS          =  32,
    XB_eCLR_ITEM_ID_STATS               =  64,
    XB_eCLR_ITEM_ID_USER_STATS          = 128,
    XB_eCLR_ITEM_ID_ALL                 = 255
} XB_teCLR_ITEM_ID;

// Group Function Transmit And Receive PGN List
// Used in the following fields:
//   XB_tzPGN_PGN_LIST_TX.eTXedPgnGroupFunctionCode
//   XB_tzPGN_PGN_LIST_RX.eRXedPgnGroupFunctionCode
typedef enum XB_eGRP_FUNC_TX_AND_RX_PGN_LIST
{
    XB_eGRP_FUNC_TX_AND_RX_PGN_LIST_TX_PGN_LIST_MESSAGE =   0,
    XB_eGRP_FUNC_TX_AND_RX_PGN_LIST_RX_PGN_LIST_MESSAGE =   1
} XB_teGRP_FUNC_TX_AND_RX_PGN_LIST;

// Charger Algorithm
// Used in the following fields:
//   XB_tzPGN_CHG_STS.eChgAlgorithm
//   XB_tzPGN_CHG_CFG.eChgAlgorithm
typedef enum XB_eCHG_ALG
{
    XB_eCHG_ALG_INVALID                 =   0,
    XB_eCHG_ALG_3STAGE                  =   1,
    XB_eCHG_ALG_2STAGE_NO_FLOAT         =   2,
    XB_eCHG_ALG_CVCC                    =   3,
    XB_eCHG_ALG_TRICKLE                 =   4,
    XB_eCHG_ALG_4STAGE                  =   5,
    XB_eCHG_ALG_RESERVED                = 253,
    XB_eCHG_ALG_OUTOF_RANGE             = 254,
    XB_eCHG_ALG_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teCHG_ALG;

// Inverter Mode
// Used in the following fields:
//   XB_tzPGN_INV_CFG.eInvMode
//   XB_tzPGN_INV_STS2.eInvMode
typedef enum XB_eINV_MODE
{
    XB_eINV_MODE_INVALID                =   0,
    XB_eINV_MODE_SINGLE_PHASE_STAND_ALONE =   1,
    XB_eINV_MODE_SINGLE_PHASE_MASTER    =  11,
    XB_eINV_MODE_SINGLE_PHASE_SLAVE     =  12,
    XB_eINV_MODE_SPLIT_PHASE_STAND_ALONE =  20,
    XB_eINV_MODE_SPLIT_PHASE_MASTER     =  21,
    XB_eINV_MODE_SPLIT_PHASE_SLAVE      =  22,
    XB_eINV_MODE_TWO_PHASE_PHASE1MASTER =  23,
    XB_eINV_MODE_TWO_PHASE_PHASE1SLAVE  =  24,
    XB_eINV_MODE_TWO_PHASE_PHASE2MASTER =  25,
    XB_eINV_MODE_TWO_PHASE_PHASE2SLAVE  =  26,
    XB_eINV_MODE_THREE_PHASE_STAND_ALONE =  30,
    XB_eINV_MODE_THREE_PHASE_MASTER     =  31,
    XB_eINV_MODE_THREE_PHASE_SLAVE      =  32,
    XB_eINV_MODE_THREE_PHASE_PHASE1MASTER =  33,
    XB_eINV_MODE_THREE_PHASE_PHASE1SLAVE =  34,
    XB_eINV_MODE_THREE_PHASE_PHASE2MASTER =  35,
    XB_eINV_MODE_THREE_PHASE_PHASE2SLAVE =  36,
    XB_eINV_MODE_THREE_PHASE_PHASE3MASTER =  37,
    XB_eINV_MODE_THREE_PHASE_PHASE3SLAVE =  38,
    XB_eINV_MODE_RESERVED               = 253,
    XB_eINV_MODE_OUT_OF_RANGE           = 254,
    XB_eINV_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teINV_MODE;

// Battery Type
// Used in the following fields:
//   XB_tzPGN_BATT_STS2.eBattType
//   XB_tzPGN_CHG_CFG_BULK.eBattType
//   XB_tzPGN_CHG_CFG_ABSORP.eBattType
//   XB_tzPGN_CHG_CFG_OVERCHARGE.eBattType
//   XB_tzPGN_CHG_CFG_FLOAT.eBattType
//   XB_tzPGN_CHG_CFG_EQUALIZE.eBattType
//   XB_tzPGN_CHG_CFG_CV_CI.eBattType
//   XB_tzPGN_DC_SRC_CFG_BATT.eBattType
//   XB_tzPGN_BMS_CFG.eBattType
typedef enum XB_eBATT_TYPE
{
    XB_eBATT_TYPE_FLOODED               =   0,
    XB_eBATT_TYPE_GEL                   =   1,
    XB_eBATT_TYPE_AGM                   =   2,
    XB_eBATT_TYPE_CUSTOM                =   3,
    XB_eBATT_TYPE_DEEP_CYCLE            =   4,
    XB_eBATT_TYPE_OPTIMA                =   5,
    XB_eBATT_TYPE_LITHIUM_ION           =   6,
    XB_eBATT_TYPE_RESERVED              = 253,
    XB_eBATT_TYPE_OUT_OF_RANGE          = 254,
    XB_eBATT_TYPE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teBATT_TYPE;

// Charger Mode
// Used in the following fields:
//   XB_tzPGN_CHG_STS.eChgMode
//   XB_tzPGN_CHG_CFG.eChgMode
typedef enum XB_eCHG_MODE
{
    XB_eCHG_MODE_STANDALONE             =   0,
    XB_eCHG_MODE_PRIMARY                =   1,
    XB_eCHG_MODE_SECONDARY              =   2,
    XB_eCHG_MODE_ECHO                   =   3,
    XB_eCHG_MODE_RESERVED               = 253,
    XB_eCHG_MODE_OUTOF_RANGE            = 254,
    XB_eCHG_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teCHG_MODE;

// Operating State, Inverter
// Used in the following fields:
//   XB_tzPGN_INV_STS.eOpState
//   XB_tzPGN_INV_STS2.eOpState
typedef enum XB_eOP_STATE_INV
{
    XB_eOP_STATE_INV_INVERT             = 1024,
    XB_eOP_STATE_INV_AC_PASSTHRU        = 1025,
    XB_eOP_STATE_INV_APS_ONLY           = 1026,
    XB_eOP_STATE_INV_LOAD_SENSE_ACTIVE  = 1027,
    XB_eOP_STATE_INV_INVERTER_DISABLED  = 1028,
    XB_eOP_STATE_INV_LOAD_SENSE_READY   = 1029,
    XB_eOP_STATE_INV_ENGAGING_INVERTER  = 1030,
    XB_eOP_STATE_INV_INVERT_FAULT       = 1031,
    XB_eOP_STATE_INV_INVERTER_STANDBY   = 1032,
    XB_eOP_STATE_INV_GRID_TIED          = 1033,
    XB_eOP_STATE_INV_GRID_SUPPORT       = 1034,
    XB_eOP_STATE_INV_GEN_SUPPORT        = 1035,
    XB_eOP_STATE_INV_SELL_TO_GRID       = 1036,
    XB_eOP_STATE_INV_LOAD_SHAVING       = 1037,
    XB_eOP_STATE_INV_GRID_FREQUENCY_STABILIZATION = 1038,
    XB_eOP_STATE_INV_AC_COUPLING        = 1039,
    XB_eOP_STATE_INV_REVERSE_IBATT      = 1040
} XB_teOP_STATE_INV;

// AGS Desired State
// Used in the following fields:
//   XB_tzPGN_AGS_CTRL_CMD.eDesiredState
typedef enum XB_eAGS_DESIRED_STATE
{
    XB_eAGS_DESIRED_STATE_MANUAL_OFF    =   0,
    XB_eAGS_DESIRED_STATE_MANUAL_ON     =   1,
    XB_eAGS_DESIRED_STATE_AUTOMATIC     =   2,
    XB_eAGS_DESIRED_STATE_FORCE_ON_AUTO_OFF =   3,
    XB_eAGS_DESIRED_STATE_RESERVED      = 253,
    XB_eAGS_DESIRED_STATE_OUT_OF_RANGE  = 254,
    XB_eAGS_DESIRED_STATE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teAGS_DESIRED_STATE;

// Software Module Identifier
// Used in the following fields:
//   XB_tzPGN_SW_VER_STS.eSwModId
//   XB_tzPGN_FILE_DNLD_INF.eSwModId
typedef enum XB_eSW_MOD_ID
{
    XB_eSW_MOD_ID_XAN_BUS               =   0,
    XB_eSW_MOD_ID_OPERATING_SYSTEM      =   1,
    XB_eSW_MOD_ID_APPLICATION           =   2,
    XB_eSW_MOD_ID_LOADER                =   3,
    XB_eSW_MOD_ID_RESERVED2             =   4,
    XB_eSW_MOD_ID_OTHER1                =   5,
    XB_eSW_MOD_ID_OTHER2                =   6,
    XB_eSW_MOD_ID_RESERVED              = 253,
    XB_eSW_MOD_ID_OUT_OF_RANGE          = 254,
    XB_eSW_MOD_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teSW_MOD_ID;

// Download Result Code
// Used in the following fields:
//   XB_tzPGN_FILE_DNLD_STS.eResultCode
typedef enum XB_eDL_RESULT_CODE
{
    XB_eDL_RESULT_CODE_NO_ERROR         =   0,
    XB_eDL_RESULT_CODE_INVALID_FILE_DL_INF =   1,
    XB_eDL_RESULT_CODE_INVALID_FILE_DL_BLK =   2,
    XB_eDL_RESULT_CODE_BLK_WRITE_ERR    =   3,
    XB_eDL_RESULT_CODE_FILE_CRC_ERR     =   4
} XB_teDL_RESULT_CODE;

// Generator 'On' Reason
// Used in the following fields:
//   XB_tzPGN_AGS_STS.eGenOnReason
typedef enum XB_eGEN_ON_REASON
{
    XB_eGEN_ON_REASON_NOT_ON            =   0,
    XB_eGEN_ON_REASON_DC_VOLTAGE_LOW    =   1,
    XB_eGEN_ON_REASON_BATTERY_SOC_LOW   =   2,
    XB_eGEN_ON_REASON_AC_CURRENT_HIGH   =   3,
    XB_eGEN_ON_REASON_CONTACT_CLOSED    =   4,
    XB_eGEN_ON_REASON_MANUAL_ON         =   5,
    XB_eGEN_ON_REASON_EXERCISE          =   6,
    XB_eGEN_ON_REASON_NON_QUIET_TIME    =   7,
    XB_eGEN_ON_REASON_EXTERNAL_ONVIA_AGS =   8,
    XB_eGEN_ON_REASON_EXTERNAL_ONVIA_GENERATOR =   9,
    XB_eGEN_ON_REASON_UNABLE_TO_STOP    =  10,
    XB_eGEN_ON_REASON_AC_POWER_HIGH     =  11,
    XB_eGEN_ON_REASON_DC_CURRENT_HIGH   =  12
} XB_teGEN_ON_REASON;

// Control Mode
// Used in the following fields:
//   XB_tzPGN_STS.eDesiredMode
//   XB_tzPGN_STS.eCurrentMode
//   XB_tzPGN_STS.eLastMode
//   XB_tzPGN_CTRL_CMD.eDesiredMode
typedef enum XB_eCTRL_MODE
{
    XB_eCTRL_MODE_HIBERNATE             =   0,
    XB_eCTRL_MODE_POWER_SAVE            =   1,
    XB_eCTRL_MODE_SAFE                  =   2,
    XB_eCTRL_MODE_OPERATING             =   3,
    XB_eCTRL_MODE_DIAGNOSTIC            =   4,
    XB_eCTRL_MODE_REMOTE_POWER_OFF      =   5,
    XB_eCTRL_MODE_CBG_BACKUP            =  10,
    XB_eCTRL_MODE_CBG_SELF_CONSUMP      =  11,
    XB_eCTRL_MODE_CBG_SELF_CONSUMP_TIME =  12,
    XB_eCTRL_MODE_CBG_SEND_CFG          =  13,
    XB_eCTRL_MODE_CBG_PUSH_CFG          =  14,
    XB_eCTRL_MODE_LAST_MODE             = 252,
    XB_eCTRL_MODE_RESERVED              = 253,
    XB_eCTRL_MODE_OUT_OF_RANGE          = 254,
    XB_eCTRL_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teCTRL_MODE;

// User Access Mode
// Used in the following fields:
//   XB_tzPGN_UI_CFG.eAccMode
typedef enum XB_eUSER_ACCESS_MODE
{
    XB_eUSER_ACCESS_MODE_SIMPLE         =   0,
    XB_eUSER_ACCESS_MODE_SAVVY          =   1,
    XB_eUSER_ACCESS_MODE_DEALER         =   2,
    XB_eUSER_ACCESS_MODE_OEM            =   3,
    XB_eUSER_ACCESS_MODE_MFG            =   4,
    XB_eUSER_ACCESS_MODE_RESERVED       = 253,
    XB_eUSER_ACCESS_MODE_OUT_OF_RANGE   = 254,
    XB_eUSER_ACCESS_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teUSER_ACCESS_MODE;

// Splash Screen Style
// Used in the following fields:
//   XB_tzPGN_UI_CFG.eSplashScrnStyl
typedef enum XB_eSPLASH_SCRN_STYLE
{
    XB_eSPLASH_SCRN_STYLE_STILL         =   0,
    XB_eSPLASH_SCRN_STYLE_BOUNCE        =   1,
    XB_eSPLASH_SCRN_STYLE_MARQUEE_H     =   2,
    XB_eSPLASH_SCRN_STYLE_MARQUEE_V     =   3,
    XB_eSPLASH_SCRN_STYLE_RESERVED      = 253,
    XB_eSPLASH_SCRN_STYLE_OUT_OF_RANGE  = 254,
    XB_eSPLASH_SCRN_STYLE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teSPLASH_SCRN_STYLE;

// Operating State, Charger
// Used in the following fields:
//   XB_tzPGN_CHG_STS.eOpState
typedef enum XB_eOP_STATE_CHG
{
    XB_eOP_STATE_CHG_NOT_CHARGING       = 768,
    XB_eOP_STATE_CHG_BULK               = 769,
    XB_eOP_STATE_CHG_ABSORPTION         = 770,
    XB_eOP_STATE_CHG_OVERCHARGE         = 771,
    XB_eOP_STATE_CHG_EQUALIZE           = 772,
    XB_eOP_STATE_CHG_FLOAT              = 773,
    XB_eOP_STATE_CHG_NO_FLOAT           = 774,
    XB_eOP_STATE_CHG_CONSTANT_VI        = 775,
    XB_eOP_STATE_CHG_CHARGER_DISABLED   = 776,
    XB_eOP_STATE_CHG_QUALIFYING_AC      = 777,
    XB_eOP_STATE_CHG_QUALIFYING_APS     = 778,
    XB_eOP_STATE_CHG_ENGAGING_CHARGER   = 779,
    XB_eOP_STATE_CHG_CHARGE_FAULT       = 780,
    XB_eOP_STATE_CHG_CHARGER_SUSPEND    = 781,
    XB_eOP_STATE_CHG_AC_GOOD            = 782,
    XB_eOP_STATE_CHG_APS_GOOD           = 783,
    XB_eOP_STATE_CHG_AC_FAULT           = 784,
    XB_eOP_STATE_CHG_CHARGE             = 785,
    XB_eOP_STATE_CHG_ABSORPTION_EXIT_PENDING = 786,
    XB_eOP_STATE_CHG_GROUND_FAULT       = 787,
    XB_eOP_STATE_CHG_AC_GOOD_PENDING    = 788,
    XB_eOP_STATE_CHG_LOAD_SHAVING       = 789,
    XB_eOP_STATE_CHG_AC_SUPPORT         = 790,
    XB_eOP_STATE_CHG_AC_COUPLED         = 791,
    XB_eOP_STATE_CHG_AC_COUPLED_BULK    = 792,
    XB_eOP_STATE_CHG_AC_COUPLED_ABSORPTION = 793,
    XB_eOP_STATE_CHG_AC_COUPLED_FLOAT   = 794,
    XB_eOP_STATE_CHG_AC_COUPLED_NO_FLOAT = 795,
    XB_eOP_STATE_CHG_EXTERNAL_BMS       = 796,
    XB_eOP_STATE_CHG_LOAD_SENSE         = 797
} XB_teOP_STATE_CHG;

// Operating State, User Interface
// Used in the following fields:
//   XB_tzPGN_UI_STS.eOpState
typedef enum XB_eOP_STATE_UI
{
    XB_eOP_STATE_UI_SCREEN_SAVER        = 1280,
    XB_eOP_STATE_UI_ACTIVE              = 1281
} XB_teOP_STATE_UI;

// Operating State, Loader
// Used in the following fields:
//   XB_tzPGN_FILE_DNLD_STS.eOpState
typedef enum XB_eOP_STATE_LDR
{
    XB_eOP_STATE_LDR_WAIT_FILE_DL_INF   =   0,
    XB_eOP_STATE_LDR_WAIT_FILE_DL_BLK   =   1,
    XB_eOP_STATE_LDR_WRITING_BLK        =   2,
    XB_eOP_STATE_LDR_CHECKING_FILE      =   3,
    XB_eOP_STATE_LDR_WAIT_REBOOT        =   4,
    XB_eOP_STATE_LDR_ERASING_BLK        =   5
} XB_teOP_STATE_LDR;

// Time, Day Of Week
// Used in the following fields:
//   XB_tzPGN_DATE_TIME_STS.eLocalDow
//   XB_tzPGN_DATE_TIME_CFG.eLocalDow
typedef enum XB_eTIME_DOW
{
    XB_eTIME_DOW_SUNDAY                 =   0,
    XB_eTIME_DOW_MONDAY                 =   1,
    XB_eTIME_DOW_TUESDAY                =   2,
    XB_eTIME_DOW_WEDNESDAY              =   3,
    XB_eTIME_DOW_THURSDAY               =   4,
    XB_eTIME_DOW_FRIDAY                 =   5,
    XB_eTIME_DOW_SATURDAY               =   6,
    XB_eTIME_DOW_INVALID                =   7
} XB_teTIME_DOW;

// Configuration Type
// Used in the following fields:
//   XB_tzPGN_PRODUCT_CFG.eCfgType
//   XB_tzPGN_PRODUCT_CFG.eRegionType
//   XB_tzPGN_CURVE_CFG.eCfgType
//   XB_tzPGN_GRID_INTERACTION_CFG.eCfgType
//   XB_tzPGN_SPS_CFG.eCfgType
//   XB_tzPGN_UI_CFG_WARN_TXT.eCfgType
//   XB_tzPGN_GW_CFG_ADDR_TRANS_OTH_INTF.eCfgType
//   XB_tzPGN_AGS_CFG_AC_I.eCfgType
//   XB_tzPGN_UI_CFG_FAULT_BEHAVIOUR.eCfgType
//   XB_tzPGN_AC_OUT_CFG_UV_RMS.eCfgType
//   XB_tzPGN_AGS_CFG_BATT_SOC.eCfgType
//   XB_tzPGN_GW_CFG.eCfgType
//   XB_tzPGN_AGS_CFG_AC_PWR.eCfgType
//   XB_tzPGN_STRING_CFG.eCfgType
//   XB_tzPGN_UI_CFG_ASSOC_LBL.eCfgType
//   XB_tzPGN_GW_CFG_MSG_FILTERS_XB_INTF.eCfgType
//   XB_tzPGN_AC_IN_CFG_OF.eCfgType
//   XB_tzPGN_DC_SRC_CFG_UV.eCfgType
//   XB_tzPGN_DC_SRC_CFG_OV.eCfgType
//   XB_tzPGN_DC_SRC_CFG_UI.eCfgType
//   XB_tzPGN_DC_SRC_CFG_OI.eCfgType
//   XB_tzPGN_DC_SRC_CFG_RIP_OV_PEAK.eCfgType
//   XB_tzPGN_AC_OUT_CFG.eCfgType
//   XB_tzPGN_AC_IN_CFG_UV_RMS.eCfgType
//   XB_tzPGN_AC_IN_CFG_UV_PEAK.eCfgType
//   XB_tzPGN_AC_IN_CFG_UV_AVG.eCfgType
//   XB_tzPGN_AC_IN_CFG_OV_RMS.eCfgType
//   XB_tzPGN_AC_IN_CFG_OV_PEAK.eCfgType
//   XB_tzPGN_AC_IN_CFG_OV_AVG.eCfgType
//   XB_tzPGN_APS_CFG_UV.eCfgType
//   XB_tzPGN_APS_CFG_OV.eCfgType
//   XB_tzPGN_OPS_CFG_UV.eCfgType
//   XB_tzPGN_OPS_CFG_OV.eCfgType
//   XB_tzPGN_HV_DC_BUS_CFG_UV.eCfgType
//   XB_tzPGN_HV_DC_BUS_CFG_OV.eCfgType
//   XB_tzPGN_EXT_TEMP_CFG_UT.eCfgType
//   XB_tzPGN_EXT_TEMP_CFG_OT.eCfgType
//   XB_tzPGN_INT_TEMP_CFG_UT.eCfgType
//   XB_tzPGN_INT_TEMP_CFG_OT.eCfgType
//   XB_tzPGN_CHG_CFG_BULK.eCfgType
//   XB_tzPGN_GFS_CFG.eCfgType
//   XB_tzPGN_CHG_CFG_ABSORP.eCfgType
//   XB_tzPGN_CHG_CFG_OVERCHARGE.eCfgType
//   XB_tzPGN_CHG_CFG_FLOAT.eCfgType
//   XB_tzPGN_CHG_CFG_EQUALIZE.eCfgType
//   XB_tzPGN_CHG_CFG_CV_CI.eCfgType
//   XB_tzPGN_DC_SRC_CFG_BATT.eCfgType
//   XB_tzPGN_INV_CFG_LOAD_SENSE.eCfgType
//   XB_tzPGN_INV_CFG.eCfgType
//   XB_tzPGN_ASSOC_CFG.eCfgType
//   XB_tzPGN_AC_IN_CFG.eCfgType
//   XB_tzPGN_CHG_CFG_MULTIPLE_NODES.eCfgType
//   XB_tzPGN_BATT_MON_CFG.eCfgType
//   XB_tzPGN_AGS_CFG.eCfgType
//   XB_tzPGN_AGS_CFG_GEN.eCfgType
//   XB_tzPGN_PER_XMIT_CFG.eCfgType
//   XB_tzPGN_RX_TO_CFG.eCfgType
//   XB_tzPGN_EN_DIS_CFG.eCfgType
//   XB_tzPGN_GRID_TIE_CFG.eCfgType
//   XB_tzPGN_AGS_CFG_CNTCT_CLS.eCfgType
//   XB_tzPGN_AC_IN_CFG_UF.eCfgType
//   XB_tzPGN_DATE_TIME_CFG.eCfgType
//   XB_tzPGN_UI_CFG_FAULT_TXT.eCfgType
//   XB_tzPGN_NAME_CFG.eCfgType
//   XB_tzPGN_AGS_CFG_DC_V.eCfgType
//   XB_tzPGN_UI_CFG.eCfgType
//   XB_tzPGN_CHG_CFG.eCfgType
//   XB_tzPGN_AC_OUT_CFG_OV_RMS.eCfgType
//   XB_tzPGN_DC_SRC_CFG_PV_ARRAY.eCfgType
//   XB_tzPGN_UI_CFG_WARN_BEHAVIOUR.eCfgType
//   XB_tzPGN_AGS_CFG_DC_I.eCfgType
//   XB_tzPGN_GW_CFG_ADDR_TRANS_XB_INTF.eCfgType
//   XB_tzPGN_GW_CFG_MSG_FILTERS_OTH_INTF.eCfgType
//   XB_tzPGN_GW_CFG_ID_TRANS.eCfgType
//   XB_tzPGN_DC_SRC_CFG_PV_ARRAY2.eCfgType
//   XB_tzPGN_AC_XFER_SW_CFG.eCfgType
//   XB_tzPGN_EN_DIS_CFG_TOD.eCfgType
//   XB_tzPGN_PID_CFG.eCfgType
//   XB_tzPGN_UI_CFG_NODE_LBL.eCfgType
//   XB_tzPGN_UI_CFG_SPLASH_IMG.eCfgType
//   XB_tzPGN_SPS_CFG_TRIG.eCfgType
//   XB_tzPGN_CFG.eCfgType
//   XB_tzPGN_FEATURE_EN_DIS_CFG.eCfgType
//   XB_tzPGN_AC_LINE_CFG.eCfgType
//   XB_tzPGN_EMS_CKT_CFG.eCfgType
//   XB_tzPGN_EMS_CFG.eCfgType
//   XB_tzPGN_SPS_CFG_BATT_SOC.eCfgType
//   XB_tzPGN_BMS_CFG.eCfgType
//   XB_tzPGN_BATT_MON_CFG_SYNC.eCfgType
//   XB_tzPGN_RS485CFG.eCfgType
//   XB_tzPGN_GVS_CFG.eCfgType
//   XB_tzPGN_GRID_TIE_CFG_BATT_SOC.eCfgType
typedef enum XB_eCFG_TYPE
{
    XB_eCFG_TYPE_USER                   =   0,
    XB_eCFG_TYPE_OEM                    =   1,
    XB_eCFG_TYPE_FACTORY                =   2,
    XB_eCFG_TYPE_RESERVED               =   3
} XB_teCFG_TYPE;

// Battery Chemistry
// Used in the following fields:
//   XB_tzPGN_DC_SRC_CFG_BATT.eBattChem
typedef enum XB_eBATT_CHEM
{
    XB_eBATT_CHEM_INVALID               =   0,
    XB_eBATT_CHEM_LEAD_ACID             =   1,
    XB_eBATT_CHEM_LI_ION                =   2,
    XB_eBATT_CHEM_NI_CAD                =   3,
    XB_eBATT_CHEM_ZN_O                  =   4,
    XB_eBATT_CHEM_NI_MH                 =   5,
    XB_eBATT_CHEM_PB_CA                 =   6,
    XB_eBATT_CHEM_RESERVED              = 253,
    XB_eBATT_CHEM_OUT_OF_RANGE          = 254,
    XB_eBATT_CHEM_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teBATT_CHEM;

// Generator 'Off' Reason
// Used in the following fields:
//   XB_tzPGN_AGS_STS.eGenOffReason
typedef enum XB_eGEN_OFF_REASON
{
    XB_eGEN_OFF_REASON_NOT_OFF          =   0,
    XB_eGEN_OFF_REASON_DC_VOLTAGE_HIGH  =   1,
    XB_eGEN_OFF_REASON_BATTERY_SOC_HIGH =   2,
    XB_eGEN_OFF_REASON_AC_CURRENT_LOW   =   3,
    XB_eGEN_OFF_REASON_CONTACT_OPENED   =   4,
    XB_eGEN_OFF_REASON_REACHED_ABSORPTION =   5,
    XB_eGEN_OFF_REASON_REACHED_FLOAT    =   6,
    XB_eGEN_OFF_REASON_MANUAL_OFF       =   7,
    XB_eGEN_OFF_REASON_MAX_RUN_TIME     =   8,
    XB_eGEN_OFF_REASON_MAX_AUTO_CYCLE   =   9,
    XB_eGEN_OFF_REASON_EXERCISE_DONE    =  10,
    XB_eGEN_OFF_REASON_QUIET_TIME       =  11,
    XB_eGEN_OFF_REASON_EXTERNAL_OFFVIA_AGS =  12,
    XB_eGEN_OFF_REASON_SAFE_MODE        =  13,
    XB_eGEN_OFF_REASON_EXTERNAL_OFFVIA_GENERATOR =  14,
    XB_eGEN_OFF_REASON_EXTERNAL_SHUTDOWN =  15,
    XB_eGEN_OFF_REASON_AUTO_OFF         =  16,
    XB_eGEN_OFF_REASON_FAULT            =  17,
    XB_eGEN_OFF_REASON_UNABLE_TO_START  =  18,
    XB_eGEN_OFF_REASON_AC_POWER_LOW     =  19,
    XB_eGEN_OFF_REASON_DC_CURRENT_LOW   =  20,
    XB_eGEN_OFF_REASON_AC_GOOD          =  21
} XB_teGEN_OFF_REASON;

// AC Waveforms
// Used in the following fields:
//   XB_tzPGN_AC_OUT_STS_RMS.eWaveform
//   XB_tzPGN_AC_OUT_STS_PEAK.eWaveform
//   XB_tzPGN_AC_OUT_STS_AVG.eWaveform
typedef enum XB_eAC_WAVEFORMS
{
    XB_eAC_WAVEFORMS_INVALID            =   0,
    XB_eAC_WAVEFORMS_SINE_WAVE          =   1,
    XB_eAC_WAVEFORMS_MODIFIED_SINE_WAVE =   2,
    XB_eAC_WAVEFORMS_RESERVED           = 253,
    XB_eAC_WAVEFORMS_OUT_OF_RANGE       = 254,
    XB_eAC_WAVEFORMS_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teAC_WAVEFORMS;

// Contact Identifier
// Used in the following fields:
//   XB_tzPGN_DIAG_CNTCT_STS.eCntctId
//   XB_tzPGN_DIAG_CNTCT_CMD.eCntctId
typedef enum XB_eCONTACT_ID
{
    XB_eCONTACT_ID_COOLDOWN_RELAY       =   0,
    XB_eCONTACT_ID_PREHEAT_RELAY        =   1,
    XB_eCONTACT_ID_START_RELAY          =   2,
    XB_eCONTACT_ID_RUN_STOP_RELAY       =   3,
    XB_eCONTACT_ID_ESCAPE_BUTTON        =   4,
    XB_eCONTACT_ID_ENTER_BUTTON         =   5,
    XB_eCONTACT_ID_SCROLL_BUTTON        =   6,
    XB_eCONTACT_ID_MENU_BUTTON          =   7,
    XB_eCONTACT_ID_SYSTEM_ON_BUTTON     =   8,
    XB_eCONTACT_ID_EXTERNAL_OFF         =   9,
    XB_eCONTACT_ID_EXTERNAL_ON          =  10,
    XB_eCONTACT_ID_THERMOSTAT1          =  11,
    XB_eCONTACT_ID_THERMOSTAT2          =  12,
    XB_eCONTACT_ID_B_PLUS_SENSE         =  13,
    XB_eCONTACT_ID_UP_ARROW_BUTTON      =  14,
    XB_eCONTACT_ID_DOWN_ARROW_BUTTON    =  15,
    XB_eCONTACT_ID_EXIT_BUTTON          =  16,
    XB_eCONTACT_ID_AGS_EXTERNAL_SHUTDOWN =  17,
    XB_eCONTACT_ID_RESET_BUTTON         =  18,
    XB_eCONTACT_ID_INVERT_ENABLE_BUTTON =  19,
    XB_eCONTACT_ID_CHARGE_ENABLE_BUTTON =  20,
    XB_eCONTACT_ID_TRANSFER_RELAY       =  21,
    XB_eCONTACT_ID_TRIAC_RELAY          =  22,
    XB_eCONTACT_ID_DC_UNDER_VOLTAGE_RELAY =  23,
    XB_eCONTACT_ID_NETWORK_POWER_SUPPLY_ENABLE =  24,
    XB_eCONTACT_ID_AUXILIARY_POWER_SUPPLY_ENABLE =  25,
    XB_eCONTACT_ID_TRIAC                =  26,
    XB_eCONTACT_ID_DCDC_STAGE_ENABLE    =  27,
    XB_eCONTACT_ID_INVERT_STAGE_ENABLE  =  28,
    XB_eCONTACT_ID_OUTPUT_RELAY_ENABLE  =  29,
    XB_eCONTACT_ID_AC1RELAY             =  30,
    XB_eCONTACT_ID_AC2RELAY             =  31,
    XB_eCONTACT_ID_NEUTRAL_RELAY        =  32,
    XB_eCONTACT_ID_EQUALIZE_BUTTON      =  33,
    XB_eCONTACT_ID_BUZZER               =  34
} XB_teCONTACT_ID;

// Indicator Identifier
// Used in the following fields:
//   XB_tzPGN_DIAG_INDIC_CMD.eIndicId
typedef enum XB_eINDICATOR_ID
{
    XB_eINDICATOR_ID_FAULT              =   0,
    XB_eINDICATOR_ID_NETWORK_ACTIVITY   =   1,
    XB_eINDICATOR_ID_GENERATOR_ON       =   2,
    XB_eINDICATOR_ID_POWER_ON           =   3,
    XB_eINDICATOR_ID_EXTERNAL_ACTION    =   4,
    XB_eINDICATOR_ID_CHARGING           =   5,
    XB_eINDICATOR_ID_INVERTING          =   6,
    XB_eINDICATOR_ID_AC_IN              =   7,
    XB_eINDICATOR_ID_BUZZER             =   8,
    XB_eINDICATOR_ID_AGS_EXTERNAL_ON    =   9,
    XB_eINDICATOR_ID_BACKLIGHT          =  10,
    XB_eINDICATOR_ID_LOW_BATTERY        =  11,
    XB_eINDICATOR_ID_CHARGE_ENABLE      =  12,
    XB_eINDICATOR_ID_INVERT_ENABLE      =  13,
    XB_eINDICATOR_ID_BULK               =  14,
    XB_eINDICATOR_ID_ABSORPTION         =  15,
    XB_eINDICATOR_ID_FLOAT              =  16,
    XB_eINDICATOR_ID_EQUALIZE           =  17,
    XB_eINDICATOR_ID_NETWORK_RED_XAN_BUS =  18,
    XB_eINDICATOR_ID_NETWORK_GREEN_XAN_BUS =  19,
    XB_eINDICATOR_ID_NETWORK_RED_OTHER  =  20,
    XB_eINDICATOR_ID_NETWORK_GREEN_OTHER =  21,
    XB_eINDICATOR_ID_CURRENT_LEVEL1     =  22,
    XB_eINDICATOR_ID_CURRENT_LEVEL2     =  23,
    XB_eINDICATOR_ID_CURRENT_LEVEL3     =  24,
    XB_eINDICATOR_ID_CURRENT_LEVEL4     =  25,
    XB_eINDICATOR_ID_CURRENT_LEVEL5     =  26,
    XB_eINDICATOR_ID_VOLTAGE_LEVEL1     =  27,
    XB_eINDICATOR_ID_VOLTAGE_LEVEL2     =  28,
    XB_eINDICATOR_ID_VOLTAGE_LEVEL3     =  29,
    XB_eINDICATOR_ID_VOLTAGE_LEVEL4     =  30,
    XB_eINDICATOR_ID_VOLTAGE_LEVEL5     =  31
} XB_teINDICATOR_ID;

// Fan Identifier
// Used in the following fields:
//   XB_tzPGN_DIAG_FAN_CMD.eFanId
//   XB_tzPGN_FAN_STS.eFanId
//   XB_tzPGN_FAN_STATS.eFanId
typedef enum XB_eFAN_ID
{
    XB_eFAN_ID_MAIN                     =   0,
    XB_eFAN_ID_AUXILIARY                =   1
} XB_teFAN_ID;

// Battery Temperature - When No Sensor
// Used in the following fields:
//   XB_tzPGN_CHG_CFG.eBattTempNoSensor
typedef enum XB_eBATT_TEMP_WHEN_NO_SENSOR
{
    XB_eBATT_TEMP_WHEN_NO_SENSOR_COLD   =   0,
    XB_eBATT_TEMP_WHEN_NO_SENSOR_WARM   =   1,
    XB_eBATT_TEMP_WHEN_NO_SENSOR_HOT    =   2,
    XB_eBATT_TEMP_WHEN_NO_SENSOR_RESERVED = 253,
    XB_eBATT_TEMP_WHEN_NO_SENSOR_OUTOF_RANGE = 254,
    XB_eBATT_TEMP_WHEN_NO_SENSOR_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teBATT_TEMP_WHEN_NO_SENSOR;

// External Temperature Sensor Identifiers
// Used in the following fields:
//   XB_tzPGN_BATT_STS2.eTempSensId
//   XB_tzPGN_CHG_STATS_EXT_TEMP.eTempSensId
//   XB_tzPGN_DC_SRC_STS.eTempSensId
//   XB_tzPGN_EXT_TEMP_STS.eTempSensId
//   XB_tzPGN_EXT_TEMP_CFG_UT.eTempSensId
//   XB_tzPGN_EXT_TEMP_CFG_OT.eTempSensId
//   XB_tzPGN_EXT_TEMP_STATS2.eTempSensId
//   XB_tzPGN_INV_STATS_EXT_TEMP.eTempSensId
typedef enum XB_eEXT_TEMP_SENSOR_IDS
{
    XB_eEXT_TEMP_SENSOR_IDS_BATTERY1    =   0,
    XB_eEXT_TEMP_SENSOR_IDS_BATTERY2    =   1,
    XB_eEXT_TEMP_SENSOR_IDS_BATTERY3    =   2,
    XB_eEXT_TEMP_SENSOR_IDS_BATTERY4    =   3,
    XB_eEXT_TEMP_SENSOR_IDS_BATTERY5    =   4,
    XB_eEXT_TEMP_SENSOR_IDS_BATTERY6    =   5,
    XB_eEXT_TEMP_SENSOR_IDS_AMBIENT1    =  10,
    XB_eEXT_TEMP_SENSOR_IDS_AMBIENT2    =  11,
    XB_eEXT_TEMP_SENSOR_IDS_AMBIENT3    =  12,
    XB_eEXT_TEMP_SENSOR_IDS_AMBIENT4    =  13,
    XB_eEXT_TEMP_SENSOR_IDS_SHUNT1      =  14,
    XB_eEXT_TEMP_SENSOR_IDS_SHUNT2      =  15,
    XB_eEXT_TEMP_SENSOR_IDS_SHUNT3      =  16,
    XB_eEXT_TEMP_SENSOR_IDS_SHUNT4      =  17,
    XB_eEXT_TEMP_SENSOR_IDS_RESERVED    = 253,
    XB_eEXT_TEMP_SENSOR_IDS_OUTOF_RANGE = 254,
    XB_eEXT_TEMP_SENSOR_IDS_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teEXT_TEMP_SENSOR_IDS;

// Internal Temperature Sensor Identifiers
// Used in the following fields:
//   XB_tzPGN_INV_STATS_INT_TEMP.eTempSensId
//   XB_tzPGN_CHG_STATS_INT_TEMP.eTempSensId
//   XB_tzPGN_INT_TEMP_STS.eTempSensId
//   XB_tzPGN_INT_TEMP_CFG_UT.eTempSensId
//   XB_tzPGN_INT_TEMP_CFG_OT.eTempSensId
//   XB_tzPGN_INT_TEMP_STATS2.eTempSensId
typedef enum XB_eINT_TEMP_SENSOR_IDS
{
    XB_eINT_TEMP_SENSOR_IDS_TRANSISTOR1 =   0,
    XB_eINT_TEMP_SENSOR_IDS_TRANSISTOR2 =   1,
    XB_eINT_TEMP_SENSOR_IDS_TRANSISTOR3 =   2,
    XB_eINT_TEMP_SENSOR_IDS_TRANSISTOR4 =   3,
    XB_eINT_TEMP_SENSOR_IDS_CAPACITOR1  =  10,
    XB_eINT_TEMP_SENSOR_IDS_CAPACITOR2  =  11,
    XB_eINT_TEMP_SENSOR_IDS_CAPACITOR3  =  12,
    XB_eINT_TEMP_SENSOR_IDS_CAPACITOR4  =  13,
    XB_eINT_TEMP_SENSOR_IDS_TRANSFORMER1 =  20,
    XB_eINT_TEMP_SENSOR_IDS_TRANSFORMER2 =  21,
    XB_eINT_TEMP_SENSOR_IDS_TRANSFORMER3 =  22,
    XB_eINT_TEMP_SENSOR_IDS_TRANSFORMER4 =  23,
    XB_eINT_TEMP_SENSOR_IDS_AMBIENT1    =  30,
    XB_eINT_TEMP_SENSOR_IDS_AMBIENT2    =  31,
    XB_eINT_TEMP_SENSOR_IDS_AMBIENT3    =  32,
    XB_eINT_TEMP_SENSOR_IDS_AMBIENT4    =  33,
    XB_eINT_TEMP_SENSOR_IDS_SHUNT1      =  34,
    XB_eINT_TEMP_SENSOR_IDS_SHUNT2      =  35,
    XB_eINT_TEMP_SENSOR_IDS_SHUNT3      =  36,
    XB_eINT_TEMP_SENSOR_IDS_SHUNT4      =  37,
    XB_eINT_TEMP_SENSOR_IDS_HEATSINK1   =  38,
    XB_eINT_TEMP_SENSOR_IDS_HEATSINK2   =  39,
    XB_eINT_TEMP_SENSOR_IDS_HEATSINK3   =  40,
    XB_eINT_TEMP_SENSOR_IDS_HEATSINK4   =  41,
    XB_eINT_TEMP_SENSOR_IDS_RESERVED    = 253,
    XB_eINT_TEMP_SENSOR_IDS_OUTOF_RANGE = 254,
    XB_eINT_TEMP_SENSOR_IDS_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teINT_TEMP_SENSOR_IDS;

// Manufacturing Step
// Used in the following fields:
//   XB_tzPGN_DIAG_MFG_CFG.eMfgStep
typedef enum XB_eMFG_STEP
{
    XB_eMFG_STEP_BOARD_TEST             =   0,
    XB_eMFG_STEP_SOAK_TEST              =   1,
    XB_eMFG_STEP_FINAL_TEST             =   2,
    XB_eMFG_STEP_RESERVED               = 253,
    XB_eMFG_STEP_OUT_OF_RANGE           = 254,
    XB_eMFG_STEP_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teMFG_STEP;

// Generator Output Type
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_GEN.eGenOutType
typedef enum XB_eGEN_OUT_TYPE
{
    XB_eGEN_OUT_TYPE_AC_OUTPUT          =   0,
    XB_eGEN_OUT_TYPE_DC_OUTPUT          =   1,
    XB_eGEN_OUT_TYPE_RESERVED           = 253,
    XB_eGEN_OUT_TYPE_OUT_OF_RANGE       = 254,
    XB_eGEN_OUT_TYPE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teGEN_OUT_TYPE;

// Transfer Switch Mode
// Used in the following fields:
//   XB_tzPGN_INV_CFG.eXferSwMode
//   XB_tzPGN_AC_XFER_SW_CFG.eXferSwMode
typedef enum XB_eXFR_SWITCH_MODE
{
    XB_eXFR_SWITCH_MODE_UNKNOWN         =   0,
    XB_eXFR_SWITCH_MODE_GRID_PRIORITY   =   1,
    XB_eXFR_SWITCH_MODE_GENERATOR_PRIORITY =   2,
    XB_eXFR_SWITCH_MODE_RESERVED        = 253,
    XB_eXFR_SWITCH_MODE_OUT_OF_RANGE    = 254,
    XB_eXFR_SWITCH_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teXFR_SWITCH_MODE;

// Measurement Unit
// Used in the following fields:
//   XB_tzPGN_UI_CFG.eMeasUnit
//   XB_tzPGN_BATT_MON_CFG.eTempUnit
typedef enum XB_eMEASUREMENT_UNIT
{
    XB_eMEASUREMENT_UNIT_IMPERIAL       =   0,
    XB_eMEASUREMENT_UNIT_STANDARD       =   1,
    XB_eMEASUREMENT_UNIT_METRIC         =   2,
    XB_eMEASUREMENT_UNIT_RESERVED       = 253,
    XB_eMEASUREMENT_UNIT_OUT_OF_RANGE   = 254,
    XB_eMEASUREMENT_UNIT_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teMEASUREMENT_UNIT;

// Relay Identifier
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_GEN.eRelayId
typedef enum XB_eRELAY_ID
{
    XB_eRELAY_ID_RELAY1                 =   1,
    XB_eRELAY_ID_RELAY2                 =   2,
    XB_eRELAY_ID_RELAY3                 =   3,
    XB_eRELAY_ID_RELAY4                 =   4,
    XB_eRELAY_ID_RELAY5                 =   5,
    XB_eRELAY_ID_RESERVED               = 253,
    XB_eRELAY_ID_OUT_OF_RANGE           = 254,
    XB_eRELAY_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teRELAY_ID;

// Relay Function
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_GEN.eRelayFunc
typedef enum XB_eRELAY_FUNC
{
    XB_eRELAY_FUNC_NOT_USED             =   0,
    XB_eRELAY_FUNC_RUN                  =   1,
    XB_eRELAY_FUNC_GLOWAND_STOP         =   2,
    XB_eRELAY_FUNC_GLOWAND_STOPWITH_SHUTDOWN_BYPASS =   3,
    XB_eRELAY_FUNC_CRANK                =   4,
    XB_eRELAY_FUNC_PREHEAT              =   5,
    XB_eRELAY_FUNC_WARM_UPAND_COOL_DOWN =   6,
    XB_eRELAY_FUNC_STARTAND_STOP        =   7,
    XB_eRELAY_FUNC_PREHEATWITH_SHUTDOWN_BYPASS =   8,
    XB_eRELAY_FUNC_MOMENTARY_RUN        =   9,
    XB_eRELAY_FUNC_PULSE_STOP           =  10,
    XB_eRELAY_FUNC_RESERVED             = 253,
    XB_eRELAY_FUNC_OUT_OF_RANGE         = 254,
    XB_eRELAY_FUNC_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teRELAY_FUNC;

// Fault Type
// Used in the following fields:
//   XB_tzPGN_ACTIVE_FAULT_STS2.eFaultType
//   XB_tzPGN_FAULT_LOG_STS.eFaultType
//   XB_tzPGN_ACTIVE_FAULT_STS.eFaultType
//   XB_tzPGN_FAULT_LOG_STS2.eFaultType
//   XB_tzPGN_UI_CFG_FAULT_TXT.eFaultType
typedef enum XB_eFLT_TYPE
{
    XB_eFLT_TYPE_AUTO_RESET_ESCALATING_FAULT =   0,
    XB_eFLT_TYPE_AUTO_RESET_NON_ESCALATING_FAULT =   1,
    XB_eFLT_TYPE_MANUAL_FAULT           =   2,
    XB_eFLT_TYPE_RESERVED               =   5,
    XB_eFLT_TYPE_OUT_OF_RANGE           =   6,
    XB_eFLT_TYPE_NO_CHANGE_DATA_NA      =   7
} XB_teFLT_TYPE;

// Warning Type
// Used in the following fields:
//   XB_tzPGN_UI_CFG_WARN_TXT.eWarnType
//   XB_tzPGN_WARN_LOG_STS.eWarnType
//   XB_tzPGN_WARN_LOG_STS2.eWarnType
//   XB_tzPGN_ACTIVE_WARN_STS.eWarnType
//   XB_tzPGN_ACTIVE_WARN_STS2.eWarnType
typedef enum XB_eWRN_TYPE
{
    XB_eWRN_TYPE_AUTO_RESET_WARNING     =   0,
    XB_eWRN_TYPE_MANUAL_WARNING         =   1,
    XB_eWRN_TYPE_RESERVED               =   5,
    XB_eWRN_TYPE_OUT_OF_RANGE           =   6,
    XB_eWRN_TYPE_NO_CHANGE_DATA_NA      =   7
} XB_teWRN_TYPE;

// Time Format
// Used in the following fields:
//   XB_tzPGN_UI_CFG.eTimeFmt
typedef enum XB_eTIME_FORMAT
{
    XB_eTIME_FORMAT_AMPM                =   0,
    XB_eTIME_FORMAT_24HOUR              =   1,
    XB_eTIME_FORMAT_RESERVED            = 253,
    XB_eTIME_FORMAT_OUT_OF_RANGE        = 254,
    XB_eTIME_FORMAT_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teTIME_FORMAT;

// Generator Interface Type
// Used in the following fields:
//   XB_tzPGN_AGS_CFG_GEN.eGenIntfType
typedef enum XB_eGEN_INTERFACE_TYPE
{
    XB_eGEN_INTERFACE_TYPE_1            =   1,
    XB_eGEN_INTERFACE_TYPE_2            =   2,
    XB_eGEN_INTERFACE_TYPE_3            =   3,
    XB_eGEN_INTERFACE_TYPE_4            =   4,
    XB_eGEN_INTERFACE_TYPE_5            =   5,
    XB_eGEN_INTERFACE_TYPE_6            =   6,
    XB_eGEN_INTERFACE_TYPE_7            =   7,
    XB_eGEN_INTERFACE_TYPE_8            =   8,
    XB_eGEN_INTERFACE_TYPE_9            =   9,
    XB_eGEN_INTERFACE_TYPE_10           =  10,
    XB_eGEN_INTERFACE_TYPE_11           =  11,
    XB_eGEN_INTERFACE_TYPE_12           =  12,
    XB_eGEN_INTERFACE_TYPE_13           =  13,
    XB_eGEN_INTERFACE_TYPE_14           =  14,
    XB_eGEN_INTERFACE_TYPE_15           =  15,
    XB_eGEN_INTERFACE_TYPE_16           =  16,
    XB_eGEN_INTERFACE_TYPE_17           =  17,
    XB_eGEN_INTERFACE_TYPE_18           =  18,
    XB_eGEN_INTERFACE_TYPE_19           =  19,
    XB_eGEN_INTERFACE_TYPE_20           =  20,
    XB_eGEN_INTERFACE_TYPE_21           =  21,
    XB_eGEN_INTERFACE_TYPE_22           =  22,
    XB_eGEN_INTERFACE_TYPE_23           =  23,
    XB_eGEN_INTERFACE_TYPE_24           =  24,
    XB_eGEN_INTERFACE_TYPE_25           =  25,
    XB_eGEN_INTERFACE_TYPE_26           =  26,
    XB_eGEN_INTERFACE_TYPE_27           =  27,
    XB_eGEN_INTERFACE_TYPE_28           =  28,
    XB_eGEN_INTERFACE_TYPE_29           =  29,
    XB_eGEN_INTERFACE_TYPE_30           =  30,
    XB_eGEN_INTERFACE_TYPE_RESERVED     = 253,
    XB_eGEN_INTERFACE_TYPE_OUTOF_RANGE  = 254,
    XB_eGEN_INTERFACE_TYPE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teGEN_INTERFACE_TYPE;

// Generator State
// Used in the following fields:
//   XB_tzPGN_AGS_STS.eGenState
typedef enum XB_eGEN_STATE
{
    XB_eGEN_STATE_PREHEATING            =   0,
    XB_eGEN_STATE_START_DELAY           =   1,
    XB_eGEN_STATE_CRANKING              =   2,
    XB_eGEN_STATE_STARTER_COOLING       =   3,
    XB_eGEN_STATE_WARMING_UP            =   4,
    XB_eGEN_STATE_COOLING_DOWN          =   5,
    XB_eGEN_STATE_SPINNING_DOWN         =   6,
    XB_eGEN_STATE_SHUTDOWN_BYPASS       =   7,
    XB_eGEN_STATE_STOPPING              =   8,
    XB_eGEN_STATE_RUNNING               =   9,
    XB_eGEN_STATE_STOPPED               =  10,
    XB_eGEN_STATE_CRANK_DELAY           =  11,
    XB_eGEN_STATE_RESERVED              = 253,
    XB_eGEN_STATE_OUT_OF_RANGE          = 254,
    XB_eGEN_STATE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teGEN_STATE;

// Behaviour
// Used in the following fields:
//   XB_tzPGN_UI_CFG_FAULT_BEHAVIOUR.eFaultBehaviour
//   XB_tzPGN_UI_CFG_WARN_BEHAVIOUR.eWarnBehaviour
typedef enum XB_eBEHAVIOUR
{
    XB_eBEHAVIOUR_IGNORE                =   0,
    XB_eBEHAVIOUR_VISUAL_ALERT          =   1,
    XB_eBEHAVIOUR_AUDIO_VISUAL_ALERT    =   2,
    XB_eBEHAVIOUR_RESERVED              =   5,
    XB_eBEHAVIOUR_OUT_OF_RANGE          =   6,
    XB_eBEHAVIOUR_DO_NOT_CHANGE_DATA_NOT_AVAILABLE =   7
} XB_teBEHAVIOUR;

// Operating State, Gateway
// Used in the following fields:
//   XB_tzPGN_GW_STS.eOpState
typedef enum XB_eOP_STATE_GATEWAY
{
    XB_eOP_STATE_GATEWAY_TRANSLATING    = 1408,
    XB_eOP_STATE_GATEWAY_DISABLED       = 1409
} XB_teOP_STATE_GATEWAY;

// Gateway Mode
// Used in the following fields:
//   XB_tzPGN_GW_CFG.eMode
typedef enum XB_eGATEWAY_MODE
{
    XB_eGATEWAY_MODE_POWER_SYSTEM_SPOOF =   0,
    XB_eGATEWAY_MODE_TRUE_GATEWAY       =   1,
    XB_eGATEWAY_MODE_DISABLED           =   2
} XB_teGATEWAY_MODE;

// Calibration Data Identifier
// Used in the following fields:
//   XB_tzPGN_CALIB_DATA_STS.eCalibDataId
typedef enum XB_eCALIBRATION_DATA_ID
{
    XB_eCALIBRATION_DATA_ID_INVALID     =   0,
    XB_eCALIBRATION_DATA_ID_DC_INPUT_POWER =   1,
    XB_eCALIBRATION_DATA_ID_DC_OUTPUT_POWER =   2
} XB_teCALIBRATION_DATA_ID;

// AcXferSwMode
// Used in the following fields:
//   XB_tzPGN_AC_XFER_SW_STS.eXferSwMode
typedef enum XB_eAC_XFER_SW_MODE
{
    XB_eAC_XFER_SW_MODE_UNKNOWN         =   0,
    XB_eAC_XFER_SW_MODE_GRID_PRIORITY   =   1,
    XB_eAC_XFER_SW_MODE_GENERATOR_PRIORITY =   2,
    XB_eAC_XFER_SW_MODE_INVERTER_PRIORITY =   3
} XB_teAC_XFER_SW_MODE;

// Image Depth
// Used in the following fields:
//   XB_tzPGN_UI_CFG_SPLASH_IMG.eImgDepth
typedef enum XB_eIMAGE_DEPTH
{
    XB_eIMAGE_DEPTH_DEPTH1              =   1,
    XB_eIMAGE_DEPTH_DEPTH2              =   2,
    XB_eIMAGE_DEPTH_DEPTH3              =   3,
    XB_eIMAGE_DEPTH_DEPTH4              =   4,
    XB_eIMAGE_DEPTH_DEPTH8              =   8,
    XB_eIMAGE_DEPTH_DEPTH16             =  16,
    XB_eIMAGE_DEPTH_DEPTH24             =  24,
    XB_eIMAGE_DEPTH_DEPTH32             =  32
} XB_teIMAGE_DEPTH;

// PID Control Loop Identifier
// Used in the following fields:
//   XB_tzPGN_PID_CFG.eLoopId
//   XB_tzPGN_PID_STS.eLoopId
typedef enum XB_ePID_CTRL_LOOP_ID
{
    XB_ePID_CTRL_LOOP_ID_INVALID        =   0,
    XB_ePID_CTRL_LOOP_ID_LOOP1          =   1,
    XB_ePID_CTRL_LOOP_ID_LOOP2          =   2,
    XB_ePID_CTRL_LOOP_ID_LOOP3          =   3,
    XB_ePID_CTRL_LOOP_ID_LOOP4          =   4,
    XB_ePID_CTRL_LOOP_ID_LOOP5          =   5,
    XB_ePID_CTRL_LOOP_ID_LOOP6          =   6,
    XB_ePID_CTRL_LOOP_ID_LOOP7          =   7,
    XB_ePID_CTRL_LOOP_ID_LOOP8          =   8,
    XB_ePID_CTRL_LOOP_ID_LOOP9          =   9,
    XB_ePID_CTRL_LOOP_ID_LOOP10         =  10,
    XB_ePID_CTRL_LOOP_ID_RESERVED       = 253,
    XB_ePID_CTRL_LOOP_ID_OUT_OF_RANGE   = 254,
    XB_ePID_CTRL_LOOP_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_tePID_CTRL_LOOP_ID;

// PreviousPeriod
// Used in the following fields:
//   XB_tzPGN_INV_STATS_AC2.ePreviousPeriod
//   XB_tzPGN_BATT_MON_STATS_BATT.ePreviousPeriod
//   XB_tzPGN_CHG_STATS_AC2.ePreviousPeriod
//   XB_tzPGN_INT_TEMP_STATS2.ePreviousPeriod
//   XB_tzPGN_INV_STATS_DC2.ePreviousPeriod
//   XB_tzPGN_EXT_TEMP_STATS2.ePreviousPeriod
//   XB_tzPGN_CHG_STATS_DC2.ePreviousPeriod
//   XB_tzPGN_CHG_STATS_BATT2.ePreviousPeriod
typedef enum XB_ePREVIOUS_PERIOD
{
    XB_ePREVIOUS_PERIOD_LIFE            =   0,
    XB_ePREVIOUS_PERIOD_YEAR            =   1,
    XB_ePREVIOUS_PERIOD_MONTH           =   2,
    XB_ePREVIOUS_PERIOD_WEEK            =   3,
    XB_ePREVIOUS_PERIOD_DAY             =   4,
    XB_ePREVIOUS_PERIOD_HOUR            =   5,
    XB_ePREVIOUS_PERIOD_USER            =   6
} XB_tePREVIOUS_PERIOD;

// Event Day-of-Week Mask
// Used in the following fields:
//   XB_tzPGN_EN_DIS_CFG_TOD.eEvtDowMask
typedef enum XB_eEVT_DOW_MASK
{
    XB_eEVT_DOW_MASK_SUNDAY             =   0,
    XB_eEVT_DOW_MASK_MONDAY             =   1,
    XB_eEVT_DOW_MASK_TUESDAY            =   2,
    XB_eEVT_DOW_MASK_WEDNESDAY          =   3,
    XB_eEVT_DOW_MASK_THURSDAY           =   4,
    XB_eEVT_DOW_MASK_FRIDAY             =   5,
    XB_eEVT_DOW_MASK_SATURDAY           =   6,
    XB_eEVT_DOW_MASK_INVALID            =   7,
    XB_eEVT_DOW_MASK_DAILY              =  11,
    XB_eEVT_DOW_MASK_WEEKDAYS           =  12,
    XB_eEVT_DOW_MASK_WEEKENDS           =  13
} XB_teEVT_DOW_MASK;

// Sell Mode
// Used in the following fields:
//   XB_tzPGN_GRID_TIE_CFG.eSellMode
typedef enum XB_eSELL_MODE
{
    XB_eSELL_MODE_AUTOMATIC             =   0,
    XB_eSELL_MODE_MANUAL                =   1
} XB_teSELL_MODE;

// Force Charger State
// Used in the following fields:
//   XB_tzPGN_CHG_CTRL_CMD2.eForceChgState
typedef enum XB_eFORCE_CHG_STATE
{
    XB_eFORCE_CHG_STATE_DO_NOT_CARE     =   0,
    XB_eFORCE_CHG_STATE_BULK            =   1,
    XB_eFORCE_CHG_STATE_FLOAT           =   2,
    XB_eFORCE_CHG_STATE_NO_FLOAT        =   3,
    XB_eFORCE_CHG_STATE_RESERVED        = 253,
    XB_eFORCE_CHG_STATE_OUT_OF_RANGE    = 254,
    XB_eFORCE_CHG_STATE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teFORCE_CHG_STATE;

// Derating Reason
// Used in the following fields:
//   XB_tzPGN_DC_SRC_STS2.eDeratingReason
typedef enum XB_eDERATING_REASON
{
    XB_eDERATING_REASON_NOT_ON          =   0,
    XB_eDERATING_REASON_HI_INTERNAL_TEMPERATURE =   1,
    XB_eDERATING_REASON_HI_DC_INPUT_VOLTAGE =   2,
    XB_eDERATING_REASON_BATTERY_VOLTAGE =   4,
    XB_eDERATING_REASON_AC_INPUT_VOLTAGE =   8,
    XB_eDERATING_REASON_AC_INPUT_CURRENT =  16,
    XB_eDERATING_REASON_BREAKER         =  32
} XB_teDERATING_REASON;

// Source Type
// Used in the following fields:
//   XB_tzPGN_GW_CFG_ID_TRANS.eSrcType
typedef enum XB_eSRC_TYPE
{
    XB_eSRC_TYPE_RESERVED               =   0,
    XB_eSRC_TYPE_AC                     =   1,
    XB_eSRC_TYPE_DC                     =   2,
    XB_eSRC_TYPE_GENERATOR              =   3,
    XB_eSRC_TYPE_EXTERNAL_TEMPERATURE   =   4,
    XB_eSRC_TYPE_INTERNAL_TEMPERATURE   =   5
} XB_teSRC_TYPE;

// Operating State, Secondary Power Supply
// Used in the following fields:
//   XB_tzPGN_SPS_STS.eOpState
typedef enum XB_eOP_STATE_SECONDARY_PWR_SUPPLY
{
    XB_eOP_STATE_SECONDARY_PWR_SUPPLY_AUTO_ON = 266,
    XB_eOP_STATE_SECONDARY_PWR_SUPPLY_AUTO_OFF = 267,
    XB_eOP_STATE_SECONDARY_PWR_SUPPLY_MANUAL_ON = 268,
    XB_eOP_STATE_SECONDARY_PWR_SUPPLY_MANUAL_OFF = 269
} XB_teOP_STATE_SECONDARY_PWR_SUPPLY;

// Feature Override
// Used in the following fields:
//   XB_tzPGN_EN_DIS_CFG_TOD.eFeatureOverride
typedef enum XB_eFEATURE_OVERRIDE
{
    XB_eFEATURE_OVERRIDE_CHARGING_DISABLED =   1,
    XB_eFEATURE_OVERRIDE_LOAD_SHAVING_DISABLED =   2,
    XB_eFEATURE_OVERRIDE_FORCE_SELL_DISABLED =   3,
    XB_eFEATURE_OVERRIDE_INVERTING_DISABLED =   4,
    XB_eFEATURE_OVERRIDE_AUX_PORT_DISABLED =   5,
    XB_eFEATURE_OVERRIDE_PEAK_TARIFF    =   6,
    XB_eFEATURE_OVERRIDE_NON_PEAK_TARIFF =   7,
    XB_eFEATURE_OVERRIDE_RESERVED       = 253,
    XB_eFEATURE_OVERRIDE_OUT_OF_RANGE   = 254,
    XB_eFEATURE_OVERRIDE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teFEATURE_OVERRIDE;

// Secondary Power Supply 'On' Reason
// Used in the following fields:
//   XB_tzPGN_SPS_STS.eOnReason
typedef enum XB_eSECONDARY_PWR_SUPPLY_ON_REASON
{
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_NOT_ON =   0,
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_MANUAL_ON =   1,
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_BATTERY_VOLTAGE_LOW =   2,
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_BATTERY_VOLTAGE_HIGH =   3,
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_ARRAY_VOLTAGE_HIGH =   4,
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_BATTERY_TEMP_LOW =   5,
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_BATTERY_TEMP_HIGH =   6,
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_HEAT_SINK_TEMP_HIGH =   7,
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_FAULT =   8,
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_STATE_OF_CHARGE =   9,
    XB_eSECONDARY_PWR_SUPPLY_ON_REASON_TIME_OF_DAY =  10
} XB_teSECONDARY_PWR_SUPPLY_ON_REASON;

// Secondary Power Supply 'Off' Reason
// Used in the following fields:
//   XB_tzPGN_SPS_STS.eOffReason
typedef enum XB_eSECONDARY_PWR_SUPPLY_OFF_REASON
{
    XB_eSECONDARY_PWR_SUPPLY_OFF_REASON_NOT_OFF =   0,
    XB_eSECONDARY_PWR_SUPPLY_OFF_REASON_MANUAL_OFF =   1,
    XB_eSECONDARY_PWR_SUPPLY_OFF_REASON_NO_ACTIVE_TRIGGER =   2,
    XB_eSECONDARY_PWR_SUPPLY_OFF_REASON_TRIGGER_OVERRIDE =   3,
    XB_eSECONDARY_PWR_SUPPLY_OFF_REASON_FAULT =   4,
    XB_eSECONDARY_PWR_SUPPLY_OFF_REASON_BULK_EXIT =   5,
    XB_eSECONDARY_PWR_SUPPLY_OFF_REASON_ABSORPTION_EXIT =   6
} XB_teSECONDARY_PWR_SUPPLY_OFF_REASON;

// Feature Identifier
// Used in the following fields:
//   XB_tzPGN_FEATURE_EN_DIS_CFG.eFeatureId
typedef enum XB_eFEATURE_ID
{
    XB_eFEATURE_ID_INVALID              =   0,
    XB_eFEATURE_ID_REMOTE_POWER_OFF     =   1,
    XB_eFEATURE_ID_NO_LOAD_DERATING     =   2,
    XB_eFEATURE_ID_RESTORE_INVERT_MODE_ON_POWER_UP =   3,
    XB_eFEATURE_ID_PROT_INPUT_OVER_VOLTAGE =   4,
    XB_eFEATURE_ID_PROT_EXTERNAL_SHUTDOWN =   5,
    XB_eFEATURE_ID_PROT_INPUT_UNDER_VOLTAGE =   6,
    XB_eFEATURE_ID_PROT_OUTPUT_OVER_VOLTAGE =   7,
    XB_eFEATURE_ID_PROT_FAST_OUTPUT_UNDER_VOLTAGE =   8,
    XB_eFEATURE_ID_PROT_FAST_OUTPUT_OVER_CURRENT =   9,
    XB_eFEATURE_ID_PROT_SLOW_OUTPUT_OVER_CURRENT =  10,
    XB_eFEATURE_ID_PROT_HS_OVER_TEMPERATURE =  11,
    XB_eFEATURE_ID_PROT_AMBIENT_OVER_TEMPERATURE =  12,
    XB_eFEATURE_ID_PROT_CAPACITOR_OVER_TEMPERATURE =  13,
    XB_eFEATURE_ID_PROT_BATTERY_OVER_TEMPERATURE =  14,
    XB_eFEATURE_ID_PROT_GROUND_FAULT    =  15,
    XB_eFEATURE_ID_PROT_SLOW_OUTPUT_UNDER_VOLTAGE =  16,
    XB_eFEATURE_ID_PROT_FAN_ERR         =  17,
    XB_eFEATURE_ID_PROT_FAN_FLT         =  18,
    XB_eFEATURE_ID_MAIN_FAN_ENABLE      =  19,
    XB_eFEATURE_ID_AUXILIARY_FAN_ENABLE =  20,
    XB_eFEATURE_ID_DIGITAL_CONTROL_ENABLE =  21,
    XB_eFEATURE_ID_PROT_INPUT_OVER_VOLTAGE2 =  22,
    XB_eFEATURE_ID_NETWORK_POWER_NIGHT_TIME_DISABLE =  23,
    XB_eFEATURE_ID_LOW_POWER_AT_NIGHT_ENABLE =  24,
    XB_eFEATURE_ID_TEMPERATURE_DERATING_ENABLE =  25,
    XB_eFEATURE_ID_CLI_OVER_XANBUS_ENABLE =  26,
    XB_eFEATURE_ID_FREQUENCY_SELECT_ENABLE =  27,
    XB_eFEATURE_ID_LONG_SELL_DELAY      =  28,
    XB_eFEATURE_ID_GEN_BALANCE          =  29,
    XB_eFEATURE_ID_REMOTE_SELL          =  30,
    XB_eFEATURE_ID_AC_COUPLING_FREQUENCY_SHIFT =  31,
    XB_eFEATURE_ID_MULTIPLE_BATTERY_ENERGY_BALANCE =  32,
    XB_eFEATURE_ID_EXTERNAL_TRANSFER_SWITCH =  33,
    XB_eFEATURE_ID_TIME_IN_FLOAT        =  34,
    XB_eFEATURE_ID_STORE_INVERT_STATE   =  35,
    XB_eFEATURE_ID_TRANSIENT_OVER_VOLTAGE =  36,
    XB_eFEATURE_ID_ENHANCED_AC_SUPPORT  =  37,
    XB_eFEATURE_ID_CALIFORNIA_RULE21    =  38,
    XB_eFEATURE_ID_EXTERNAL_LOAD_SWITCH =  39,
    XB_eFEATURE_ID_HEART_BEAT_BMS_MODE  =  40,
    XB_eFEATURE_ID_CBGMPPTOPT           =  41,
    XB_eFEATURE_ID_CBG_SMART_ENERGY     =  42
} XB_teFEATURE_ID;

// Breaker Setting
// Used in the following fields:
//   XB_tzPGN_EMS_CFG.eShoreBreakerMode
//   XB_tzPGN_EMS_CFG.eGenBreakerMode
typedef enum XB_eBREAKER_SETTING
{
    XB_eBREAKER_SETTING_MANUAL          =   0,
    XB_eBREAKER_SETTING_AUTO            =   1,
    XB_eBREAKER_SETTING_RESERVED        =   2,
    XB_eBREAKER_SETTING_NO_CHANGE       =   3
} XB_teBREAKER_SETTING;

// Circuit Identifier
// Used in the following fields:
//   XB_tzPGN_EMS_CKT_CFG.eCircuitId
//   XB_tzPGN_EMS_CKT_STS.eCircuitId
typedef enum XB_eCIRCUIT_ID
{
    XB_eCIRCUIT_ID_INVALID              =   0,
    XB_eCIRCUIT_ID_CIRCUIT1             =   1,
    XB_eCIRCUIT_ID_CIRCUIT2             =   2,
    XB_eCIRCUIT_ID_CIRCUIT3             =   3,
    XB_eCIRCUIT_ID_CIRCUIT4             =   4,
    XB_eCIRCUIT_ID_CIRCUIT5             =   5,
    XB_eCIRCUIT_ID_CIRCUIT6             =   6,
    XB_eCIRCUIT_ID_CIRCUIT7             =   7,
    XB_eCIRCUIT_ID_CIRCUIT8             =   8,
    XB_eCIRCUIT_ID_CIRCUIT9             =   9,
    XB_eCIRCUIT_ID_CIRCUIT10            =  10,
    XB_eCIRCUIT_ID_CIRCUIT11            =  11,
    XB_eCIRCUIT_ID_CIRCUIT12            =  12,
    XB_eCIRCUIT_ID_CIRCUIT13            =  13,
    XB_eCIRCUIT_ID_CIRCUIT14            =  14,
    XB_eCIRCUIT_ID_CIRCUIT15            =  15,
    XB_eCIRCUIT_ID_CIRCUIT16            =  16,
    XB_eCIRCUIT_ID_CIRCUIT17            =  17,
    XB_eCIRCUIT_ID_CIRCUIT18            =  18,
    XB_eCIRCUIT_ID_CIRCUIT19            =  19,
    XB_eCIRCUIT_ID_CIRCUIT20            =  20,
    XB_eCIRCUIT_ID_RESERVED             = 253,
    XB_eCIRCUIT_ID_OUT_OF_RANGE         = 254,
    XB_eCIRCUIT_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teCIRCUIT_ID;

// Generator Soft Start
// Used in the following fields:
//   XB_tzPGN_EMS_CKT_CFG.eGenSoftStart
typedef enum XB_eGEN_SOFT_START
{
    XB_eGEN_SOFT_START_DISABLE          =   0,
    XB_eGEN_SOFT_START_ENABLE           =   1,
    XB_eGEN_SOFT_START_BYPASS           =   2,
    XB_eGEN_SOFT_START_NO_CHANGE        =   3
} XB_teGEN_SOFT_START;

// AC Source Type
// Used in the following fields:
//   XB_tzPGN_EMS_STS.eAcSrcType
typedef enum XB_eAC_SRC_TYPE
{
    XB_eAC_SRC_TYPE_INVALID             =   0,
    XB_eAC_SRC_TYPE_SINGLE_PHASE        =   1,
    XB_eAC_SRC_TYPE_SPLIT_PHASE         =   2,
    XB_eAC_SRC_TYPE_RESERVED            = 253,
    XB_eAC_SRC_TYPE_OUT_OF_RANGE        = 254,
    XB_eAC_SRC_TYPE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} XB_teAC_SRC_TYPE;

// Filter Speed
// Used in the following fields:
//   XB_tzPGN_BATT_MON_CFG.eTimeRemAvgFilter
typedef enum XB_eFILTER_SPEED
{
    XB_eFILTER_SPEED_FASTEST            =   0,
    XB_eFILTER_SPEED_FASTER             =   1,
    XB_eFILTER_SPEED_FAST               =   2,
    XB_eFILTER_SPEED_RESERVED           =   3
} XB_teFILTER_SPEED;

// Parity
// Used in the following fields:
//   XB_tzPGN_RS485CFG.eParity
typedef enum XB_ePARITY
{
    XB_ePARITY_NONE                     =   0,
    XB_ePARITY_ODD                      =   1,
    XB_ePARITY_EVEN                     =   2,
    XB_ePARITY_RESERVED                 =   3
} XB_tePARITY;

// Stop Bits
// Used in the following fields:
//   XB_tzPGN_RS485CFG.eStopBits
typedef enum XB_eSTOP_BITS
{
    XB_eSTOP_BITS_ONE                   =   1,
    XB_eSTOP_BITS_TWO                   =   2
} XB_teSTOP_BITS;

// Byte Order
// Used in the following fields:
//   XB_tzPGN_RS485CFG.eByteOrder
typedef enum XB_eBYTE_ORDER
{
    XB_eBYTE_ORDER_LSB                  =   0,
    XB_eBYTE_ORDER_MSB                  =   1
} XB_teBYTE_ORDER;

// Nominal DC Voltage
// Used in the following fields:
//   XB_tzPGN_BATT_MON_CFG.eNomV
typedef enum XB_eNOMINAL_DCV
{
    XB_eNOMINAL_DCV_12V                 =   0,
    XB_eNOMINAL_DCV_24V                 =   1,
    XB_eNOMINAL_DCV_48V                 =   2,
    XB_eNOMINAL_DCV_RESERVED            =   3
} XB_teNOMINAL_DCV;

// Baud Rate
// Used in the following fields:
//   XB_tzPGN_RS485CFG.eBaudRate
typedef enum XB_eBAUD_RATE
{
    XB_eBAUD_RATE_9600                  =   0,
    XB_eBAUD_RATE_19200                 =   1,
    XB_eBAUD_RATE_38400                 =   2,
    XB_eBAUD_RATE_57600                 =   3,
    XB_eBAUD_RATE_115200                =   4
} XB_teBAUD_RATE;

// Generic Mode
// Used in the following fields:
//   XB_tzPGN_BATT_MON_CFG.eChgEfficFactorMode
typedef enum XB_eGENERIC_MODE
{
    XB_eGENERIC_MODE_MANUAL             =   0,
    XB_eGENERIC_MODE_AUTOMATIC          =   1,
    XB_eGENERIC_MODE_RESERVED           =   2,
    XB_eGENERIC_MODE_NO_CHANGE          =   3
} XB_teGENERIC_MODE;

// Battery Monitor Short Timer
// Used in the following fields:
//   XB_tzPGN_BATT_MON_CFG.eBacklightDuration
typedef enum XB_eBATT_MONITOR_SHORT_TIMER
{
    XB_eBATT_MONITOR_SHORT_TIMER_OFF    =   0,
    XB_eBATT_MONITOR_SHORT_TIMER_5      =   1,
    XB_eBATT_MONITOR_SHORT_TIMER_10     =   2,
    XB_eBATT_MONITOR_SHORT_TIMER_15     =   3,
    XB_eBATT_MONITOR_SHORT_TIMER_30     =   4,
    XB_eBATT_MONITOR_SHORT_TIMER_45     =   5,
    XB_eBATT_MONITOR_SHORT_TIMER_60     =   6,
    XB_eBATT_MONITOR_SHORT_TIMER_90     =   7,
    XB_eBATT_MONITOR_SHORT_TIMER_120    =   8,
    XB_eBATT_MONITOR_SHORT_TIMER_150    =   9,
    XB_eBATT_MONITOR_SHORT_TIMER_180    =  10,
    XB_eBATT_MONITOR_SHORT_TIMER_240    =  11,
    XB_eBATT_MONITOR_SHORT_TIMER_300    =  12,
    XB_eBATT_MONITOR_SHORT_TIMER_ON     =  13,
    XB_eBATT_MONITOR_SHORT_TIMER_AUTOMATIC =  14,
    XB_eBATT_MONITOR_SHORT_TIMER_RESERVED =  15
} XB_teBATT_MONITOR_SHORT_TIMER;

// Shunt Volt Rating
// Used in the following fields:
//   XB_tzPGN_BATT_MON_CFG.eShuntVoltRating
typedef enum XB_eSHUNT_VOLT_RATING
{
    XB_eSHUNT_VOLT_RATING_50            =   0,
    XB_eSHUNT_VOLT_RATING_60            =   1
} XB_teSHUNT_VOLT_RATING;

// Shunt Amp Rating
// Used in the following fields:
//   XB_tzPGN_BATT_MON_CFG.eShuntAmpRating
typedef enum XB_eSHUNT_AMP_RATING
{
    XB_eSHUNT_AMP_RATING_10             =   0,
    XB_eSHUNT_AMP_RATING_11             =   1,
    XB_eSHUNT_AMP_RATING_12             =   2,
    XB_eSHUNT_AMP_RATING_13             =   3,
    XB_eSHUNT_AMP_RATING_14             =   4,
    XB_eSHUNT_AMP_RATING_15             =   5,
    XB_eSHUNT_AMP_RATING_16             =   6,
    XB_eSHUNT_AMP_RATING_17             =   7,
    XB_eSHUNT_AMP_RATING_18             =   8,
    XB_eSHUNT_AMP_RATING_19             =   9,
    XB_eSHUNT_AMP_RATING_20             =  10,
    XB_eSHUNT_AMP_RATING_21             =  11,
    XB_eSHUNT_AMP_RATING_22             =  12,
    XB_eSHUNT_AMP_RATING_23             =  13,
    XB_eSHUNT_AMP_RATING_24             =  14,
    XB_eSHUNT_AMP_RATING_25             =  15,
    XB_eSHUNT_AMP_RATING_30             =  16,
    XB_eSHUNT_AMP_RATING_35             =  17,
    XB_eSHUNT_AMP_RATING_40             =  18,
    XB_eSHUNT_AMP_RATING_45             =  19,
    XB_eSHUNT_AMP_RATING_50             =  20,
    XB_eSHUNT_AMP_RATING_55             =  21,
    XB_eSHUNT_AMP_RATING_60             =  22,
    XB_eSHUNT_AMP_RATING_65             =  23,
    XB_eSHUNT_AMP_RATING_70             =  24,
    XB_eSHUNT_AMP_RATING_75             =  25,
    XB_eSHUNT_AMP_RATING_80             =  26,
    XB_eSHUNT_AMP_RATING_85             =  27,
    XB_eSHUNT_AMP_RATING_90             =  28,
    XB_eSHUNT_AMP_RATING_95             =  29,
    XB_eSHUNT_AMP_RATING_100            =  30,
    XB_eSHUNT_AMP_RATING_110            =  31,
    XB_eSHUNT_AMP_RATING_120            =  32,
    XB_eSHUNT_AMP_RATING_130            =  33,
    XB_eSHUNT_AMP_RATING_140            =  34,
    XB_eSHUNT_AMP_RATING_150            =  35,
    XB_eSHUNT_AMP_RATING_160            =  36,
    XB_eSHUNT_AMP_RATING_170            =  37,
    XB_eSHUNT_AMP_RATING_180            =  38,
    XB_eSHUNT_AMP_RATING_190            =  39,
    XB_eSHUNT_AMP_RATING_200            =  40,
    XB_eSHUNT_AMP_RATING_210            =  41,
    XB_eSHUNT_AMP_RATING_220            =  42,
    XB_eSHUNT_AMP_RATING_230            =  43,
    XB_eSHUNT_AMP_RATING_240            =  44,
    XB_eSHUNT_AMP_RATING_250            =  45,
    XB_eSHUNT_AMP_RATING_300            =  46,
    XB_eSHUNT_AMP_RATING_350            =  47,
    XB_eSHUNT_AMP_RATING_400            =  48,
    XB_eSHUNT_AMP_RATING_450            =  49,
    XB_eSHUNT_AMP_RATING_500            =  50,
    XB_eSHUNT_AMP_RATING_550            =  51,
    XB_eSHUNT_AMP_RATING_600            =  52,
    XB_eSHUNT_AMP_RATING_650            =  53,
    XB_eSHUNT_AMP_RATING_700            =  54,
    XB_eSHUNT_AMP_RATING_750            =  55,
    XB_eSHUNT_AMP_RATING_800            =  56,
    XB_eSHUNT_AMP_RATING_850            =  57,
    XB_eSHUNT_AMP_RATING_900            =  58,
    XB_eSHUNT_AMP_RATING_950            =  59,
    XB_eSHUNT_AMP_RATING_1000           =  60,
    XB_eSHUNT_AMP_RATING_1100           =  61,
    XB_eSHUNT_AMP_RATING_1200           =  62,
    XB_eSHUNT_AMP_RATING_1300           =  63,
    XB_eSHUNT_AMP_RATING_1400           =  64,
    XB_eSHUNT_AMP_RATING_1500           =  65,
    XB_eSHUNT_AMP_RATING_1600           =  66,
    XB_eSHUNT_AMP_RATING_1700           =  67,
    XB_eSHUNT_AMP_RATING_1800           =  68,
    XB_eSHUNT_AMP_RATING_1900           =  69,
    XB_eSHUNT_AMP_RATING_2000           =  70,
    XB_eSHUNT_AMP_RATING_2100           =  71,
    XB_eSHUNT_AMP_RATING_2200           =  72,
    XB_eSHUNT_AMP_RATING_2300           =  73,
    XB_eSHUNT_AMP_RATING_2400           =  74,
    XB_eSHUNT_AMP_RATING_2500           =  75,
    XB_eSHUNT_AMP_RATING_3000           =  76,
    XB_eSHUNT_AMP_RATING_3500           =  77,
    XB_eSHUNT_AMP_RATING_4000           =  78,
    XB_eSHUNT_AMP_RATING_4500           =  79,
    XB_eSHUNT_AMP_RATING_5000           =  80,
    XB_eSHUNT_AMP_RATING_5500           =  81,
    XB_eSHUNT_AMP_RATING_6000           =  82,
    XB_eSHUNT_AMP_RATING_6500           =  83,
    XB_eSHUNT_AMP_RATING_7000           =  84,
    XB_eSHUNT_AMP_RATING_7500           =  85,
    XB_eSHUNT_AMP_RATING_8000           =  86,
    XB_eSHUNT_AMP_RATING_8500           =  87,
    XB_eSHUNT_AMP_RATING_9000           =  88
} XB_teSHUNT_AMP_RATING;

// Auto Sync Time
// Used in the following fields:
//   XB_tzPGN_BATT_MON_CFG_SYNC.eAutoSyncTime
typedef enum XB_eAUTO_SYNC_TIME
{
    XB_eAUTO_SYNC_TIME_5                =   0,
    XB_eAUTO_SYNC_TIME_10               =   1,
    XB_eAUTO_SYNC_TIME_15               =   2,
    XB_eAUTO_SYNC_TIME_30               =   3,
    XB_eAUTO_SYNC_TIME_45               =   4,
    XB_eAUTO_SYNC_TIME_60               =   5,
    XB_eAUTO_SYNC_TIME_90               =   6,
    XB_eAUTO_SYNC_TIME_120              =   7,
    XB_eAUTO_SYNC_TIME_150              =   8,
    XB_eAUTO_SYNC_TIME_180              =   9,
    XB_eAUTO_SYNC_TIME_240              =  10,
    XB_eAUTO_SYNC_TIME_300              =  11
} XB_teAUTO_SYNC_TIME;


/************************************************************************************
    The structures for each PGN
************************************************************************************/

// ISO Acknowledgment
typedef struct XB_zPGN_ISO_ACK
{
    XB_teACK_STS teCtrlByte;        // Control Byte
    XB_teGRP_FUNC_VALUE teGroupFunctionValue; // Group Function Value
    uint32 ulParmGrpNum;            // PGN of Requested Information
} XB_tzPGN_ISO_ACK;

// ISO Request
typedef struct XB_zPGN_ISO_REQ
{
    uint32 ulParmGrpNum;            // PGN being requested
} XB_tzPGN_ISO_REQ;

// ISO Transport Protocol, Data Transfer
typedef struct XB_zPGN_ISO_TP_XFER
{
    uchar8 ucSeqNumMultiPacketFrame; // Sequence number of multi-packet frame
    uchar8 aucMultiPacketPacketizedData[ 7 ]; // Multi-packet packetized data
} XB_tzPGN_ISO_TP_XFER;

// ISO Transport Protocol, Connection Management - RTS
typedef struct XB_zPGN_ISO_TP_CONN_MAN_RTS
{
    uchar8 ucRTSGroupFunctionCode;  // RTS Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesXmit;    // Total number of frames to be transmitted
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} XB_tzPGN_ISO_TP_CONN_MAN_RTS;

// ISO Transport Protocol, Connection Management - CTS
typedef struct XB_zPGN_ISO_TP_CONN_MAN_CTS
{
    uchar8 ucCTSGroupFunctionCode;  // CTS Group Function Code
    uchar8 ucNumFramesThatCanBeSent; // Number of frames that can be sent
    uchar8 ucNumNextFrameToBeSent;  // Number of next frame to be sent
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} XB_tzPGN_ISO_TP_CONN_MAN_CTS;

// ISO Transport Protocol, Connection Management - EOM
typedef struct XB_zPGN_ISO_TP_CONN_MAN_EOM
{
    uchar8 ucEOMGroupFunctionCode;  // EOM Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesRXed;    // Total number of frames received
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} XB_tzPGN_ISO_TP_CONN_MAN_EOM;

// ISO Transport Protocol, Connection Management - BAM
typedef struct XB_zPGN_ISO_TP_CONN_MAN_BAM
{
    uchar8 ucBAMGroupFunctionCode;  // BAM Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesToBeSent; // Total number of frames to be sent
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} XB_tzPGN_ISO_TP_CONN_MAN_BAM;

// ISO Transport Protocol, Connection Management - Abort
typedef struct XB_zPGN_ISO_TP_CONN_MAN_ABORT
{
    uchar8 ucAbortGroupFunctionCode; // Abort Group Function Code
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} XB_tzPGN_ISO_TP_CONN_MAN_ABORT;

// ISO Address Claim
typedef struct XB_zPGN_ISO_ADDR_CLAIM
{
    uint32 ulUniqueNumber;          // Unique Number (ISO Identity Number)
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    uchar8 ucRsvBit;                // Reserved Bit
    XB_teDEVICE_CLASS teDeviceClass; // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    XB_teINDUSTRY_GRP teIndustryGroup; // Industry Group
    uchar8 ucSelfCfgAddr;           // ISO Self Configurable Address
} XB_tzPGN_ISO_ADDR_CLAIM;

// ISO Commanded Address
typedef struct XB_zPGN_ISO_CMD_ADDR
{
    uint32 ulUniqueNumber;          // Unique Number (ISO Identity Number)
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    uchar8 ucRsvBit;                // Reserved Bit
    XB_teDEVICE_CLASS teDeviceClass; // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    XB_teINDUSTRY_GRP teIndustryGroup; // Industry Group
    uchar8 ucSelfCfgAddr;           // ISO Self Configurable Address
    uchar8 ucPrefSrcAddr;           // Preferred Source Address
} XB_tzPGN_ISO_CMD_ADDR;

// DC Source Configuration - Under Voltage
typedef struct XB_zPGN_EXTRA_DC_SRC_CFG_UV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_DC_SRC_CFG_UV;

typedef struct XB_zPGN_DC_SRC_CFG_UV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DC_SRC_CFG_UV *ptzExtra;   // Extra structures
} XB_tzPGN_DC_SRC_CFG_UV;

// DC Source Configuration - Over Voltage
typedef struct XB_zPGN_EXTRA_DC_SRC_CFG_OV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_DC_SRC_CFG_OV;

typedef struct XB_zPGN_DC_SRC_CFG_OV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DC_SRC_CFG_OV *ptzExtra;   // Extra structures
} XB_tzPGN_DC_SRC_CFG_OV;

// DC Source Configuration - Under Current
typedef struct XB_zPGN_EXTRA_DC_SRC_CFG_UI
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUiLvl;                 // Under Current Level
    sint32 slUiLvlMin;              // Under Current Level - Minimum
    sint32 slUiLvlMax;              // Under Current Level - Maximum
    uint16 uiUiIntvl;               // Under Current Interval
    uint16 uiUiIntvlMin;            // Under Current Interval - Minimum
    uint16 uiUiIntvlMax;            // Under Current Interval - Maximum
} XB_tzPGN_EXTRA_DC_SRC_CFG_UI;

typedef struct XB_zPGN_DC_SRC_CFG_UI
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DC_SRC_CFG_UI *ptzExtra;   // Extra structures
} XB_tzPGN_DC_SRC_CFG_UI;

// DC Source Configuration - Over Current
typedef struct XB_zPGN_EXTRA_DC_SRC_CFG_OI
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOiLvl;                 // Over Current Level
    sint32 slOiLvlMin;              // Over Current Level - Minimum
    sint32 slOiLvlMax;              // Over Current Level - Maximum
    uint16 uiOiIntvl;               // Over Current Interval
    uint16 uiOiIntvlMin;            // Over Current Interval - Minimum
    uint16 uiOiIntvlMax;            // Over Current Interval - Maximum
} XB_tzPGN_EXTRA_DC_SRC_CFG_OI;

typedef struct XB_zPGN_DC_SRC_CFG_OI
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DC_SRC_CFG_OI *ptzExtra;   // Extra structures
} XB_tzPGN_DC_SRC_CFG_OI;

// DC Source Configuration - Over Ripple Voltage - Peak
typedef struct XB_zPGN_EXTRA_DC_SRC_CFG_RIP_OV_PEAK
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slPeakRipOvLvl;          // Peak Ripple Over Voltage Level
    sint32 slPeakRipOvLvlMin;       // Peak Ripple Over Voltage Level - Minimum
    sint32 slPeakRipOvLvlMax;       // Peak Ripple Over Voltage Level - Maximum
    uint16 uiPeakRipOvIntvl;        // Peak Ripple Over Voltage Interval
    uint16 uiPeakRipOvIntvlMin;     // Peak Ripple Over Voltage Interval - Minimum
    uint16 uiPeakRipOvIntvlMax;     // Peak Ripple Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_DC_SRC_CFG_RIP_OV_PEAK;

typedef struct XB_zPGN_DC_SRC_CFG_RIP_OV_PEAK
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DC_SRC_CFG_RIP_OV_PEAK *ptzExtra;   // Extra structures
} XB_tzPGN_DC_SRC_CFG_RIP_OV_PEAK;

// AC Output Configuration
typedef struct XB_zPGN_AC_OUT_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint32 ulVoltage;               // Voltage
    uint32 ulVoltageMin;            // Voltage - Minimum
    uint32 ulVoltageMax;            // Voltage - Maximum
    uint16 uiBreakerSz;             // Breaker Size
    uint16 uiBreakerSzMin;          // Breaker Size - Minimum
    uint16 uiBreakerSzMax;          // Breaker Size - Maximum
    uint16 uiFreq;                  // Frequency
    uint16 uiFreqMin;               // Frequency - Minimum
    uint16 uiFreqMax;               // Frequency - Maximum
    uint32 ulRealPwr;               // Real Power
    uint32 ulRealPwrMin;            // Real Power - Minimum
    uint32 ulRealPwrMax;            // Real Power - Maximum
} XB_tzPGN_AC_OUT_CFG;

// AC Input Configuration - Under Voltage - RMS
typedef struct XB_zPGN_EXTRA_AC_IN_CFG_UV_RMS
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_UV_RMS;

typedef struct XB_zPGN_AC_IN_CFG_UV_RMS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_UV_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_UV_RMS;

// AC Input Configuration - Under Voltage - Peak
typedef struct XB_zPGN_EXTRA_AC_IN_CFG_UV_PEAK
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_UV_PEAK;

typedef struct XB_zPGN_AC_IN_CFG_UV_PEAK
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_UV_PEAK *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_UV_PEAK;

// AC Input Configuration - Under Voltage - Average
typedef struct XB_zPGN_EXTRA_AC_IN_CFG_UV_AVG
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_UV_AVG;

typedef struct XB_zPGN_AC_IN_CFG_UV_AVG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_UV_AVG *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_UV_AVG;

// AC Input Configuration - Over Voltage - RMS
typedef struct XB_zPGN_EXTRA_AC_IN_CFG_OV_RMS
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_OV_RMS;

typedef struct XB_zPGN_AC_IN_CFG_OV_RMS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_OV_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_OV_RMS;

// AC Input Configuration - Over Voltage - Peak
typedef struct XB_zPGN_EXTRA_AC_IN_CFG_OV_PEAK
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_OV_PEAK;

typedef struct XB_zPGN_AC_IN_CFG_OV_PEAK
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_OV_PEAK *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_OV_PEAK;

// AC Input Configuration - Over Voltage - Average
typedef struct XB_zPGN_EXTRA_AC_IN_CFG_OV_AVG
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_OV_AVG;

typedef struct XB_zPGN_AC_IN_CFG_OV_AVG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_OV_AVG *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_OV_AVG;

// Auxiliary Power Supply Configuration - Under Voltage
typedef struct XB_zPGN_EXTRA_APS_CFG_UV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_APS_CFG_UV;

typedef struct XB_zPGN_APS_CFG_UV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_APS_CFG_UV *ptzExtra;   // Extra structures
} XB_tzPGN_APS_CFG_UV;

// Auxiliary Power Supply Configuration - Over Voltage
typedef struct XB_zPGN_EXTRA_APS_CFG_OV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_APS_CFG_OV;

typedef struct XB_zPGN_APS_CFG_OV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_APS_CFG_OV *ptzExtra;   // Extra structures
} XB_tzPGN_APS_CFG_OV;

// Offline Power Supply Configuration - Under Voltage
typedef struct XB_zPGN_EXTRA_OPS_CFG_UV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_OPS_CFG_UV;

typedef struct XB_zPGN_OPS_CFG_UV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_OPS_CFG_UV *ptzExtra;   // Extra structures
} XB_tzPGN_OPS_CFG_UV;

// Offline Power Supply Configuration - Over Voltage
typedef struct XB_zPGN_EXTRA_OPS_CFG_OV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_OPS_CFG_OV;

typedef struct XB_zPGN_OPS_CFG_OV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_OPS_CFG_OV *ptzExtra;   // Extra structures
} XB_tzPGN_OPS_CFG_OV;

// High Voltage DC Bus Configuration - Under Voltage
typedef struct XB_zPGN_EXTRA_HV_DC_BUS_CFG_UV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_HV_DC_BUS_CFG_UV;

typedef struct XB_zPGN_HV_DC_BUS_CFG_UV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_HV_DC_BUS_CFG_UV *ptzExtra;   // Extra structures
} XB_tzPGN_HV_DC_BUS_CFG_UV;

// High Voltage DC Bus Configuration - Over Voltage
typedef struct XB_zPGN_EXTRA_HV_DC_BUS_CFG_OV
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_HV_DC_BUS_CFG_OV;

typedef struct XB_zPGN_HV_DC_BUS_CFG_OV
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_HV_DC_BUS_CFG_OV *ptzExtra;   // Extra structures
} XB_tzPGN_HV_DC_BUS_CFG_OV;

// External Temperature Configuration - Under Temp
typedef struct XB_zPGN_EXTRA_EXT_TEMP_CFG_UT
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUtLvl;                 // Under Temperature Level
    sint32 slUtLvlMin;              // Under Temperature Level - Minimum
    sint32 slUtLvlMax;              // Under Temperature Level - Maximum
    uint16 uiUtIntvl;               // Under Temperature Interval
    uint16 uiUtIntvlMin;            // Under Temperature Interval - Minimum
    uint16 uiUtIntvlMax;            // Under Temperature Interval - Maximum
} XB_tzPGN_EXTRA_EXT_TEMP_CFG_UT;

typedef struct XB_zPGN_EXT_TEMP_CFG_UT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teEXT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_EXT_TEMP_CFG_UT *ptzExtra;   // Extra structures
} XB_tzPGN_EXT_TEMP_CFG_UT;

// External Temperature Configuration - Over Temp
typedef struct XB_zPGN_EXTRA_EXT_TEMP_CFG_OT
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOtLvl;                 // Over Temperature Level
    sint32 slOtLvlMin;              // Over Temperature Level - Minimum
    sint32 slOtLvlMax;              // Over Temperature Level - Maximum
    uint16 uiOtIntvl;               // Over Temperature Interval
    uint16 uiOtIntvlMin;            // Over Temperature Interval - Minimum
    uint16 uiOtIntvlMax;            // Over Temperature Interval - Maximum
} XB_tzPGN_EXTRA_EXT_TEMP_CFG_OT;

typedef struct XB_zPGN_EXT_TEMP_CFG_OT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teEXT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_EXT_TEMP_CFG_OT *ptzExtra;   // Extra structures
} XB_tzPGN_EXT_TEMP_CFG_OT;

// Internal Temperature Configuration - Under Temp
typedef struct XB_zPGN_EXTRA_INT_TEMP_CFG_UT
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUtLvl;                 // Under Temperature Level
    sint32 slUtLvlMin;              // Under Temperature Level - Minimum
    sint32 slUtLvlMax;              // Under Temperature Level - Maximum
    uint16 uiUtIntvl;               // Under Temperature Interval
    uint16 uiUtIntvlMin;            // Under Temperature Interval - Minimum
    uint16 uiUtIntvlMax;            // Under Temperature Interval - Maximum
} XB_tzPGN_EXTRA_INT_TEMP_CFG_UT;

typedef struct XB_zPGN_INT_TEMP_CFG_UT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teINT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INT_TEMP_CFG_UT *ptzExtra;   // Extra structures
} XB_tzPGN_INT_TEMP_CFG_UT;

// Internal Temperature Configuration - Over Temp
typedef struct XB_zPGN_EXTRA_INT_TEMP_CFG_OT
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOtLvl;                 // Over Temperature Level
    sint32 slOtLvlMin;              // Over Temperature Level - Minimum
    sint32 slOtLvlMax;              // Over Temperature Level - Maximum
    uint16 uiOtIntvl;               // Over Temperature Interval
    uint16 uiOtIntvlMin;            // Over Temperature Interval - Minimum
    uint16 uiOtIntvlMax;            // Over Temperature Interval - Maximum
} XB_tzPGN_EXTRA_INT_TEMP_CFG_OT;

typedef struct XB_zPGN_INT_TEMP_CFG_OT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teINT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INT_TEMP_CFG_OT *ptzExtra;   // Extra structures
} XB_tzPGN_INT_TEMP_CFG_OT;

// Charger Configuration - Bulk
typedef struct XB_zPGN_CHG_CFG_BULK
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teBATT_TYPE teBattType;      // Battery Type
    sint32 slDesiredBulkV;          // Desired Bulk Voltage
    sint32 slDesiredBulkVMin;       // Desired Bulk Voltage - Minimum
    sint32 slDesiredBulkVMax;       // Desired Bulk Voltage - Maximum
    sint32 slDesiredBulkI;          // Desired Bulk Current
    sint32 slDesiredBulkIMin;       // Desired Bulk Current - Minimum
    sint32 slDesiredBulkIMax;       // Desired Bulk Current - Maximum
    sint32 slBulkTermV;             // Bulk Termination Voltage
    sint32 slBulkTermVMin;          // Bulk Termination Voltage - Minimum
    sint32 slBulkTermVMax;          // Bulk Termination Voltage - Maximum
    uint16 uiBulkTermTime;          // Bulk Termination Time
    uint16 uiBulkTermTimeMin;       // Bulk Termination Time - Minimum
    uint16 uiBulkTermTimeMax;       // Bulk Termination Time - Maximum
    uint16 uiBulkPeriodTo;          // Bulk Period Timeout
    uint16 uiBulkPeriodToMin;       // Bulk Period Timeout - Minimum
    uint16 uiBulkPeriodToMax;       // Bulk Period Timeout - Maximum
} XB_tzPGN_CHG_CFG_BULK;

// Charger Configuration - Absorption
typedef struct XB_zPGN_CHG_CFG_ABSORP
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teBATT_TYPE teBattType;      // Battery Type
    sint32 slDesiredAbsV;           // Desired Absorption Voltage
    sint32 slDesiredAbsVMin;        // Desired Absorption Voltage - Minimum
    sint32 slDesiredAbsVMax;        // Desired Absorption Voltage - Maximum
    sint32 slDesiredAbsI;           // Desired Absorption Current
    sint32 slDesiredAbsIMin;        // Desired Absorption Current - Minimum
    sint32 slDesiredAbsIMax;        // Desired Absorption Current - Maximum
    sint32 slAbsTermI;              // Absorption Termination Current
    sint32 slAbsTermIMin;           // Absorption Termination Current - Minimum
    sint32 slAbsTermIMax;           // Absorption Termination Current - Maximum
    uint16 uiAbsTermTimeI;          // Absorption Termination Time - Current
    uint16 uiAbsTermTimeIMin;       // Absorption Termination Time - Current - Minimum
    uint16 uiAbsTermTimeIMax;       // Absorption Termination Time - Current - Maximum
    uint16 uiAbsTermTimeConstV;     // Absorption Termination Time - Constant Voltage
    uint16 uiAbsTermTimeConstVMin;  // Absorption Termination Time - Constant Voltage - Minimum
    uint16 uiAbsTermTimeConstVMax;  // Absorption Termination Time - Constant Voltage - Maximum
    uint16 uiAbsPeriodTo;           // Absorption Period Timeout
    uint16 uiAbsPeriodToMin;        // Absorption Period Timeout - Minimum
    uint16 uiAbsPeriodToMax;        // Absorption Period Timeout - Maximum
} XB_tzPGN_CHG_CFG_ABSORP;

// Charger Configuration - Overcharge
typedef struct XB_zPGN_CHG_CFG_OVERCHARGE
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teBATT_TYPE teBattType;      // Battery Type
    sint32 slDesiredOChgV;          // Desired Over Charge Voltage
    sint32 slDesiredOChgVMin;       // Desired Over Charge Voltage - Minimum
    sint32 slDesiredOChgVMax;       // Desired Over Charge Voltage - Maximum
    sint32 slDesiredOChgI;          // Desired Over Charge Current
    sint32 slDesiredOChgIMin;       // Desired Over Charge Current - Minimum
    sint32 slDesiredOChgIMax;       // Desired Over Charge Current - Maximum
    uint16 uiOChgPeriodTo;          // Over Charge Period Timeout
    uint16 uiOChgPeriodToMin;       // Over Charge Period Timeout - Minimum
    uint16 uiOChgPeriodToMax;       // Over Charge Period Timeout - Maximum
} XB_tzPGN_CHG_CFG_OVERCHARGE;

// Charger Configuration - Float
typedef struct XB_zPGN_CHG_CFG_FLOAT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teBATT_TYPE teBattType;      // Battery Type
    sint32 slDesiredFloatV;         // Desired Float Voltage
    sint32 slDesiredFloatVMin;      // Desired Float Voltage - Minimum
    sint32 slDesiredFloatVMax;      // Desired Float Voltage - Maximum
    sint32 slDesiredFloatI;         // Desired Float Current
    sint32 slDesiredFloatIMin;      // Desired Float Current - Minimum
    sint32 slDesiredFloatIMax;      // Desired Float Current - Maximum
    sint32 slFloatTermV;            // Float Termination Voltage
    sint32 slFloatTermVMin;         // Float Termination Voltage - Minimum
    sint32 slFloatTermVMax;         // Float Termination Voltage - Maximum
    uint16 uiFloatTermTime;         // Float Termination Time
    uint16 uiFloatTermTimeMin;      // Float Termination Time - Minimum
    uint16 uiFloatTermTimeMax;      // Float Termination Time - Maximum
    uint16 uiFloatPeriodTo;         // Float Period Timeout
    uint16 uiFloatPeriodToMin;      // Float Period Timeout - Minimum
    uint16 uiFloatPeriodToMax;      // Float Period Timeout - Maximum
} XB_tzPGN_CHG_CFG_FLOAT;

// Charger Configuration - Equalize
typedef struct XB_zPGN_CHG_CFG_EQUALIZE
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teBATT_TYPE teBattType;      // Battery Type
    sint32 slDesiredEqlzV;          // Desired Equalization Voltage
    sint32 slDesiredEqlzVMin;       // Desired Equalization Voltage - Minimum
    sint32 slDesiredEqlzVMax;       // Desired Equalization Voltage - Maximum
    sint32 slDesiredEqlzI;          // Desired Equalization Current
    sint32 slDesiredEqlzIMin;       // Desired Equalization Current - Minimum
    sint32 slDesiredEqlzIMax;       // Desired Equalization Current - Maximum
    sint32 slEqlzTermVDelta;        // Equalization Termination Voltage Delta
    sint32 slEqlzTermVDeltaMin;     // Equalization Termination Voltage Delta - Minimum
    sint32 slEqlzTermVDeltaMax;     // Equalization Termination Voltage Delta - Maximum
    uint16 uiEqlzTermTime;          // Equalization Termination Time
    uint16 uiEqlzTermTimeMin;       // Equalization Termination Time - Minimum
    uint16 uiEqlzTermTimeMax;       // Equalization Termination Time - Maximum
    uint16 uiEqlzPeriodTo;          // Equalization Period Timeout
    uint16 uiEqlzPeriodToMin;       // Equalization Period Timeout - Minimum
    uint16 uiEqlzPeriodToMax;       // Equalization Period Timeout - Maximum
    XB_teCMD_PAIR teEqlzSuppEnDis;  // Equalization Supported Enable/Disable
} XB_tzPGN_CHG_CFG_EQUALIZE;

// Charger Configuration - Constant Voltage Constant Current
typedef struct XB_zPGN_CHG_CFG_CV_CI
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teBATT_TYPE teBattType;      // Battery Type
    sint32 slDesiredOutV;           // Desired Output Voltage
    sint32 slDesiredOutVMin;        // Desired Output Voltage - Minimum
    sint32 slDesiredOutVMax;        // Desired Output Voltage - Maximum
    sint32 slDesiredOutI;           // Desired Output Current
    sint32 slDesiredOutIMin;        // Desired Output Current - Minimum
    sint32 slDesiredOutIMax;        // Desired Output Current - Maximum
} XB_tzPGN_CHG_CFG_CV_CI;

// DC Source Configuration - Battery
typedef struct XB_zPGN_DC_SRC_CFG_BATT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teBATT_TYPE teBattType;      // Battery Type
    sint32 slNomV;                  // Nominal Voltage
    uint16 uiBattAmpHrRating;       // Battery Amp Hour Rating
    uint16 uiBattAmpHrRatingMin;    // Battery Amp Hour Rating - Minimum
    uint16 uiBattAmpHrRatingMax;    // Battery Amp Hour Rating - Maximum
    uchar8 ucBattTempCoeff;         // Battery Temperature Coefficient
    uchar8 ucBattTempCoeffMin;      // Battery Temperature Coefficient - Minimum
    uchar8 ucBattTempCoeffMax;      // Battery Temperature Coefficient - Maximum
    XB_teBATT_CHEM teBattChem;      // Battery Chemistry
    uchar8 ucPeukertExponent;       // Peukert Exponent
    uchar8 ucPeukertExponentMin;    // Peukert Exponent - Minimum
    uchar8 ucPeukertExponentMax;    // Peukert Exponent - Maximum
    schar8 scChgEfficFactor;        // Charge Efficiency Factor
    schar8 scChgEfficFactorMin;     // Charge Efficiency Factor - Minimum
    schar8 scChgEfficFactorMax;     // Charge Efficiency Factor - Maximum
} XB_tzPGN_DC_SRC_CFG_BATT;

// Calibration Command
typedef struct XB_zPGN_CALIB_CMD
{
    XB_teCMD_PAIR teCalibEnDis;     // Calibration Enable/Disable
    uint32 ulStsPgn;                // Status Parameter Group Number
    uchar8 ucDataPtId;              // Data Point Identifier
    uchar8 ucDataPtCnt;             // Data Point Count
} XB_tzPGN_CALIB_CMD;

// AGS Control Command
typedef struct XB_zPGN_AGS_CTRL_CMD
{
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teAGS_DESIRED_STATE teDesiredState; // Desired State
} XB_tzPGN_AGS_CTRL_CMD;

// Inverter Configuration - Load Sense
typedef struct XB_zPGN_INV_CFG_LOAD_SENSE
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiLoadSensePwrThresh;    // Load Sense Power Threshold
    uint16 uiLoadSensePwrThreshMin; // Load Sense Power Threshold - Minimum
    uint16 uiLoadSensePwrThreshMax; // Load Sense Power Threshold - Maximum
    uint16 uiLoadSenseInterval;     // Load Sense Interval
    uint16 uiLoadSenseIntervalMin;  // Load Sense Interval - Minimum
    uint16 uiLoadSenseIntervalMax;  // Load Sense Interval - Maximum
} XB_tzPGN_INV_CFG_LOAD_SENSE;

// Inverter Configuration
typedef struct XB_zPGN_INV_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teCMD_PAIR teLoadSenseEnDis; // Load Sense Enable/Disable
    XB_teINV_MODE teInvMode;        // Inverter Mode
    XB_teXFR_SWITCH_MODE teXferSwMode; // Transfer Switch Mode
} XB_tzPGN_INV_CFG;

// System Identifier Configuration
typedef struct XB_zPGN_SYS_ID_CFG
{
    uchar8 ucMsgCount;              // Message Count
    uint32 ulSysId;                 // System Identifier
} XB_tzPGN_SYS_ID_CFG;

// Reset Command
typedef struct XB_zPGN_RESET_CMD
{
    uchar8 ucProcessorInst;         // Controller Instance
    XB_teRST_CMD teCmd;             // Command
} XB_tzPGN_RESET_CMD;

// Association Configuration
typedef struct XB_zPGN_ASSOC_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teASSN_TYPE teAssocType;     // Association Type
    uchar8 ucAssocInst;             // Association Instance
    uchar8 ucAssocId;               // Association Identifier
} XB_tzPGN_ASSOC_CFG;

// AC Input Configuration
typedef struct XB_zPGN_AC_IN_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint32 ulVoltage;               // Voltage
    uint32 ulVoltageMin;            // Voltage - Minimum
    uint32 ulVoltageMax;            // Voltage - Maximum
    uint16 uiUnitBreakerSz;         // Unit Breaker Size
    uint16 uiUnitBreakerSzMin;      // Unit Breaker Size - Minimum
    uint16 uiUnitBreakerSzMax;      // Unit Breaker Size - Maximum
    uint16 uiFreq;                  // Frequency
    uint16 uiFreqMin;               // Frequency - Minimum
    uint16 uiFreqMax;               // Frequency - Maximum
    uint32 ulRealPwr;               // Real Power
    uint32 ulRealPwrMin;            // Real Power - Minimum
    uint32 ulRealPwrMax;            // Real Power - Maximum
    uint16 uiSrcBreakerSz;          // Source Breaker Size
    uint16 uiSrcBreakerSzMin;       // Source Breaker Size - Minimum
    uint16 uiSrcBreakerSzMax;       // Source Breaker Size - Maximum
} XB_tzPGN_AC_IN_CFG;

// Charger Configuration - Multiple Nodes
typedef struct XB_zPGN_CHG_CFG_MULTIPLE_NODES
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    sint32 slNomDcV;                // Nominal DC Voltage
    sint32 slNomDcVMin;             // Nominal DC Voltage - Minimum
    sint32 slNomDcVMax;             // Nominal DC Voltage - Maximum
    sint32 slMaxDcI;                // Maximum DC Current
    sint32 slMaxDcIMin;             // Maximum DC Current - Minimum
    sint32 slMaxDcIMax;             // Maximum DC Current - Maximum
    uint16 uiAcInBreakerSz;         // AC Input Breaker Size
    uint16 uiAcInBreakerSzMin;      // AC Input Breaker Size - Minimum
    uint16 uiAcInBreakerSzMax;      // AC Input Breaker Size - Maximum
} XB_tzPGN_CHG_CFG_MULTIPLE_NODES;

// Clear Command
typedef struct XB_zPGN_CLEAR_CMD
{
    XB_teCLR_ITEM_ID teListItem;    // List Item
    XB_teFLT_ID teFaultId;          // Fault Identifier
    XB_teWRN_ID teWarnId;           // Warning Identifier
} XB_tzPGN_CLEAR_CMD;

// Battery Monitor Configuration
typedef struct XB_zPGN_BATT_MON_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiNomTemp;               // Nominal Temperature
    uint16 uiNomTempMin;            // Nominal Temperature - Minimum
    uint16 uiNomTempMax;            // Nominal Temperature - Maximum
    XB_teMEASUREMENT_UNIT teTempUnit; // Temperature Unit
    uchar8 ucBattCapTempCoeff;      // Battery Capacity Temperature Coefficient
    uchar8 ucBattCapTempCoeffMin;   // Battery Capacity Temperature Coefficient - Minimum
    uchar8 ucBattCapTempCoeffMax;   // Battery Capacity Temperature Coefficient - Maximum
    uchar8 ucNomDisRate;            // Nominal Discharge Rate
    uchar8 ucNomDisRateMin;         // Nominal Discharge Rate - Minimum
    uchar8 ucNomDisRateMax;         // Nominal Discharge Rate - Maximum
    uchar8 ucSelfDischargeRate;     // Self Discharge Rate
    uchar8 ucSelfDischargeRateMin;  // Self Discharge Rate - Minimum
    uchar8 ucSelfDischargeRateMax;  // Self Discharge Rate - Maximum
    XB_teSHUNT_AMP_RATING teShuntAmpRating; // Shunt Amp Rating
    XB_teSHUNT_VOLT_RATING teShuntVoltRating; // Shunt Voltage Rating
    XB_teGENERIC_MODE teChgEfficFactorMode; // Charge Efficiency Factor Mode
    XB_teBATT_MONITOR_SHORT_TIMER teBacklightDuration; // Backlight Duration
    XB_teNOMINAL_DCV teNomV;        // Nominal Voltage
    XB_teCMD_PAIR teSetupLock;      // Setup Lock
    XB_teFILTER_SPEED teTimeRemAvgFilter; // Time Remaining Averaging Filter
    uint16 uiDefaultTemp;           // Default Temperature
    uint16 uiDefaultTempMin;        // Default Temperature - Minimum
    uint16 uiDefaultTempMax;        // Default Temperature - Maximum
} XB_tzPGN_BATT_MON_CFG;

// AGS Configuration
typedef struct XB_zPGN_EXTRA_AGS_CFG
{
    uchar8 ucCntctInst;             // Contact Instance
    XB_teCMD_PAIR teCntctClsAutoEnDis; // Contact Closure Auto Enable/Disable
} XB_tzPGN_EXTRA_AGS_CFG;

typedef struct XB_zPGN_AGS_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiQtBeg;                 // Quiet Time Begin
    uint16 uiQtEnd;                 // Quiet Time End
    XB_teCMD_PAIR teQtEnDis;        // Quiet Time Enable/Disable
    XB_teCMD_PAIR teDcVAutoStartEnDis; // DC Voltage Auto Start Enable/Disable
    XB_teCMD_PAIR teDcVAutoStopEnDis; // DC Voltage Auto Stop Enable/Disable
    XB_teCMD_PAIR teDcIAutoStartEnDis; // DC Current Auto Start Enable/Disable
    XB_teCMD_PAIR teDcIAutoStopEnDis; // DC Current Auto Stop Enable/Disable
    XB_teCMD_PAIR teBattSocAutoStartEnDis; // Battery SOC Auto Start Enable/Disable
    XB_teCMD_PAIR teBattSocAutoStopEnDis; // Battery SOC Auto Stop Enable/Disable
    XB_teCMD_PAIR teAcIAutoStartEnDis; // AC Current Auto Start Enable/Disable
    XB_teCMD_PAIR teAcIAutoStopEnDis; // AC Current Auto Stop Enable/Disable
    XB_teCMD_PAIR teAcPwrAutoStartEnDis; // AC Power Auto Start Enable/Disable
    XB_teCMD_PAIR teAcPwrAutoStopEnDis; // AC Power Auto Stop Enable/Disable
    XB_teCMD_PAIR teAbsorpAutoStopEnDis; // Absorption Auto Stop Enable/Disable
    XB_teCMD_PAIR teFloatAutoStopEnDis; // Float Auto Stop Enable/Disable
    uchar8 ucMaxAutoCycNoUser;      // Maximum Automatic Cycles with No User Intervention
    uchar8 ucMaxAutoCycNoUserMin;   // Maximum Automatic Cycles with No User Intervention - Minimum
    uchar8 ucMaxAutoCycNoUserMax;   // Maximum Automatic Cycles with No User Intervention - Maximum
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG;

// AGS Configuration - Generator
typedef struct XB_zPGN_EXTRA_AGS_CFG_GEN
{
    XB_teRELAY_ID teRelayId;        // Relay Identifier
    XB_teRELAY_FUNC teRelayFunc;    // Relay Function
} XB_tzPGN_EXTRA_AGS_CFG_GEN;

typedef struct XB_zPGN_AGS_CFG_GEN
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teGEN_INTERFACE_TYPE teGenIntfType; // Generator Interface Type
    XB_teGEN_OUT_TYPE teGenOutType; // Generator Output Type
    uint16 uiPreheatTime;           // Preheat Time
    uint16 uiPreheatTimeMin;        // Preheat Time - Minimum
    uint16 uiPreheatTimeMax;        // Preheat Time - Maximum
    uint16 uiStartDly;              // Start Delay
    uint16 uiStartDlyMin;           // Start Delay - Minimum
    uint16 uiStartDlyMax;           // Start Delay - Maximum
    uint16 uiCrankTime;             // Crank Time
    uint16 uiCrankTimeMin;          // Crank Time - Minimum
    uint16 uiCrankTimeMax;          // Crank Time - Maximum
    uint16 uiShutdownBypassTime;    // Shutdown Bypass Time
    uint16 uiShutdownBypassTimeMin; // Shutdown Bypass Time - Minimum
    uint16 uiShutdownBypassTimeMax; // Shutdown Bypass Time - Maximum
    uint16 uiStarterCooldownTime;   // Starter Cooldown Time
    uint16 uiStarterCooldownTimeMin; // Starter Cooldown Time - Minimum
    uint16 uiStarterCooldownTimeMax; // Starter Cooldown Time - Maximum
    uint16 uiCrankRetryTime;        // Crank Retry Time
    uint16 uiCrankRetryTimeMin;     // Crank Retry Time - Minimum
    uint16 uiCrankRetryTimeMax;     // Crank Retry Time - Maximum
    uint16 uiGenWarmupTime;         // Generator Warmup Time
    uint16 uiGenWarmupTimeMin;      // Generator Warmup Time - Minimum
    uint16 uiGenWarmupTimeMax;      // Generator Warmup Time - Maximum
    uint16 uiMaxRunTime;            // Maximum Run Time
    uint16 uiMaxRunTimeMin;         // Maximum Run Time - Minimum
    uint16 uiMaxRunTimeMax;         // Maximum Run Time - Maximum
    uint16 uiGenCooldownTime;       // Generator Cool Down Time
    uint16 uiGenCooldownTimeMin;    // Generator Cool Down Time - Minimum
    uint16 uiGenCooldownTimeMax;    // Generator Cool Down Time - Maximum
    uint16 uiSpindownTime;          // Spindown Time
    uint16 uiSpindownTimeMin;       // Spindown Time - Minimum
    uint16 uiSpindownTimeMax;       // Spindown Time - Maximum
    uint16 uiStopTimeout;           // Stop Timeout
    uint16 uiStopTimeoutMin;        // Stop Timeout - Minimum
    uint16 uiStopTimeoutMax;        // Stop Timeout - Maximum
    uchar8 ucMaxGenStartRetries;    // Maximum Generator Start Retries
    uchar8 ucMaxGenStartRetriesMin; // Maximum Generator Start Retries - Minimum
    uchar8 ucMaxGenStartRetriesMax; // Maximum Generator Start Retries - Maximum
    uchar8 ucExercisePer;           // Exercise Period
    uchar8 ucExercisePerMin;        // Exercise Period - Minimum
    uchar8 ucExercisePerMax;        // Exercise Period - Maximum
    uchar8 ucExerciseDur;           // Exercise Duration
    uchar8 ucExerciseDurMin;        // Exercise Duration - Minimum
    uchar8 ucExerciseDurMax;        // Exercise Duration - Maximum
    uint16 uiExerciseTod;           // Exercise Time of Day
    uint16 uiExerciseTodMin;        // Exercise Time of Day - Minimum
    uint16 uiExerciseTodMax;        // Exercise Time of Day - Maximum
    uint16 uiGenRunHoldTime;        // Generator Run Hold Time
    uint16 uiGenRunHoldTimeMin;     // Generator Run Hold Time - Minimum
    uint16 uiGenRunHoldTimeMax;     // Generator Run Hold Time - Maximum
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_GEN *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_GEN;

// Charger Configuration
typedef struct XB_zPGN_CHG_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teCHG_ALG teChgAlgorithm;    // Charging Algorithm
    uchar8 ucChgILimit;             // Charger Current Limit
    uchar8 ucChgILimitMin;          // Charger Current Limit - Minimum
    uchar8 ucChgILimitMax;          // Charger Current Limit - Maximum
    XB_teCMD_PAIR teEqlzOneTimeEnDis; // Equalize One-Time Enable/Disable
    XB_teCMD_PAIR teOverChgEnDis;   // Over Charge Enable/Disable
    XB_teCMD_PAIR teChgOverrideEnDis; // Charger Override Enable/Disable
    XB_teCHG_MODE teChgMode;        // Charge Mode
    XB_teBATT_TEMP_WHEN_NO_SENSOR teBattTempNoSensor; // Battery Temperature - No Sensor
} XB_tzPGN_CHG_CFG;

// Periodic Transmit Configuration
typedef struct XB_zPGN_EXTRA_PER_XMIT_CFG
{
    uint32 ulParmGrpNum;            // PGN to Transmit
    uchar8 ucXmitAddr;              // Transmit Address
    uint16 uiXmitPeriod;            // Transmit Period
} XB_tzPGN_EXTRA_PER_XMIT_CFG;

typedef struct XB_zPGN_PER_XMIT_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_PER_XMIT_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_PER_XMIT_CFG;

// Development - Peek at Address Request
typedef struct XB_zPGN_DEV_PEEK_ADDR_REQ
{
    uchar8 ucProcessorInst;         // Controller Instance
    uint32 ulStartMemAddr;          // Start Memory Address
    uint16 uiNumBytesGet;           // Number of Bytes to Retrieve
} XB_tzPGN_DEV_PEEK_ADDR_REQ;

// Development - Peek at Address Response
typedef struct XB_zPGN_EXTRA_DEV_PEEK_ADDR_RSP
{
    uchar8 ucBytesGot;              // Bytes Retrieved
} XB_tzPGN_EXTRA_DEV_PEEK_ADDR_RSP;

typedef struct XB_zPGN_DEV_PEEK_ADDR_RSP
{
    uchar8 ucProcessorInst;         // Controller Instance
    uint32 ulStartMemAddr;          // Start memory Address
    uint16 uiNumBytesGot;           // Number of Bytes Retrieved
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DEV_PEEK_ADDR_RSP *ptzExtra;   // Extra structures
} XB_tzPGN_DEV_PEEK_ADDR_RSP;

// Development - Poke at Address
typedef struct XB_zPGN_EXTRA_DEV_POKE_ADDR
{
    uchar8 ucBytesSet;              // Bytes to Set
} XB_tzPGN_EXTRA_DEV_POKE_ADDR;

typedef struct XB_zPGN_DEV_POKE_ADDR
{
    uchar8 ucProcessorInst;         // Controller Instance
    uint32 ulStartMemAddr;          // Start Memory Address
    uint16 uiNumBytesSet;           // Number of Bytes to Set
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DEV_POKE_ADDR *ptzExtra;   // Extra structures
} XB_tzPGN_DEV_POKE_ADDR;

// File Download Block
typedef struct XB_zPGN_EXTRA_FILE_DNLD_BLK
{
    uchar8 ucBlkData;               // Block Data
} XB_tzPGN_EXTRA_FILE_DNLD_BLK;

typedef struct XB_zPGN_FILE_DNLD_BLK
{
    uint16 uiBlkNum;                // Block Number
    uint16 uiBlkSz;                 // Block Size
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_FILE_DNLD_BLK *ptzExtra;   // Extra structures
} XB_tzPGN_FILE_DNLD_BLK;

// File Download Information
typedef struct XB_zPGN_FILE_DNLD_INF
{
    XB_teFUNC_CODE teDeviceFunction; // Device Function
    uchar8 ucProcessorInst;         // Controller Instance
    XB_teSW_MOD_ID teSwModId;       // Software Module Identifier
    uint32 ulSwVer;                 // Software Version
    uint32 ulFileSz;                // File Size
    uint16 uiCrc;                   // CRC
    uint16 uiExpectNumBlks;         // Expected Number of Blocks
} XB_tzPGN_FILE_DNLD_INF;

// Receive Timeout Configuration
typedef struct XB_zPGN_EXTRA_RX_TO_CFG
{
    uint32 ulParmGrpNum;            // Parameter Group Number
    uint16 uiTimeout;               // Timeout
} XB_tzPGN_EXTRA_RX_TO_CFG;

typedef struct XB_zPGN_RX_TO_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_RX_TO_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_RX_TO_CFG;

// Enable/Disable Configuration
typedef struct XB_zPGN_EN_DIS_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teCMD_PAIR tePerTxEnDis;     // Periodic Transmit Enable/Disable
    XB_teCMD_PAIR teIdentEnDis;     // Identify Enable/Disable
} XB_tzPGN_EN_DIS_CFG;

// Charger Control Command
typedef struct XB_zPGN_CHG_CTRL_CMD
{
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teCMD_PAIR teChgEnDis;       // Charger Enable/Disable
} XB_tzPGN_CHG_CTRL_CMD;

// Association Status
typedef struct XB_zPGN_ASSOC_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teASSN_TYPE teAssocType;     // Association Type
    uchar8 ucAssocInst;             // Association Instance
    uchar8 ucAssocId;               // Association Identifier
} XB_tzPGN_ASSOC_STS;

// Inverter Control Command
typedef struct XB_zPGN_INV_CTRL_CMD
{
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teCMD_PAIR teInvEnDis;       // Inverter Enable/Disable
    XB_teCMD_PAIR teSellToGridEnDis; // Sell Enable/Disable
    XB_teCMD_PAIR teForceSell;      // Force Sell On/Off
} XB_tzPGN_INV_CTRL_CMD;

// Simple Calibration Configuration
typedef struct XB_zPGN_SIMPLE_CALIB_CFG
{
    uchar8 ucMsgCount;              // Message Count
    uint32 ulStsPgn;                // Status Parameter Group Number
    uchar8 ucDataPtId;              // Data Point Identifier
    uint16 uiScale;                 // Scaling Factor (k)
    sint16 siOffset;                // Offset
    sint32 slValue;                 // Value
} XB_tzPGN_SIMPLE_CALIB_CFG;

// Debug Fast-Packet
typedef struct XB_zPGN_EXTRA_DEBUG_FP
{
    uchar8 ucData;                  // Byte
} XB_tzPGN_EXTRA_DEBUG_FP;

typedef struct XB_zPGN_DEBUG_FP
{
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DEBUG_FP *ptzExtra;   // Extra structures
} XB_tzPGN_DEBUG_FP;

// NAME Configuration
typedef struct XB_zPGN_NAME_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint32 ulUniqueNumber;          // Unique Number (ISO Identity Number)
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    uchar8 ucRsvBit;                // Reserved Bit
    XB_teDEVICE_CLASS teDeviceClass; // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    XB_teINDUSTRY_GRP teIndustryGroup; // Industry Group
    uchar8 ucSelfCfgAddr;           // ISO Self Configurable Address
} XB_tzPGN_NAME_CFG;

// File Download Status
typedef struct XB_zPGN_FILE_DNLD_STS
{
    XB_teOP_STATE_LDR teOpState;    // Operating State
    XB_teDL_RESULT_CODE teResultCode; // Result Code
    uchar8 ucProcessorInst;         // Controller Instance
    uint16 uiModelNum;              // Model Number
    uint16 uiHwModRev;              // Hardware Module Revision
    uint16 uiBlkNum;                // Block Number
} XB_tzPGN_FILE_DNLD_STS;

// AGS Configuration - DC Voltage
typedef struct XB_zPGN_EXTRA_AGS_CFG_DC_V
{
    XB_teCMD_PAIR teStartStop;      // Start or Stop
    uint16 uiPerBeg;                // Period Begin
    uint16 uiPerEnd;                // Period End
    sint32 slVLvl;                  // Voltage Level to Start/Stop
    uint16 uiTimeInt;               // Time Interval to Start/Stop
} XB_tzPGN_EXTRA_AGS_CFG_DC_V;

typedef struct XB_zPGN_AGS_CFG_DC_V
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    sint32 slVLvlStopMin;           // Voltage Level to Stop - Min
    sint32 slVLvlStopMax;           // Voltage Level to Stop - Max
    uint16 uiTimeIntStopMin;        // Time Interval to Stop - Min
    uint16 uiTimeIntStopMax;        // Time Interval to Stop - Max
    sint32 slVLvlStartMin;          // Voltage Level to Start - Min
    sint32 slVLvlStartMax;          // Voltage Level to Start - Max
    uint16 uiTimeIntStartMin;       // Time Interval to Start - Min
    uint16 uiTimeIntStartMax;       // Time Interval to Start - Max
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_DC_V *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_DC_V;

// AGS Configuration - Battery SOC
typedef struct XB_zPGN_EXTRA_AGS_CFG_BATT_SOC
{
    XB_teCMD_PAIR teStartStop;      // Start or Stop
    uint16 uiPerBeg;                // Period Begin
    uint16 uiPerEnd;                // Period End
    uchar8 ucSocLvl;                // State of Charge Level to Start/Stop
    uint16 uiTimeInt;               // Time Interval to Start/Stop
} XB_tzPGN_EXTRA_AGS_CFG_BATT_SOC;

typedef struct XB_zPGN_AGS_CFG_BATT_SOC
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uchar8 ucSocLvlStopMin;         // State of Charge Level to Stop - Min
    uchar8 ucSocLvlStopMax;         // State of Charge Level to Stop - Max
    uint16 uiTimeIntStopMin;        // Time Interval to Stop - Min
    uint16 uiTimeIntStopMax;        // Time Interval to Stop - Max
    uchar8 ucSocLvlStartMin;        // State of Charge Level to Start - Min
    uchar8 ucSocLvlStartMax;        // State of Charge Level to Start - Max
    uint16 uiTimeIntStartMin;       // Time Interval to Start - Min
    uint16 uiTimeIntStartMax;       // Time Interval to Start - Max
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_BATT_SOC *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_BATT_SOC;

// AGS Configuration - AC Current
typedef struct XB_zPGN_EXTRA_AGS_CFG_AC_I
{
    XB_teCMD_PAIR teStartStop;      // Start or Stop
    uint16 uiPerBeg;                // Period Begin
    uint16 uiPerEnd;                // Period End
    uint32 ulAcILvl;                // AC Current Level to Start/Stop
    uint16 uiTimeInt;               // Time Interval to Start/Stop
} XB_tzPGN_EXTRA_AGS_CFG_AC_I;

typedef struct XB_zPGN_AGS_CFG_AC_I
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint32 ulAcILvlStopMin;         // AC Current Level to Stop - Min
    uint32 ulAcILvlStopMax;         // AC Current Level to Stop - Max
    uint16 uiTimeIntStopMin;        // Time Interval to Stop - Min
    uint16 uiTimeIntStopMax;        // Time Interval to Stop - Max
    uint32 ulAcILvlStartMin;        // AC Current Level to Start - Min
    uint32 ulAcILvlStartMax;        // AC Current Level to Start - Max
    uint16 uiTimeIntStartMin;       // Time Interval to Start - Min
    uint16 uiTimeIntStartMax;       // Time Interval to Start - Max
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_AC_I *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_AC_I;

// AGS Configuration - Contact Closure
typedef struct XB_zPGN_EXTRA_AGS_CFG_CNTCT_CLS
{
    uchar8 ucCntctInst;             // Contact Instance
    uint16 uiPerBeg;                // Period Begin
    uint16 uiPerEnd;                // Period End
    uint16 uiClsDly;                // Closing Delay
    uint16 uiOpnDly;                // Opening Delay
} XB_tzPGN_EXTRA_AGS_CFG_CNTCT_CLS;

typedef struct XB_zPGN_AGS_CFG_CNTCT_CLS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiClsDlyMin;             // Closing Delay - Min
    uint16 uiClsDlyMax;             // Closing Delay - Max
    uint16 uiOpnDlyMin;             // Opening Delay - Min
    uint16 uiOpnDlyMax;             // Opening Delay - Max
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_CNTCT_CLS *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_CNTCT_CLS;

// Control Command
typedef struct XB_zPGN_CTRL_CMD
{
    XB_teCTRL_MODE teDesiredMode;   // Desired Mode
} XB_tzPGN_CTRL_CMD;

// User Interface Configuration
typedef struct XB_zPGN_UI_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucDispBright;            // Display Brightness
    uchar8 ucDispContrast;          // Display Contrast
    uchar8 ucBtnHoldTo;             // Button Hold Timeout
    uchar8 ucBtnRptRate;            // Button Repeat Rate
    XB_teUSER_ACCESS_MODE teAccMode; // Access Mode
    uchar8 ucDispSeqTo;             // Display Seqeunce Timeout
    uchar8 ucScrnSaveTo;            // Screen Saver Timeout
    XB_teSPLASH_SCRN_STYLE teSplashScrnStyl; // Splash Screen Style
    uchar8 ucSplashScrnTo;          // Splash Screen Timeout
    uchar8 ucBkltTo;                // Backlight Timeout
    XB_teCMD_PAIR teSplashOnWakeEnDis; // Splash Screen on Wakeup Enable/Disable
    uchar8 ucVol;                   // Volume
    XB_teCMD_PAIR teSndEnDis;       // Sound Enable/Disable
    XB_teCMD_PAIR teBtnSndEnDis;    // Button Sound Enable/Disable
    XB_teCMD_PAIR teFaultSndEnDis;  // Fault Sound Enable/Disable
    XB_teCMD_PAIR teWarnSndEnDis;   // Warning Sound Enable/Disable
    XB_teMEASUREMENT_UNIT teMeasUnit; // Measurement Unit
    XB_teTIME_FORMAT teTimeFmt;     // Time Format
} XB_tzPGN_UI_CFG;

// User Interface Configuration - Splash Image
typedef struct XB_zPGN_EXTRA_UI_CFG_SPLASH_IMG
{
    uchar8 ucImage;                 // Image Data
} XB_tzPGN_EXTRA_UI_CFG_SPLASH_IMG;

typedef struct XB_zPGN_UI_CFG_SPLASH_IMG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teIMAGE_DEPTH teImgDepth;    // Image Depth
    uchar8 ucRows;                  // Number of Pixel Rows
    uchar8 ucCols;                  // Number of Pixel Columns
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_SPLASH_IMG *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_SPLASH_IMG;

// User Interface Configuration - Node Labels
typedef struct XB_zPGN_EXTRA_UI_CFG_NODE_LBL
{
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    XB_teDEVICE_CLASS teDeviceClass; // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    uchar8 aucNodeLbl[ 16 ];        // Node Label
} XB_tzPGN_EXTRA_UI_CFG_NODE_LBL;

typedef struct XB_zPGN_UI_CFG_NODE_LBL
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_NODE_LBL *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_NODE_LBL;

// User Interface Configuration - Association Labels
typedef struct XB_zPGN_EXTRA_UI_CFG_ASSOC_LBL
{
    XB_teASSN_TYPE teAssocType;     // Association Type
    uchar8 ucAssocId;               // Association Identifier
    uchar8 aucAssocLbl[ 16 ];       // Association Label
} XB_tzPGN_EXTRA_UI_CFG_ASSOC_LBL;

typedef struct XB_zPGN_UI_CFG_ASSOC_LBL
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_ASSOC_LBL *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_ASSOC_LBL;

// User Interface Configuration - Faults Text
typedef struct XB_zPGN_EXTRA_UI_CFG_FAULT_TXT
{
    XB_teFLT_TYPE teFaultType;      // Fault Type
    XB_teFLT_ID teFaultId;          // Fault Identifier
    uchar8 aucFaultTxt[ 32 ];       // Fault Text
} XB_tzPGN_EXTRA_UI_CFG_FAULT_TXT;

typedef struct XB_zPGN_UI_CFG_FAULT_TXT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_FAULT_TXT *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_FAULT_TXT;

// User Interface Configuration - Warnings Text
typedef struct XB_zPGN_EXTRA_UI_CFG_WARN_TXT
{
    XB_teWRN_TYPE teWarnType;       // Warning Type
    XB_teWRN_ID teWarnId;           // Warning Identifier
    uchar8 aucWarnTxt[ 32 ];        // Warning Text
} XB_tzPGN_EXTRA_UI_CFG_WARN_TXT;

typedef struct XB_zPGN_UI_CFG_WARN_TXT
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_WARN_TXT *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_WARN_TXT;

// Configuration
typedef struct XB_zPGN_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiIdPeriod;              // Identify Period
    uchar8 ucEntSleepTo;            // Enter Sleep Timeout
    uchar8 ucEntHibTo;              // Enter Hibernate Timeout
    XB_teCMD_PAIR teFaultAutoRst;   // Fault Automatic Reset
} XB_tzPGN_CFG;

// Date and Time Configuration
typedef struct XB_zPGN_DATE_TIME_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint32 ulUtcTime;               // UTC Time
    sint16 siLocalOffsetMins;       // Local Offset, Minutes
    XB_teTIME_DOW teLocalDow;       // Local Day of the Week
} XB_tzPGN_DATE_TIME_CFG;

// Feature Enable/Disable Configuration
typedef struct XB_zPGN_EXTRA_FEATURE_EN_DIS_CFG
{
    XB_teFEATURE_ID teFeatureId;    // Feature Identifier
    XB_teCMD_PAIR teFeatureEnDis;   // Feature Enable/Disable
    uchar8 aucFeatureName[ 16 ];    // Feature Name String
} XB_tzPGN_EXTRA_FEATURE_EN_DIS_CFG;

typedef struct XB_zPGN_FEATURE_EN_DIS_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_FEATURE_EN_DIS_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_FEATURE_EN_DIS_CFG;

// Diagnostic - Indicator Command
typedef struct XB_zPGN_EXTRA_DIAG_INDIC_CMD
{
    XB_teINDICATOR_ID teIndicId;    // Indicator Identifier
    XB_teCMD_PAIR teIndicState;     // Indicator State
} XB_tzPGN_EXTRA_DIAG_INDIC_CMD;

typedef struct XB_zPGN_DIAG_INDIC_CMD
{
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DIAG_INDIC_CMD *ptzExtra;   // Extra structures
} XB_tzPGN_DIAG_INDIC_CMD;

// Diagnostic - Contact Command
typedef struct XB_zPGN_EXTRA_DIAG_CNTCT_CMD
{
    XB_teCONTACT_ID teCntctId;      // Contact Identifier
    XB_teCMD_PAIR teCntctState;     // Contact State
} XB_tzPGN_EXTRA_DIAG_CNTCT_CMD;

typedef struct XB_zPGN_DIAG_CNTCT_CMD
{
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DIAG_CNTCT_CMD *ptzExtra;   // Extra structures
} XB_tzPGN_DIAG_CNTCT_CMD;

// Diagnostic - Contact Status
typedef struct XB_zPGN_EXTRA_DIAG_CNTCT_STS
{
    XB_teCONTACT_ID teCntctId;      // Contact Identifier
    XB_teGENERIC_STS_PAIR teCntctState; // Contact State
} XB_tzPGN_EXTRA_DIAG_CNTCT_STS;

typedef struct XB_zPGN_DIAG_CNTCT_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DIAG_CNTCT_STS *ptzExtra;   // Extra structures
} XB_tzPGN_DIAG_CNTCT_STS;

// Diagnostic - Fan Command
typedef struct XB_zPGN_EXTRA_DIAG_FAN_CMD
{
    XB_teFAN_ID teFanId;            // Fan Identifier
    uchar8 ucFanSpd;                // Fan Speed
} XB_tzPGN_EXTRA_DIAG_FAN_CMD;

typedef struct XB_zPGN_DIAG_FAN_CMD
{
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_DIAG_FAN_CMD *ptzExtra;   // Extra structures
} XB_tzPGN_DIAG_FAN_CMD;

// AC Input Configuration - Over Frequency
typedef struct XB_zPGN_EXTRA_AC_IN_CFG_OF
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint16 siOfLvl;                 // Over Frequency Level
    sint16 siOfLvlMin;              // Over Frequency Level - Minimum
    sint16 siOfLvlMax;              // Over Frequency Level - Maximum
    uint16 uiOfIntvl;               // Over Frequency Interval
    uint16 uiOfIntvlMin;            // Over Frequency Interval - Minimum
    uint16 uiOfIntvlMax;            // Over Frequency Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_OF;

typedef struct XB_zPGN_AC_IN_CFG_OF
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_OF *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_OF;

// AC Input Configuration - Under Frequency
typedef struct XB_zPGN_EXTRA_AC_IN_CFG_UF
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint16 siUfLvl;                 // Under Frequency Level
    sint16 siUfLvlMin;              // Under Frequency Level - Minimum
    sint16 siUfLvlMax;              // Under Frequency Level - Maximum
    uint16 uiUfIntvl;               // Under Frequency Interval
    uint16 uiUfIntvlMin;            // Under Frequency Interval - Minimum
    uint16 uiUfIntvlMax;            // Under Frequency Interval - Maximum
} XB_tzPGN_EXTRA_AC_IN_CFG_UF;

typedef struct XB_zPGN_AC_IN_CFG_UF
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_CFG_UF *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_CFG_UF;

// Diagnostic - Manufacturing Configuration
typedef struct XB_zPGN_DIAG_MFG_CFG
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teMFG_STEP teMfgStep;        // Manufacturing Step
    uint32 ulMfgTime;               // Manufacturing Time
    sint16 siLocalOffsetMins;       // Local Offset, Minutes
} XB_tzPGN_DIAG_MFG_CFG;

// AC Output Configuration - Over Voltage - RMS
typedef struct XB_zPGN_EXTRA_AC_OUT_CFG_OV_RMS
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slOvLvl;                 // Over Voltage Level
    sint32 slOvLvlMin;              // Over Voltage Level - Minimum
    sint32 slOvLvlMax;              // Over Voltage Level - Maximum
    uint16 uiOvIntvl;               // Over Voltage Interval
    uint16 uiOvIntvlMin;            // Over Voltage Interval - Minimum
    uint16 uiOvIntvlMax;            // Over Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_OUT_CFG_OV_RMS;

typedef struct XB_zPGN_AC_OUT_CFG_OV_RMS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_OUT_CFG_OV_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_OUT_CFG_OV_RMS;

// AC Output Configuration - Under Voltage - RMS
typedef struct XB_zPGN_EXTRA_AC_OUT_CFG_UV_RMS
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teEVT_ID teRefEvtId;         // Reference Event Identifier
    sint32 slUvLvl;                 // Under Voltage Level
    sint32 slUvLvlMin;              // Under Voltage Level - Minimum
    sint32 slUvLvlMax;              // Under Voltage Level - Maximum
    uint16 uiUvIntvl;               // Under Voltage Interval
    uint16 uiUvIntvlMin;            // Under Voltage Interval - Minimum
    uint16 uiUvIntvlMax;            // Under Voltage Interval - Maximum
} XB_tzPGN_EXTRA_AC_OUT_CFG_UV_RMS;

typedef struct XB_zPGN_AC_OUT_CFG_UV_RMS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_OUT_CFG_UV_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_OUT_CFG_UV_RMS;

// DC Source Configuration - Photovoltaic Array
typedef struct XB_zPGN_DC_SRC_CFG_PV_ARRAY
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teCMD_PAIR teMpptEnDis;      // MPPT Enable/Disable
    uchar8 ucPwrXfer;               // Power Transfer
    uchar8 ucPwrXferMin;            // Power Transfer - Minimum
    uchar8 ucPwrXferMax;            // Power Transfer - Maximum
} XB_tzPGN_DC_SRC_CFG_PV_ARRAY;

// User Interface Configuration - Faults Behaviour
typedef struct XB_zPGN_EXTRA_UI_CFG_FAULT_BEHAVIOUR
{
    XB_teBEHAVIOUR teFaultBehaviour; // Fault Behaviour
    XB_teFLT_ID teFaultId;          // Fault Identifier
} XB_tzPGN_EXTRA_UI_CFG_FAULT_BEHAVIOUR;

typedef struct XB_zPGN_UI_CFG_FAULT_BEHAVIOUR
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_FAULT_BEHAVIOUR *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_FAULT_BEHAVIOUR;

// User Interface Configuration - Warnings Behaviour
typedef struct XB_zPGN_EXTRA_UI_CFG_WARN_BEHAVIOUR
{
    XB_teBEHAVIOUR teWarnBehaviour; // Warning Behaviour
    XB_teWRN_ID teWarnId;           // Warning Identifier
} XB_tzPGN_EXTRA_UI_CFG_WARN_BEHAVIOUR;

typedef struct XB_zPGN_UI_CFG_WARN_BEHAVIOUR
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_UI_CFG_WARN_BEHAVIOUR *ptzExtra;   // Extra structures
} XB_tzPGN_UI_CFG_WARN_BEHAVIOUR;

// AGS Configuration - DC Current
typedef struct XB_zPGN_EXTRA_AGS_CFG_DC_I
{
    XB_teCMD_PAIR teStartStop;      // Start or Stop
    uint16 uiPerBeg;                // Period Begin
    uint16 uiPerEnd;                // Period End
    sint32 slILvl;                  // Current Level to Start/Stop
    uint16 uiTimeInt;               // Time Interval to Start/Stop
} XB_tzPGN_EXTRA_AGS_CFG_DC_I;

typedef struct XB_zPGN_AGS_CFG_DC_I
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    sint32 slILvlStopMin;           // Current Level to Stop - Min
    sint32 slILvlStopMax;           // Current Level to Stop - Max
    uint16 uiTimeIntStopMin;        // Time Interval to Stop - Min
    uint16 uiTimeIntStopMax;        // Time Interval to Stop - Max
    sint32 slILvlStartMin;          // Current Level to Start - Min
    sint32 slILvlStartMax;          // Current Level to Start - Max
    uint16 uiTimeIntStartMin;       // Time Interval to Start - Min
    uint16 uiTimeIntStartMax;       // Time Interval to Start - Max
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_DC_I *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_DC_I;

// AGS Configuration - AC Power
typedef struct XB_zPGN_EXTRA_AGS_CFG_AC_PWR
{
    XB_teCMD_PAIR teStartStop;      // Start or Stop
    uint16 uiPerBeg;                // Period Begin
    uint16 uiPerEnd;                // Period End
    uint32 ulAcPwrLvl;              // AC Power Level to Start/Stop
    uint16 uiTimeInt;               // Time Interval to Start/Stop
} XB_tzPGN_EXTRA_AGS_CFG_AC_PWR;

typedef struct XB_zPGN_AGS_CFG_AC_PWR
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint32 ulAcPwrLvlStopMin;       // AC Power Level to Stop - Min
    uint32 ulAcPwrLvlStopMax;       // AC Power Level to Stop - Max
    uint16 uiTimeIntStopMin;        // Time Interval to Stop - Min
    uint16 uiTimeIntStopMax;        // Time Interval to Stop - Max
    uint32 ulAcPwrLvlStartMin;      // AC Power Level to Start - Min
    uint32 ulAcPwrLvlStartMax;      // AC Power Level to Start - Max
    uint16 uiTimeIntStartMin;       // Time Interval to Start - Min
    uint16 uiTimeIntStartMax;       // Time Interval to Start - Max
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AGS_CFG_AC_PWR *ptzExtra;   // Extra structures
} XB_tzPGN_AGS_CFG_AC_PWR;

// Gateway Configuration - Address Translation - XanBus Interface
typedef struct XB_zPGN_EXTRA_GW_CFG_ADDR_TRANS_XB_INTF
{
    uchar8 ucXbDeviceInstanceLower; // Device Instance Lower (ISO ECU Instance)
    uchar8 ucXbDeviceInstanceUpper; // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teXbDeviceFunction; // Device Function (ISO Function)
    XB_teDEVICE_CLASS teXbDeviceClass; // Device Class
    uchar8 ucXbSystemInstance;      // System Instance (ISO Device Class Instance)
    uchar8 ucOthDeviceInstanceLower; // Device Instance Lower (ISO ECU Instance)
    uchar8 ucOthDeviceInstanceUpper; // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teOthDeviceFunction; // Device Function (ISO Function)
    XB_teDEVICE_CLASS teOthDeviceClass; // Device Class
    uchar8 ucOthSystemInstance;     // System Instance (ISO Device Class Instance)
    uchar8 ucLoAddr;                // Lo Address
    uchar8 ucHiAddr;                // Hi Address
} XB_tzPGN_EXTRA_GW_CFG_ADDR_TRANS_XB_INTF;

typedef struct XB_zPGN_GW_CFG_ADDR_TRANS_XB_INTF
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_GW_CFG_ADDR_TRANS_XB_INTF *ptzExtra;   // Extra structures
} XB_tzPGN_GW_CFG_ADDR_TRANS_XB_INTF;

// Gateway Configuration - Message Filters - XanBus Interface
typedef struct XB_zPGN_EXTRA_GW_CFG_MSG_FILTERS_XB_INTF
{
    uint32 ulPgn;                   // PGN
    XB_teGENERIC_STS_PAIR teAllowedEnDis; // Allowed Enable/Disable
} XB_tzPGN_EXTRA_GW_CFG_MSG_FILTERS_XB_INTF;

typedef struct XB_zPGN_GW_CFG_MSG_FILTERS_XB_INTF
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_GW_CFG_MSG_FILTERS_XB_INTF *ptzExtra;   // Extra structures
} XB_tzPGN_GW_CFG_MSG_FILTERS_XB_INTF;

// Gateway Configuration - Message Filters - Other Interface
typedef struct XB_zPGN_EXTRA_GW_CFG_MSG_FILTERS_OTH_INTF
{
    uint32 ulPgn;                   // PGN
    XB_teGENERIC_STS_PAIR teAllowedEnDis; // Allowed Enable/Disable
} XB_tzPGN_EXTRA_GW_CFG_MSG_FILTERS_OTH_INTF;

typedef struct XB_zPGN_GW_CFG_MSG_FILTERS_OTH_INTF
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_GW_CFG_MSG_FILTERS_OTH_INTF *ptzExtra;   // Extra structures
} XB_tzPGN_GW_CFG_MSG_FILTERS_OTH_INTF;

// Gateway Configuration - Address Translation - Other Interface
typedef struct XB_zPGN_EXTRA_GW_CFG_ADDR_TRANS_OTH_INTF
{
    uchar8 ucOthDeviceInstanceLower; // Device Instance Lower (ISO ECU Instance)
    uchar8 ucOthDeviceInstanceUpper; // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teOthDeviceFunction; // Device Function (ISO Function)
    XB_teDEVICE_CLASS teOthDeviceClass; // Device Class
    uchar8 ucOthSystemInstance;     // System Instance (ISO Device Class Instance)
    uchar8 ucXbDeviceInstanceLower; // Device Instance Lower (ISO ECU Instance)
    uchar8 ucXbDeviceInstanceUpper; // Device Instance Upper (ISO Function Instance)
    XB_teFUNC_CODE teXbDeviceFunction; // Device Function (ISO Function)
    XB_teDEVICE_CLASS teXbDeviceClass; // Device Class
    uchar8 ucXbSystemInstance;      // System Instance (ISO Device Class Instance)
} XB_tzPGN_EXTRA_GW_CFG_ADDR_TRANS_OTH_INTF;

typedef struct XB_zPGN_GW_CFG_ADDR_TRANS_OTH_INTF
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_GW_CFG_ADDR_TRANS_OTH_INTF *ptzExtra;   // Extra structures
} XB_tzPGN_GW_CFG_ADDR_TRANS_OTH_INTF;

// Gateway Configuration
typedef struct XB_zPGN_GW_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teGATEWAY_MODE teMode;       // Gateway Mode
} XB_tzPGN_GW_CFG;

// Gateway Configuration - Identifier Translation
typedef struct XB_zPGN_EXTRA_GW_CFG_ID_TRANS
{
    XB_teSRC_TYPE teSrcType;        // Source Type
    uchar8 ucXbId;                  // XanBus Identifier
    uchar8 ucOthId;                 // Other Identifier
} XB_tzPGN_EXTRA_GW_CFG_ID_TRANS;

typedef struct XB_zPGN_GW_CFG_ID_TRANS
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_GW_CFG_ID_TRANS *ptzExtra;   // Extra structures
} XB_tzPGN_GW_CFG_ID_TRANS;

// EMS Configuration
typedef struct XB_zPGN_EMS_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teBREAKER_SETTING teShoreBreakerMode; // Shore Breaker Mode
    XB_teBREAKER_SETTING teGenBreakerMode; // Generator Breaker Mode
    XB_teCMD_PAIR teBreakerDeratingEnDis; // Breaker Derating Enable/Disable
    uint16 uiShoreBreakerRating;    // Shore Breaker Rating
    uint16 uiShoreBreakerRatingMin; // Shore Breaker Rating - Minimum
    uint16 uiShoreBreakerRatingMax; // Shore Breaker Rating - Maximum
    uint16 uiGenBreakerRating;      // Generator Breaker Rating
    uint16 uiGenBreakerRatingMin;   // Generator Breaker Rating - Minimum
    uint16 uiGenBreakerRatingMax;   // Generator Breaker Rating - Maximum
    uchar8 ucConSeqDelay;           // Connect Sequence Delay
    uchar8 ucConSeqDelayMin;        // Connect Sequence Delay - Minimum
    uchar8 ucConSeqDelayMax;        // Connect Sequence Delay - Maximum
    uint16 uiGenWarmDelay;          // Generator Warm Up Delay
    uint16 uiGenWarmDelayMin;       // Generator Warm Up Delay - Minimum
    uint16 uiGenWarmDelayMax;       // Generator Warm Up Delay - Maximum
    uchar8 ucAcDisqualifyPriority;  // AC Disqualify Priority
} XB_tzPGN_EMS_CFG;

// EMS Circuit Configuration
typedef struct XB_zPGN_EMS_CKT_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teCIRCUIT_ID teCircuitId;    // Circuit Identifier
    uint16 uiStringId;              // String Identifier
    XB_teCMD_PAIR teEnDisCircuit;   // Enable/Disable Circuit
    XB_teASSN_TYPE teAssocType;     // Association Type
    XB_teAC_LINE teAcLine;          // AC Line
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uchar8 ucPriority;              // Priority
    XB_teGEN_SOFT_START teGenSoftStart; // Generator Soft Start
    uchar8 ucReconnectDelay;        // Reconnect Delay
    uchar8 ucReconnectDelayMin;     // Reconnect Delay - Minimum
    uchar8 ucReconnectDelayMax;     // Reconnect Delay - Maximum
    uchar8 ucDisconnectDelay;       // Disconnect Delay
    uchar8 ucDisconnectDelayMin;    // Disconnect Delay - Minimum
    uchar8 ucDisconnectDelayMax;    // Disconnect Delay - Maximum
    uint16 uiRelayTimeout;          // Relay Timeout
    uint16 uiRelayTimeoutMin;       // Relay Timeout - Minimum
    uint16 uiRelayTimeoutMax;       // Relay Timeout - Maximum
    uint16 uiBattLowVTrigSet;       // Battery Low Voltage Trigger Set
    uint16 uiBattLowVTrigSetMin;    // Battery Low Voltage Trigger Set - Minimum
    uint16 uiBattLowVTrigSetMax;    // Battery Low Voltage Trigger Set - Maximum
    uint16 uiBattLowVTrigClear;     // Battery Low Voltage Trigger Clear
    uint16 uiBattLowVTrigClearMin;  // Battery Low Voltage Trigger Clear - Minimum
    uint16 uiBattLowVTrigClearMax;  // Battery Low Voltage Trigger Clear - Maximum
    uint16 uiBattHighVTrigSet;      // Battery High Voltage Trigger Set
    uint16 uiBattHighVTrigSetMin;   // Battery High Voltage Trigger Set - Minimum
    uint16 uiBattHighVTrigSetMax;   // Battery High Voltage Trigger Set - Maximum
    uint16 uiBattHighVTrigClear;    // Battery High Voltage Trigger Clear
    uint16 uiBattHighVTrigClearMin; // Battery High Voltage Trigger Clear - Minimum
    uint16 uiBattHighVTrigClearMax; // Battery High Voltage Trigger Clear - Maximum
    uchar8 ucReconnectMargin;       // Reconnect Margin
    uchar8 ucReconnectMarginMin;    // Reconnect Margin - Minimum
    uchar8 ucReconnectMarginMax;    // Reconnect Margin - Maximum
} XB_tzPGN_EMS_CKT_CFG;

// AC Line Configuration
typedef struct XB_zPGN_EXTRA_AC_LINE_CFG
{
    XB_teAC_LINE teAcLineLocal;     // Local AC Line
    XB_teAC_LINE teAcLineRemote;    // Remote AC Line
} XB_tzPGN_EXTRA_AC_LINE_CFG;

typedef struct XB_zPGN_AC_LINE_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_LINE_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_AC_LINE_CFG;

// Grid Frequency Stabilization Configuration
typedef struct XB_zPGN_GFS_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teCMD_PAIR teGfsEnDis;       // GFS Enable/Disable
    uint16 uiApiFreqStartLvl;       // API Frequency Start Level
    uint16 uiApiFreqStartLvlMin;    // API Frequency Start Level - Minimum
    uint16 uiApiFreqStartLvlMax;    // API Frequency Start Level - Maximum
    uint16 uiApiFreqStopLvl;        // API Frequency Stop Level
    uint16 uiApiFreqStopLvlMin;     // API Frequency Stop Level - Minimum
    uint16 uiApiFreqStopLvlMax;     // API Frequency Stop Level - Maximum
    uint16 uiApiFreqRecoverLvl;     // API Frequency Recover Level
    uint16 uiApiFreqRecoverLvlMin;  // API Frequency Recover Level - Minimum
    uint16 uiApiFreqRecoverLvlMax;  // API Frequency Recover Level - Maximum
    uint16 uiApiPtGradient;         // API Active Power Gradient with Time
    uint16 uiApiPtGradientMin;      // API Active Power Gradient with Time - Minimum
    uint16 uiApiPtGradientMax;      // API Active Power Gradient with Time - Maximum
    uint16 uiAprFreqStartLvl;       // APR Frequency Start Level
    uint16 uiAprFreqStartLvlMin;    // APR Frequency Start Level - Minimum
    uint16 uiAprFreqStartLvlMax;    // APR Frequency Start Level - Maximum
    uint16 uiAprFreqStopLvl;        // APR Frequency Stop Level
    uint16 uiAprFreqStopLvlMin;     // APR Frequency Stop Level - Minimum
    uint16 uiAprFreqStopLvlMax;     // APR Frequency Stop Level - Maximum
    uint16 uiAprFreqRecoverLvl;     // APR Frequency Recover Level
    uint16 uiAprFreqRecoverLvlMin;  // APR Frequency Recover Level - Minimum
    uint16 uiAprFreqRecoverLvlMax;  // APR Frequency Recover Level - Maximum
    uint16 uiAprPfGradient;         // APR Active Power Gradient with Frequency
    uint16 uiAprPfGradientMin;      // APR Active Power Gradient with Frequency - Minimum
    uint16 uiAprPfGradientMax;      // APR Active Power Gradient with Frequency - Maximum
    uint16 uiAprPtGradient;         // APR Active Power Gradient with Time
    uint16 uiAprPtGradientMin;      // APR Active Power Gradient with Time - Minimum
    uint16 uiAprPtGradientMax;      // APR Active Power Gradient with Time - Maximum
} XB_tzPGN_GFS_CFG;

// Secondary Power Supply Configuration - Battery SOC
typedef struct XB_zPGN_SPS_CFG_BATT_SOC
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uchar8 ucOutputId;              // Output Identifier
    uchar8 ucSocLvlStop;            // State of Charge Level to Stop
    uchar8 ucSocLvlStopMin;         // State of Charge Level to Stop - Min
    uchar8 ucSocLvlStopMax;         // State of Charge Level to Stop - Max
    uint16 uiTimeIntStop;           // Time Interval to Stop
    uint16 uiTimeIntStopMin;        // Time Interval to Stop - Min
    uint16 uiTimeIntStopMax;        // Time Interval to Stop - Max
    uchar8 ucSocLvlStart;           // State of Charge Level to Start
    uchar8 ucSocLvlStartMin;        // State of Charge Level to Start - Min
    uchar8 ucSocLvlStartMax;        // State of Charge Level to Start - Max
    uint16 uiTimeIntStart;          // Time Interval to Start
    uint16 uiTimeIntStartMin;       // Time Interval to Start - Min
    uint16 uiTimeIntStartMax;       // Time Interval to Start - Max
} XB_tzPGN_SPS_CFG_BATT_SOC;

// Battery Management System Configuration
typedef struct XB_zPGN_BMS_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teBATT_TYPE teBattType;      // Battery Type
    uint16 uiMaxDischargeI;         // Maximum Discharge Current
    uint16 uiMaxDischargeIMin;      // Maximum Discharge Current - Minimum
    uint16 uiMaxDischargeIMax;      // Maximum Discharge Current - Maximum
    uint16 uiMaxDischargeTimeInt;   // Maximum Discharge Time Interval
    uint16 uiMaxDischargeTimeIntMin; // Maximum Discharge Time Interval - Minimum
    uint16 uiMaxDischargeTimeIntMax; // Maximum Discharge Time Interval - Maximum
} XB_tzPGN_BMS_CFG;

// Battery Monitor Configuration - Synchronization
typedef struct XB_zPGN_BATT_MON_CFG_SYNC
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiChgFloatV;             // Charger's Float Voltage
    uint16 uiChgFloatVMin;          // Charger's Float Voltage - Minimum
    uint16 uiChgFloatVMax;          // Charger's Float Voltage - Maximum
    uchar8 ucChgFloatI;             // Charger's Float Current
    uchar8 ucChgFloatIMin;          // Charger's Float Current - Minimum
    uchar8 ucChgFloatIMax;          // Charger's Float Current - Maximum
    uchar8 ucDischgFloor;           // Discharge Floor
    uchar8 ucDischgFloorMin;        // Discharge Floor - Minimum
    uchar8 ucDischgFloorMax;        // Discharge Floor - Maximum
    XB_teAUTO_SYNC_TIME teAutoSyncTime; // Auto-Sync Time
    uchar8 ucAutoSyncSens;          // Auto-Sync Sensitivity
    uchar8 ucAutoSyncSensMin;       // Auto-Sync Sensitivity - Minimum
    uchar8 ucAutoSyncSensMax;       // Auto-Sync Sensitivity - Maximum
} XB_tzPGN_BATT_MON_CFG_SYNC;

// RS485 Configuration
typedef struct XB_zPGN_RS485CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucAddress;               // RS485 Address
    XB_teBAUD_RATE teBaudRate;      // RS485 Baud Rate
    XB_tePARITY teParity;           // RS485 Parity
    XB_teSTOP_BITS teStopBits;      // RS485 Stop Bits
    XB_teBYTE_ORDER teByteOrder;    // Modbus Byte Order
} XB_tzPGN_RS485CFG;

// Grid Tie Control Command
typedef struct XB_zPGN_GRID_TIE_CTRL_CMD
{
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiMaxSellScalePrcnt;     // Maximum Sell Scale Percentage
} XB_tzPGN_GRID_TIE_CTRL_CMD;

// Constant Voltage Constant Current Control Command
typedef struct XB_zPGN_CV_CI_CTRL_CMD
{
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiMaxChgVScale;          // Maximum Charge Voltage Scale
    uint16 uiMaxChgIScale;          // Maximum Charge Current Scale
} XB_tzPGN_CV_CI_CTRL_CMD;

// Battery Monitor Control Command
typedef struct XB_zPGN_BATT_MON_CTRL_CMD
{
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teCMD_PAIR teSyncEnDis;      // Synchronize Enable/Disable
} XB_tzPGN_BATT_MON_CTRL_CMD;

// Grid Voltage Support Configuration
typedef struct XB_zPGN_GVS_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teCMD_PAIR teGvsEnDis;       // GVS Enable/Disable
    uint16 uiMaxQCap;               // Maximum Reactive Capacitive Power
    uint16 uiMaxQCapMin;            // Maximum Reactive Capacitive Power - Minimum
    uint16 uiMaxQCapMax;            // Maximum Reactive Capacitive Power - Maximum
    uint16 uiMaxQInd;               // Maximum Reactive Inductive Power
    uint16 uiMaxQIndMin;            // Maximum Reactive Inductive Power - Minimum
    uint16 uiMaxQIndMax;            // Maximum Reactive Inductive Power - Maximum
    uint16 uiMaxVGrid;              // Maximum Reactive Power Grid Voltage
    uint16 uiMaxVGridMin;           // Maximum Reactive Power Grid Voltage - Minimum
    uint16 uiMaxVGridMax;           // Maximum Reactive Power Grid Voltage - Maximum
    uint16 uiMinVGrid;              // Minimum Reactive Power Grid Voltage
    uint16 uiMinVGridMin;           // Minimum Reactive Power Grid Voltage - Minimum
    uint16 uiMinVGridMax;           // Minimum Reactive Power Grid Voltage - Maximum
    uint16 uiVSetHigh;              // Inductive Voltage Set Point
    uint16 uiVSetHighMin;           // Inductive Voltage Set Point - Minimum
    uint16 uiVSetHighMax;           // Inductive Voltage Set Point - Maximum
    uint16 uiVSetLow;               // Capacitive Voltage Set Point
    uint16 uiVSetLowMin;            // Capacitive Voltage Set Point - Minimum
    uint16 uiVSetLowMax;            // Capacitive Voltage Set Point - Maximum
    uint16 uiVThreshold;            // Voltage Threshold to start/stop excitation
    uint16 uiVThresholdMin;         // Voltage Threshold to start/stop excitation - Minimum
    uint16 uiVThresholdMax;         // Voltage Threshold to start/stop excitation - Maximum
    uint16 uiDelayTime;             // Excitation Control Delay Time
    uint16 uiDelayTimeMin;          // Excitation Control Delay Time - Minimum
    uint16 uiDelayTimeMax;          // Excitation Control Delay Time - Maximum
} XB_tzPGN_GVS_CFG;

// Grid Tie Configuration - Battery SOC
typedef struct XB_zPGN_GRID_TIE_CFG_BATT_SOC
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teCMD_PAIR teGridTieSocEnDis; // Grid Tie State of Charge Enable/Disable
    uchar8 ucSocLvlStart;           // State of Charge Level to Start
    uchar8 ucSocLvlStartMin;        // State of Charge Level to Start - Min
    uchar8 ucSocLvlStartMax;        // State of Charge Level to Start - Max
    uchar8 ucSocLvlStop;            // State of Charge Level to Stop
    uchar8 ucSocLvlStopMin;         // State of Charge Level to Stop - Min
    uchar8 ucSocLvlStopMax;         // State of Charge Level to Stop - Max
    uint16 uiTimeIntStart;          // Time Interval to Start
    uint16 uiTimeIntStartMin;       // Time Interval to Start - Min
    uint16 uiTimeIntStartMax;       // Time Interval to Start - Max
    uint16 uiTimeIntStop;           // Time Interval to Stop
    uint16 uiTimeIntStopMin;        // Time Interval to Stop - Min
    uint16 uiTimeIntStopMax;        // Time Interval to Stop - Max
} XB_tzPGN_GRID_TIE_CFG_BATT_SOC;

// Curve (XY Data Series) Configuration
typedef struct XB_zPGN_EXTRA_CURVE_CFG
{
    sint32 slX;                     // X value (data point tuple)
    sint32 slY;                     // Y value (data point tuple)
} XB_tzPGN_EXTRA_CURVE_CFG;

typedef struct XB_zPGN_CURVE_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teCURVE_ID teCurveId;        // Curve (Data Series) Identifier
    XB_teCMD_PAIR teCurveEnDis;     // Curve Function Enable Disable
    sint32 slXMin;                  // X values - Minimum
    sint32 slXMax;                  // X values - Maximum
    sint32 slYMin;                  // Y values - Minimum
    sint32 slYMax;                  // Y values - Maximum
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_CURVE_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_CURVE_CFG;

// Grid Interaction Configuration
typedef struct XB_zPGN_GRID_INTERACTION_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teCMD_PAIR teSellEnDis;      // Sell Enable/Disable
    XB_teCMD_PAIR tePowerFactorEnDis; // Power Factor Target Enable/Disable
    uint32 ulSellAmp;               // Sell Current
    uint32 ulSellAmpMin;            // Sell Current Minimum
    uint32 ulSellAmpMax;            // Sell Current Maximum
    uchar8 ucSellPct;               // Sell Percentage
    uchar8 ucSellPctMin;            // Sell Percent Minimum
    uchar8 ucSellPctMax;            // Sell Percent Maximum
    schar8 scPowerFactor;           // Power Factor Target
    schar8 scPowerFactorMin;        // Power Factor Target Minimum
    schar8 scPowerFactorMax;        // Power Factor Target Maximum
    uint16 uiHvrtReConPct;          // HVRT Reconnect Voltage (% Nominal)
    uint16 uiHvrtReConPctMin;       // Minimum HVRT Reconnect Voltage (% Nominal)
    uint16 uiHvrtReConPctMax;       // Maximum HVRT Reconnect Voltage (% Nominal)
    uint16 uiLvrtReConPct;          // LVRT Reconnect Voltage (% Nominal)
    uint16 uiLvrtReConPctMin;       // Minimum LVRT Reconnect Voltage (% Nominal)
    uint16 uiLvrtReConPctMax;       // Maximum LVRT Reconnect Voltage (% Nominal)
    uint16 uiHfrtReConLvl;          // HFRT Reconnect Level
    uint16 uiHfrtReConLvlMin;       // Minimum HFRT Reconnect Level
    uint16 uiHfrtReConLvlMax;       // Maximum HFRT Reconnect Level
    uint16 uiLfrtReConLvl;          // LFRT Reconnect Level
    uint16 uiLfrtReConLvlMin;       // Minimum LFRT Reconnect Level
    uint16 uiLfrtReConLvlMax;       // Maximum LFRT Reconnect Level
    uint16 uiReConTime;             // Reconnect Time
    uint16 uiReConTimeMin;          // Minimum Reconnect Time
    uint16 uiReConTimeMax;          // Maximum Reconnect Time
    uint16 uiPwrRampTime;           // Power Ramp-up Time
    uint16 uiPwrRampTimeMin;        // Minimum Power Ramp-up Time
    uint16 uiPwrRampTimeMax;        // Maximum Power Ramp-up Time
    uchar8 ucPwrRampPct;            // Power Ramp-up Percentage
    uchar8 ucPwrRampPctMin;         // Power Ramp-up Percentage Minimum
    uchar8 ucPwrRampPctMax;         // Power Ramp-up Percentage Maximum
} XB_tzPGN_GRID_INTERACTION_CFG;

// Product Configuration
typedef struct XB_zPGN_PRODUCT_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teREGION_CODE teRegionCode;  // Product Configuration Region Code
    uchar8 ucRegionVersion;         // Product Configuration Region Version
    XB_teCFG_TYPE teRegionType;     // Product Configuration Region Status
} XB_tzPGN_PRODUCT_CFG;

// Grid Tie Configuration
typedef struct XB_zPGN_GRID_TIE_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teGENERIC_STS_PAIR teAntiIslandingEnDis; // AntiIslanding Enable/Disable
    XB_teGENERIC_STS_PAIR tePeakLoadShavingEnDis; // Peak Load Shaving Enable/Disable
    XB_teCMD_PAIR teGridTieEnDis;   // Grid Tie Enable/Disable
    XB_teSELL_MODE teSellMode;      // Grid-Tie Sell Mode
    uint16 uiSellDuration;          // Grid Tie Sell Duration
    uchar8 ucMaxSellScalePrcnt;     // Maximum Sell Scale Percentage
    uint32 ulMaxSellI;              // Max Sell Current
    uint32 ulMaxSellIMin;           // Max Sell Current Minimum
    uint32 ulMaxSellIMax;           // Max Sell Current Maximum
    uint32 ulPeakLoadShavingI;      // Peak Load Shaving Current
    uint32 ulPeakLoadShavingIMin;   // Peak Load Shaving Current Minimum
    uint32 ulPeakLoadShavingIMax;   // Peak Load Shaving Current Maximum
    uint16 uiAIReconnect;           // Anti Islanding Reconnect
    uint16 uiAIDisconSlowDelay;     // Anti Islanding Disconnect Slow Delay
    uint16 uiAIDisconOf;            // Anti Islanding Disconnect Over Frequency
    uint16 uiAIDisconUf;            // Anti Islanding Disconnect Under Frequency
    uint32 ulAIDisconOvLNFast;      // Anti Islanding Disconnect Over Voltage LN Fast
    uint32 ulAIDisconOvLNSlow;      // Anti Islanding Disconnect Over Voltage LN Slow
    uint32 ulAIDisconOvL1L2Fast;    // Anti Islanding Disconnect Over Voltage L1L2 Fast
    uint32 ulAIDisconOvL1L2Slow;    // Anti Islanding Disconnect Over Voltage L1L2 Slow
    uint32 ulAIDisconUvLNFast;      // Anti Islanding Disconnect Under Voltage LN Fast
    uint32 ulAIDisconUvLNSlow;      // Anti Islanding Disconnect Under Voltage LN Slow
    uint32 ulAIDisconUvL1L2Slow;    // Anti Islanding Disconnect Under Voltage L1L2 Slow
    uint32 ulAIDisconUvL1L2Fast;    // Anti Islanding Disconnect Under Voltage L1L2 Fast
} XB_tzPGN_GRID_TIE_CFG;

// Enable/Disable Configuration - Time-of-Day
typedef struct XB_zPGN_EXTRA_EN_DIS_CFG_TOD
{
    XB_teFEATURE_OVERRIDE teFeatureOverride; // Feature Override
    XB_teEVT_DOW_MASK teEvtDowMask; // Event Day-of-Week Mask
    uint16 uiTodBeg;                // Period Begin
    uint16 uiTodEnd;                // Period End
} XB_tzPGN_EXTRA_EN_DIS_CFG_TOD;

typedef struct XB_zPGN_EN_DIS_CFG_TOD
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_EN_DIS_CFG_TOD *ptzExtra;   // Extra structures
} XB_tzPGN_EN_DIS_CFG_TOD;

// Go Configure Yourself Command
typedef struct XB_zPGN_GO_CFG_YOURSELF_CMD
{
    uchar8 ucSrcAddr;               // Source Address
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
} XB_tzPGN_GO_CFG_YOURSELF_CMD;

// DC Source Configuration - Photovoltaic Array (Deux)
typedef struct XB_zPGN_DC_SRC_CFG_PV_ARRAY2
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teCMD_PAIR teMpptEnDis;      // MPPT Enable/Disable
    uchar8 ucPwrXfer;               // Power Transfer
    uchar8 ucPwrXferMin;            // Power Transfer - Minimum
    uchar8 ucPwrXferMax;            // Power Transfer - Maximum
    sint32 slVMaxPwr;               // Voltage Where Maximum Power
    sint32 slVMaxPwrMin;            // Voltage Where Maximum Power - Min
    sint32 slVMaxPwrMax;            // Voltage Where Maximum Power - Max
} XB_tzPGN_DC_SRC_CFG_PV_ARRAY2;

// AC Transfer Switch Configuration
typedef struct XB_zPGN_EXTRA_AC_XFER_SW_CFG
{
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiXferSwDelay;           // Transfer Switch Delay
} XB_tzPGN_EXTRA_AC_XFER_SW_CFG;

typedef struct XB_zPGN_AC_XFER_SW_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_teXFR_SWITCH_MODE teXferSwMode; // Transfer Switch Mode
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_XFER_SW_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_AC_XFER_SW_CFG;

// Secondary Power Supply Control Command
typedef struct XB_zPGN_SPS_CTRL_CMD
{
    uchar8 ucOutputId;              // Output Identifier
    XB_teSECONDARY_PWR_SUPPLY_DESIRED_STATE teDesiredState; // Desired State
} XB_tzPGN_SPS_CTRL_CMD;

// Secondary Power Supply Configuration
typedef struct XB_zPGN_SPS_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    XB_teSECONDARY_PWR_SUPPLY_ACTIVE_LVL teActiveLevel; // Active Level
    sint32 slVoltage;               // Voltage
    sint32 slVoltageMin;            // Voltage - Min
    sint32 slVoltageMax;            // Voltage - Max
    sint32 slCurrent;               // Current
    sint32 slCurrentMin;            // Current - Min
    sint32 slCurrentMax;            // Current - Max
} XB_tzPGN_SPS_CFG;

// Secondary Power Supply Configuration - Triggers
typedef struct XB_zPGN_EXTRA_SPS_CFG_TRIG
{
    XB_teGENERIC_STS_PAIR teTrigEnDis; // Trigger Enabled/Disabled
    XB_teEVT_ID teEvtId;            // Event Identifier
} XB_tzPGN_EXTRA_SPS_CFG_TRIG;

typedef struct XB_zPGN_SPS_CFG_TRIG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uchar8 ucOutputId;              // Output Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_SPS_CFG_TRIG *ptzExtra;   // Extra structures
} XB_tzPGN_SPS_CFG_TRIG;

// Charger Control Command(Deux)
typedef struct XB_zPGN_CHG_CTRL_CMD2
{
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    XB_teCMD_PAIR teChgEnDis;       // Charger Enable/Disable
    XB_teFORCE_CHG_STATE teForceChgState; // Force Charger State
} XB_tzPGN_CHG_CTRL_CMD2;

// PID Control Loop Configuration
typedef struct XB_zPGN_PID_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    XB_tePID_CTRL_LOOP_ID teLoopId; // PID Control Loop Identifier
    XB_teCMD_PAIR teLoopEnDis;      // PID Control Loop Enable/Disable
    uint32 ulLoopFreq;              // Loop Frequency
    sint32 slKp;                    // Proportional Gain
    sint32 slKi;                    // Integral Gain
    sint32 slKd;                    // Derivative Gain
    sint32 slOutputMin;             // Minimum output clamp value
    sint32 slOutputMax;             // Maximum output clamp value
    sint16 siExtraField1;           // Extra Field 1
    sint16 siExtraField2;           // Extra Field 2
} XB_tzPGN_PID_CFG;

// String Configuration
typedef struct XB_zPGN_EXTRA_STRING_CFG
{
    uchar8 ucByte;                  // Byte
} XB_tzPGN_EXTRA_STRING_CFG;

typedef struct XB_zPGN_STRING_CFG
{
    XB_teCFG_TYPE teCfgType;        // Configuration Type
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucConcurAccCtr;          // Concurrent Access Counter
    uint16 uiStringId;              // String Identifier
    XB_teCHARACTER_TYPE teCharType; // Character Type
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_STRING_CFG *ptzExtra;   // Extra structures
} XB_tzPGN_STRING_CFG;

// Complex Request
typedef struct XB_zPGN_EXTRA_COMPLEX_REQ
{
    uchar8 ucField;                 // Field
    uint32 ulFieldValue;            // FieldValue
} XB_tzPGN_EXTRA_COMPLEX_REQ;

typedef struct XB_zPGN_COMPLEX_REQ
{
    uint32 ulParamGrpNum;           // Parameter Group Number
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_COMPLEX_REQ *ptzExtra;   // Extra structures
} XB_tzPGN_COMPLEX_REQ;

// Remote Procedure Call Command
typedef struct XB_zPGN_EXTRA_RMT_PROC_CALL_CMD
{
    uint32 ulProcedureId;           // Procedure Identifier
    uint32 ulProcedureArg;          // Procedure Argument
} XB_tzPGN_EXTRA_RMT_PROC_CALL_CMD;

typedef struct XB_zPGN_RMT_PROC_CALL_CMD
{
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_RMT_PROC_CALL_CMD *ptzExtra;   // Extra structures
} XB_tzPGN_RMT_PROC_CALL_CMD;

// PGN List - Transmitted PGN's Group Function
typedef struct XB_zPGN_EXTRA_PGN_LIST_TX
{
    uint32 ulTXPgns;                // Transmittable PGNs
} XB_tzPGN_EXTRA_PGN_LIST_TX;

typedef struct XB_zPGN_PGN_LIST_TX
{
    XB_teGRP_FUNC_TX_AND_RX_PGN_LIST teTXedPgnGroupFunctionCode; // Transmitted PGN Group Function Code
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_PGN_LIST_TX *ptzExtra;   // Extra structures
} XB_tzPGN_PGN_LIST_TX;

// PGN List - Received PGN's Group Function
typedef struct XB_zPGN_EXTRA_PGN_LIST_RX
{
    uint32 ulRXPgns;                // Receivable PGNs
} XB_tzPGN_EXTRA_PGN_LIST_RX;

typedef struct XB_zPGN_PGN_LIST_RX
{
    XB_teGRP_FUNC_TX_AND_RX_PGN_LIST teRXedPgnGroupFunctionCode; // Received PGN Group Function Code
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_PGN_LIST_RX *ptzExtra;   // Extra structures
} XB_tzPGN_PGN_LIST_RX;

// DC Source Status
typedef struct XB_zPGN_DC_SRC_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    sint32 slVoltage;               // Voltage
    sint32 slCurrent;               // Current
    XB_teEXT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTemp;                  // Temperature
    uchar8 ucSoc;                   // State of Charge
    uint16 uiTimeRemain;            // Time Remaining
    uchar8 ucSoh;                   // State of Health
    uint16 uiBattCapRemain;         // Battery Capacity Remaining
    uchar8 ucBattCapPer;            // Battery Capacity Percent of Maximum
    uint32 ulPwr;                   // Power
} XB_tzPGN_DC_SRC_STS;

// Communication Statistics
typedef struct XB_zPGN_COMM_STATS
{
    uchar8 ucMsgCount;              // Message Count
    uint32 ulTxExtFrameCnt;         // Transmitted Extended Frames Count
    uint32 ulRxExtFrameCnt;         // Received Extended Frames Count
    uint16 uiRxErrCnt;              // Receive Error Count
    uint16 uiTxErrCnt;              // Transmit Error Count
    uint16 uiBusOffCnt;             // Bus-Off Error Count
    uint16 uiRxFrameDropCnt;        // Receive Frames Dropped Count
    uint16 uiTxFrameDropCnt;        // Transmit Frames Dropped Count
    uint16 uiMemAllocFailCnt;       // Memory Allocation Failure Count
    uchar8 ucMpToCnt;               // Multi-Packet Timeout Count
    uchar8 ucMpLateFrameCnt;        // Multi-Packet Late Frame Count
    uint16 uiHeapFreeMin;           // Minimum Heap Free
} XB_tzPGN_COMM_STATS;

// AC Input Status - RMS
typedef struct XB_zPGN_EXTRA_AC_IN_STS_RMS
{
    XB_teAC_LINE teLine;            // Line
    XB_teSRC_QUAL teQuality;        // Quality
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulApparentPwr;           // Apparent Power
    uint32 ulRealPwr;               // Real Power
} XB_tzPGN_EXTRA_AC_IN_STS_RMS;

typedef struct XB_zPGN_AC_IN_STS_RMS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_STS_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_STS_RMS;

// AC Input Status - Peak
typedef struct XB_zPGN_EXTRA_AC_IN_STS_PEAK
{
    XB_teAC_LINE teLine;            // Line
    XB_teSRC_QUAL teQuality;        // Quality
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulApparentPwr;           // Apparent Power
    uint32 ulRealPwr;               // Real Power
} XB_tzPGN_EXTRA_AC_IN_STS_PEAK;

typedef struct XB_zPGN_AC_IN_STS_PEAK
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_STS_PEAK *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_STS_PEAK;

// AC Input Status - Average
typedef struct XB_zPGN_EXTRA_AC_IN_STS_AVG
{
    XB_teAC_LINE teLine;            // Line
    XB_teSRC_QUAL teQuality;        // Quality
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulApparentPwr;           // Apparent Power
    uint32 ulRealPwr;               // Real Power
} XB_tzPGN_EXTRA_AC_IN_STS_AVG;

typedef struct XB_zPGN_AC_IN_STS_AVG
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_IN_STS_AVG *ptzExtra;   // Extra structures
} XB_tzPGN_AC_IN_STS_AVG;

// AC Output Status - RMS
typedef struct XB_zPGN_EXTRA_AC_OUT_STS_RMS
{
    XB_teAC_LINE teLine;            // Line
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uchar8 ucCurrentPer;            // Current Percent of Maximum
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulApparentPwr;           // Apparent Power
    sint32 slRealPwr;               // Real Power
    uchar8 ucRealPwrPer;            // Real Power Percent of Maximum
} XB_tzPGN_EXTRA_AC_OUT_STS_RMS;

typedef struct XB_zPGN_AC_OUT_STS_RMS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teGENERIC_STS_PAIR teTotalFlag; // Total Flag
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teAC_WAVEFORMS teWaveform;   // Waveform
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_OUT_STS_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_OUT_STS_RMS;

// AC Output Status - Peak
typedef struct XB_zPGN_EXTRA_AC_OUT_STS_PEAK
{
    XB_teAC_LINE teLine;            // Line
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uchar8 ucCurrentPer;            // Current Percent of Maximu
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulApparentPwr;           // Apparent Power
    uint32 ulRealPwr;               // Real Power
    uchar8 ucRealPwrPer;            // Real Power Percent of Maximum
} XB_tzPGN_EXTRA_AC_OUT_STS_PEAK;

typedef struct XB_zPGN_AC_OUT_STS_PEAK
{
    uchar8 ucMsgCount;              // Message Count
    XB_teGENERIC_STS_PAIR teTotalFlag; // Total Flag
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teAC_WAVEFORMS teWaveform;   // Waveform
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_OUT_STS_PEAK *ptzExtra;   // Extra structures
} XB_tzPGN_AC_OUT_STS_PEAK;

// AC Output Status - Average
typedef struct XB_zPGN_EXTRA_AC_OUT_STS_AVG
{
    XB_teAC_LINE teLine;            // Line
    uint32 ulVoltage;               // Voltage
    uint32 ulCurrent;               // Current
    uchar8 ucCurrentPer;            // Current Percent of Maximu
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulApparentPwr;           // Apparent Power
    uint32 ulRealPwr;               // Real Power
    uchar8 ucRealPwrPer;            // Real Power Percent of Maximum
} XB_tzPGN_EXTRA_AC_OUT_STS_AVG;

typedef struct XB_zPGN_AC_OUT_STS_AVG
{
    uchar8 ucMsgCount;              // Message Count
    XB_teGENERIC_STS_PAIR teTotalFlag; // Total Flag
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teAC_WAVEFORMS teWaveform;   // Waveform
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_OUT_STS_AVG *ptzExtra;   // Extra structures
} XB_tzPGN_AC_OUT_STS_AVG;

// Auxiliary Power Supply Status
typedef struct XB_zPGN_APS_STS
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucOutputId;              // Output Identifier
    sint32 slVoltage;               // Voltage
    sint32 slCurrent;               // Current
} XB_tzPGN_APS_STS;

// Offline Power Supply Status
typedef struct XB_zPGN_OPS_STS
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucOutputId;              // Output Identifier
    sint32 slVoltage;               // Voltage
    sint32 slCurrent;               // Current
} XB_tzPGN_OPS_STS;

// High Voltage DC Bus Status
typedef struct XB_zPGN_HV_DC_BUS_STS
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucOutputId;              // Output Instance
    sint32 slVoltage;               // Voltage
    sint32 slCurrent;               // Current
} XB_tzPGN_HV_DC_BUS_STS;

// External Temperature Status
typedef struct XB_zPGN_EXT_TEMP_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teEXT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTemp;                  // Temperature
} XB_tzPGN_EXT_TEMP_STS;

// Internal Temperature Status
typedef struct XB_zPGN_INT_TEMP_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teINT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTemp;                  // Temperature
} XB_tzPGN_INT_TEMP_STS;

// Charger Status
typedef struct XB_zPGN_CHG_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    sint32 slCtrlV;                 // Control Votlage
    sint32 slCtrlI;                 // Control Current
    uchar8 ucCtrlIPer;              // Control Current Percent of Maximum
    XB_teCHG_ALG teChgAlgorithm;    // Charging Algorithm
    XB_teOP_STATE_CHG teOpState;    // Operating State
    XB_teCHG_MODE teChgMode;        // Charger Mode
    XB_teGENERIC_STS_PAIR teChgEnDis; // Charger Enable/Disable
    XB_teGENERIC_STS_PAIR teBattTempSensorPresent; // Battery Temperature Sensor Present
    XB_teGENERIC_STS_PAIR teEqlzPending; // Equalization Pending
    uchar8 ucEqlzTimeRemain;        // Equalization Time Remaining
} XB_tzPGN_CHG_STS;

// Status
typedef struct XB_zPGN_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teNETWORK_STATE teNetworkState; // Network State
    XB_teGENERIC_STS_PAIR tePerTxEnDis; // Periodic Transmit Enable/Disable
    XB_teGENERIC_STS_PAIR teNewFaultsFlag; // New Faults Flag
    XB_teGENERIC_STS_PAIR teNewWarnsFlag; // New Warnings Flag
    XB_teCTRL_MODE teDesiredMode;   // Desired Mode
    XB_teCTRL_MODE teCurrentMode;   // Current Mode
    XB_teCTRL_MODE teLastMode;      // Last Mode
    XB_teGENERIC_STS_PAIR teFaultFlag; // Fault Flag
    XB_teGENERIC_STS_PAIR teFaultsChangedFlag; // Faults Changed Flag
    XB_teGENERIC_STS_PAIR teWarnFlag; // Warning Flag
    XB_teGENERIC_STS_PAIR teWarnsChangedFlag; // Warnings Changed Flag
} XB_tzPGN_STS;

// Inverter Statistics - AC
typedef struct XB_zPGN_EXTRA_INV_STATS_AC
{
    XB_teAC_LINE teLine;            // Line
    uint32 ulCurrentMax;            // Highest AC Output Current
    uint32 ulVoltageMin;            // Lowest AC Output Voltage
    uint32 ulVoltageMax;            // Highest AC Output Voltage
} XB_tzPGN_EXTRA_INV_STATS_AC;

typedef struct XB_zPGN_INV_STATS_AC
{
    uchar8 ucMsgCount;              // Message Count
    XB_teGENERIC_STS_PAIR teTotalFlag; // Total Flag
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiNumInvAcOutOL;         // Number of Inverter AC Output Over-loads
    uint16 uiNumTimesLoadSenseEngaged; // Number of Times Load Sense has been Engaged
    uint32 ulRealPwrMax;            // Highest Output Power
    uint32 ulTotalEnergyToday;      // Total Energy Delivered Today
    uint32 ulTotalEnergyLife;       // Total Energy Delivered Over the Lifetime
    uint16 uiTotalInvTimeToday;     // Total Invert Time Today
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INV_STATS_AC *ptzExtra;   // Extra structures
} XB_tzPGN_INV_STATS_AC;

// AGS Status
typedef struct XB_zPGN_AGS_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teOP_STATE_AGS teOpState;    // Operating State
    XB_teGEN_STATE teGenState;      // Generator State
    XB_teGEN_ON_REASON teGenOnReason; // Generator 'On' Reason
    XB_teGEN_OFF_REASON teGenOffReason; // Generator 'Off' Reason
    uint16 uiTimeInt;               // Time Interval to Start/Stop
    XB_teGENERIC_STS_PAIR teAgsGenSig; // AGS to Generator Signal
} XB_tzPGN_AGS_STS;

// System Identifier Status
typedef struct XB_zPGN_SYS_ID_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint32 ulSysId;                 // System Identifier
} XB_tzPGN_SYS_ID_STS;

// Fault Log Status
typedef struct XB_zPGN_EXTRA_FAULT_LOG_STS
{
    XB_teFLT_TYPE teFaultType;      // Fault Type
    XB_teFLT_ID teFaultId;          // Fault Identifier
    uint32 ulFaultTime;             // Fault Time
} XB_tzPGN_EXTRA_FAULT_LOG_STS;

typedef struct XB_zPGN_FAULT_LOG_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_FAULT_LOG_STS *ptzExtra;   // Extra structures
} XB_tzPGN_FAULT_LOG_STS;

// Product Information Status
typedef struct XB_zPGN_PROD_INFO_STS
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 aucModelName[ 16 ];      // Model Name
    uchar8 aucFga[ 12 ];            // Finished Goods Assembly
    uint32 ulPwrLvl;                // Power Level
    sint32 slNomDcLvl;              // Nominal DC Level
    uint32 ulNomAcLvl;              // Nominal AC Level
    uint16 uiNomAcOutFreq;          // Nominal AC Output Frequency
} XB_tzPGN_PROD_INFO_STS;

// Battery Monitor Statistics - Battery
typedef struct XB_zPGN_EXTRA_BATT_MON_STATS_BATT
{
    XB_tePREVIOUS_PERIOD tePreviousPeriod; // Previous Period
    uchar8 ucPreviousPeriodCount;   // Previous Period Count
    sint32 slCurrentMaxChg;         // Current Maximum while Charging
    sint32 slCurrentMaxDischg;      // Current Maximum while Discharging
    sint32 slVoltageMin;            // Voltage Minimum
    sint32 slVoltageMax;            // Voltage Maximum
    uint16 uiCapacityMin;           // Capacity Minimum
    uint16 uiCapacityMax;           // Capacity Maximum
    sint32 slCapacityReturned;      // Capacity Returned to Battery
    sint32 slCapacityRemoved;       // Capacity Removed from Battery
    uint16 uiTempMin;               // Lowest Temperature
    uint16 uiTempMax;               // Highest Temperature
    uint16 uiAvgDischg;             // Average Discharge
    uchar8 ucAvgDischgPer;          // Average Discharge Percent
    uint16 uiDeepestDischg;         // Deepest Discharge
    uchar8 ucDeepestDischgPer;      // Deepest Discharge Percent
    uint32 ulEnergyIn;              // Energy Into the Battery
    uint32 ulEnergyOut;             // Energy Removed from Battery
    uint32 ulTimeSinceSync;         // Time Since Synchronization
    uint16 uiNumChg;                // Number of Charge cycles
    uint16 uiNumSync;               // Number of Synchronizations
    uint16 uiNumDischg;             // Number of Discharges
    uint16 uiNumSoc25;              // Number of times SOC < 25%
    uint16 uiNumSoc50;              // Number of times SOC < 50%
    uint16 uiNumSoc75;              // Number of times SOC < 75%
    uint16 uiNumSoc90;              // Number of times SOC < 90%
    uchar8 ucDeepestSoc;            // Deepest State of Charge Percent
} XB_tzPGN_EXTRA_BATT_MON_STATS_BATT;

typedef struct XB_zPGN_BATT_MON_STATS_BATT
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_BATT_MON_STATS_BATT *ptzExtra;   // Extra structures
} XB_tzPGN_BATT_MON_STATS_BATT;

// AC Status - RMS
typedef struct XB_zPGN_EXTRA_AC_STS_RMS
{
    XB_teAC_LINE teLine;            // Line
    XB_teSRC_QUAL teQuality;        // Quality
    uint32 ulVoltage;               // Voltage
    sint32 slCurrent;               // Current
    uchar8 ucCurrentPer;            // Current Percent of Maximum
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    sint32 slApparentPwr;           // Apparent Power
    sint32 slRealPwr;               // Real Power
    uchar8 ucRealPwrPer;            // Real Power Percent of Maximum
    schar8 scPowerFactor;           // Power Factor
} XB_tzPGN_EXTRA_AC_STS_RMS;

typedef struct XB_zPGN_AC_STS_RMS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifer
    XB_teGENERIC_STS_PAIR teTotalFlag; // Total Flag
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_AC_STS_RMS *ptzExtra;   // Extra structures
} XB_tzPGN_AC_STS_RMS;

// AGS Status - Generator
typedef struct XB_zPGN_AGS_STS_GEN
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiOilPress;              // Oil Pressure
    uint16 uiTemp;                  // Temperature
    sint32 slBattV;                 // Battery Voltage
    uchar8 ucFuelLvl;               // Fuel Level
    uint16 uiFuelPress;             // Fuel Pressure
    uint16 uiEngineDiscreteWarnSts; // Engine Discrete Warning Status
} XB_tzPGN_AGS_STS_GEN;

// AGS Statistics - Generator
typedef struct XB_zPGN_AGS_STATS_GEN
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiSuccStartCnt;          // Successful Starts Counter
    uint16 uiFailStartCnt;          // Failed Starts Counter
    uint16 uiTotalRunTime;          // Total Run Time
    uint16 uiPrevRunTime;           // Previous Run Time
    uint16 uiCurrRunTime;           // Current Run Time
} XB_tzPGN_AGS_STATS_GEN;

// Inverter Status
typedef struct XB_zPGN_INV_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teOP_STATE_INV teOpState;    // Operating State
    XB_teGENERIC_STS_PAIR teInvEnDis; // Inverter Enable/Disable
    XB_teGENERIC_STS_PAIR teSellToGridEnDis; // Sell Enable/Disable
    XB_teGENERIC_STS_PAIR teBattTempSensorPresent; // Battery Temperature Sensor Present
} XB_tzPGN_INV_STS;

// Charger Statistics - AC
typedef struct XB_zPGN_EXTRA_CHG_STATS_AC
{
    XB_teAC_LINE teLine;            // Line
    uint16 uiFreqMin;               // Lowest AC Input Frequency
    uint16 uiFreqMax;               // Highest AC Input Frequency
    uint32 ulCurrentMax;            // Highest AC Input Current
    uint32 ulVoltageMin;            // Lowest AC Input Voltage
    uint32 ulVoltageMax;            // Highest AC Input Voltage
} XB_tzPGN_EXTRA_CHG_STATS_AC;

typedef struct XB_zPGN_CHG_STATS_AC
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_CHG_STATS_AC *ptzExtra;   // Extra structures
} XB_tzPGN_CHG_STATS_AC;

// Battery Monitor Status
typedef struct XB_zPGN_BATT_MON_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    sint32 slVoltage;               // Voltage
    sint32 slCurrent;               // Current
    uint16 uiTemp;                  // Temperature
    uint16 uiBattCapRemoved;        // Battery Capacity Removed
    uint16 uiBattCapRemain;         // Battery Capacity Remaining
    uchar8 ucSoc;                   // State of Charge
    uchar8 ucSoh;                   // State of Health
    uint16 uiTimeToDischarge;       // Time to Discharge
    uint16 uiTimeToFull;            // Time to Full
    uint16 uiHoursInFloat;          // Hours in Float
    uchar8 ucPerOvercharge;         // Percent Overcharge
    XB_teGENERIC_STS_PAIR teBtsPresent; // BTS Present
    uchar8 ucLastEqualize;          // Last Equalize
    sint32 slMid1Voltage;           // Midpoint 1 Voltage
    sint32 slMid2Voltage;           // Midpoint 2 Voltage
    sint32 slMid3Voltage;           // Midpoint 3 Voltage
} XB_tzPGN_BATT_MON_STS;

// User Interface Status
typedef struct XB_zPGN_UI_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teOP_STATE_UI teOpState;     // Operating State
} XB_tzPGN_UI_STS;

// Inverter Status - Load Share (High Speed)
typedef struct XB_zPGN_INV_STS_LOAD_SHARE_HS
{
    XB_teAC_SRC_ID teAcSrcId;       // AC Source ID
    XB_teAC_LINE teLine;            // Line
    sint16 siCurrent;               // Current
} XB_tzPGN_INV_STS_LOAD_SHARE_HS;

// Inverter Statistics - DC
typedef struct XB_zPGN_INV_STATS_DC
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiNumDcUvDetect;         // Number of DC Under Voltage Detections
    sint32 slVoltageMin;            // Lowest DC Voltage
    sint32 slVoltageMax;            // Highest DC Voltage
} XB_tzPGN_INV_STATS_DC;

// Inverter Statistics - Internal Temperature
typedef struct XB_zPGN_EXTRA_INV_STATS_INT_TEMP
{
    XB_teINT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTempMax;               // Highest Recorded Temperature
} XB_tzPGN_EXTRA_INV_STATS_INT_TEMP;

typedef struct XB_zPGN_INV_STATS_INT_TEMP
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INV_STATS_INT_TEMP *ptzExtra;   // Extra structures
} XB_tzPGN_INV_STATS_INT_TEMP;

// Inverter Statistics - External Temperature
typedef struct XB_zPGN_EXTRA_INV_STATS_EXT_TEMP
{
    XB_teEXT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTempMin;               // Lowest Recorded Temperature
    uint16 uiTempMax;               // Highest Recorded Temperature
} XB_tzPGN_EXTRA_INV_STATS_EXT_TEMP;

typedef struct XB_zPGN_INV_STATS_EXT_TEMP
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INV_STATS_EXT_TEMP *ptzExtra;   // Extra structures
} XB_tzPGN_INV_STATS_EXT_TEMP;

// Charger Statistics - DC
typedef struct XB_zPGN_CHG_STATS_DC
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
} XB_tzPGN_CHG_STATS_DC;

// Charger Statistics - Internal Temperature
typedef struct XB_zPGN_EXTRA_CHG_STATS_INT_TEMP
{
    XB_teINT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTempMax;               // Highest Recorded Temperature
} XB_tzPGN_EXTRA_CHG_STATS_INT_TEMP;

typedef struct XB_zPGN_CHG_STATS_INT_TEMP
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_CHG_STATS_INT_TEMP *ptzExtra;   // Extra structures
} XB_tzPGN_CHG_STATS_INT_TEMP;

// Charger Statistics - External Temperature
typedef struct XB_zPGN_EXTRA_CHG_STATS_EXT_TEMP
{
    XB_teEXT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTempMin;               // Lowest Recorded Temperature
    uint16 uiTempMax;               // Highest Recorded Temperature
} XB_tzPGN_EXTRA_CHG_STATS_EXT_TEMP;

typedef struct XB_zPGN_CHG_STATS_EXT_TEMP
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_CHG_STATS_EXT_TEMP *ptzExtra;   // Extra structures
} XB_tzPGN_CHG_STATS_EXT_TEMP;

// Gateway Status
typedef struct XB_zPGN_GW_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teOP_STATE_GATEWAY teOpState; // Operating State
} XB_tzPGN_GW_STS;

// Gateway Statistics
typedef struct XB_zPGN_GW_STATS
{
    uchar8 ucMsgCount;              // Message Count
} XB_tzPGN_GW_STATS;

// Calibration Data Status
typedef struct XB_zPGN_CALIB_DATA_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teCALIBRATION_DATA_ID teCalibDataId; // Calibration Data ID
    uint32 ulCalibData;             // Calibration Data
} XB_tzPGN_CALIB_DATA_STS;

// EMS Status
typedef struct XB_zPGN_EXTRA_EMS_STS
{
    XB_teAC_LINE teAcLine;          // AC Line
    sint16 siAvailableCapacity;     // Available Capacity
    XB_teCMD_PAIR teRequestAcDisqualify; // AC Disqualify Request
} XB_tzPGN_EXTRA_EMS_STS;

typedef struct XB_zPGN_EMS_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_TYPE teAcSrcType;   // AC Source Type
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_EMS_STS *ptzExtra;   // Extra structures
} XB_tzPGN_EMS_STS;

// EMS Circuit Status
typedef struct XB_zPGN_EXTRA_EMS_CKT_STS
{
    XB_teCIRCUIT_ID teCircuitId;    // Circuit Identifier
    XB_teCMD_PAIR teEnDisSts;       // Enable/Disable Status
    XB_teASSN_TYPE teAssocType;     // Association Type
    XB_teAC_LINE teAcLine;          // AC Line
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uchar8 ucPriority;              // Priority
    uint16 uiCurrentDraw;           // Current Draw
    uint16 uiLastLoadShed;          // Last Load Shed
} XB_tzPGN_EXTRA_EMS_CKT_STS;

typedef struct XB_zPGN_EMS_CKT_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_EMS_CKT_STS *ptzExtra;   // Extra structures
} XB_tzPGN_EMS_CKT_STS;

// Battery Management System Status
typedef struct XB_zPGN_BMS_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    sint32 slRefV;                  // Reference Voltage
    sint32 slRefChargeI;            // Reference Charge Current
    sint32 slRefDischargeI;         // Reference Discharge Current
    sint32 slReadbackV;             // Readback Voltage
    sint32 slReadbackI;             // Readback Current
    sint32 slReserve1;              // Reserve One
    sint32 slReserve2;              // Reserve Two
} XB_tzPGN_BMS_STS;

// Inverter Status (Deux)
typedef struct XB_zPGN_INV_STS2
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    XB_teOP_STATE_INV teOpState;    // Operating State
    XB_teGENERIC_STS_PAIR teInvEnDis; // Inverter Enable/Disable
    XB_teGENERIC_STS_PAIR teBattTempSensorPresent; // Battery Temperature Sensor Present
    XB_teINV_MODE teInvMode;        // Inverter Mode
    XB_teGENERIC_STS_PAIR teSellToGridEnDis; // Sell Enable/Disable
    XB_teGENERIC_STS_PAIR tePeakLoadShavingEnDis; // Peak Load Shaving Enable/Disable
    XB_teGENERIC_STS_PAIR teAntiIslandingEnDis; // Anti Islanading Enable/Disable
    XB_teGENERIC_STS_PAIR teGridEnDis; // Grid Enable/Disable
    XB_teCMD_PAIR teForceSell;      // Force Sell On/Off
} XB_tzPGN_INV_STS2;

// Charger Statistics - Battery (Deux)
typedef struct XB_zPGN_EXTRA_CHG_STATS_BATT2
{
    XB_tePREVIOUS_PERIOD tePreviousPeriod; // Previous Period
    uchar8 ucPreviousPeriodCount;   // Previos Period Count
    sint32 slCurrentMax;            // Current Max
    sint32 slVoltageMin;            // Voltage Min
    sint32 slVoltageMax;            // Voltage Max
    sint32 slCapacityReturned;      // Capacity Returned To Battery
    uint32 ulEnergy;                // Energy
    uint32 ulFloatTime;             // FloatTime
    uint16 uiPeakPower;             // Peak Power
} XB_tzPGN_EXTRA_CHG_STATS_BATT2;

typedef struct XB_zPGN_CHG_STATS_BATT2
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint32 ulLastEqualized;         // Last Equalized
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_CHG_STATS_BATT2 *ptzExtra;   // Extra structures
} XB_tzPGN_CHG_STATS_BATT2;

// AC Transfer Switch Status
typedef struct XB_zPGN_AC_XFER_SW_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teOP_STATE_AC_XFR_SWITCH teOpState; // Operating State
    XB_teAC_XFER_SW_MODE teXferSwMode; // Transfer Switch Mode
} XB_tzPGN_AC_XFER_SW_STS;

// Charger Statistics - AC (Deux)
typedef struct XB_zPGN_EXTRA_CHG_STATS_AC2
{
    XB_tePREVIOUS_PERIOD tePreviousPeriod; // Previous Period
    uchar8 ucPreviousPeriodCount;   // Previous Period Count
    XB_teAC_LINE teLine;            // Line
    uint16 uiFreqMin;               // Lowest AC Input Frequency
    uint16 uiFreqMax;               // Highest AC Input Frequency
    uint32 ulCurrentMax;            // Highest AC Input Current
    uint32 ulVoltageMin;            // Lowest AC Input Voltage
    uint32 ulVoltageMax;            // Highest AC Input Voltage
} XB_tzPGN_EXTRA_CHG_STATS_AC2;

typedef struct XB_zPGN_CHG_STATS_AC2
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_CHG_STATS_AC2 *ptzExtra;   // Extra structures
} XB_tzPGN_CHG_STATS_AC2;

// Charger Statistics - DC (Deux)
typedef struct XB_zPGN_EXTRA_CHG_STATS_DC2
{
    XB_tePREVIOUS_PERIOD tePreviousPeriod; // Previous Period
    uchar8 ucPreviousPeriodCount;   // Previous Period Count
    sint32 slCurrentMax;            // Current Max
    sint32 slVoltageMin;            // Voltage Min
    sint32 slVoltageMax;            // VoltageMax
    uint32 ulEnergy;                // Energy
    uint16 uiPeakPower;             // Peak Power
} XB_tzPGN_EXTRA_CHG_STATS_DC2;

typedef struct XB_zPGN_CHG_STATS_DC2
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_CHG_STATS_DC2 *ptzExtra;   // Extra structures
} XB_tzPGN_CHG_STATS_DC2;

// Inverter Statistics - AC (Deux)
typedef struct XB_zPGN_EXTRA_INV_STATS_AC2
{
    XB_tePREVIOUS_PERIOD tePreviousPeriod; // Previous Period
    uchar8 ucPreviousPeriodCount;   // Previous Period Count
    XB_teAC_LINE teLine;            // Line
    uint32 ulCurrentMax;            // Current Maximum
    uint32 ulVoltageMin;            // Voltage Minimum
    uint32 ulVoltageMax;            // Voltage Maximum
    uint32 ulRealPwrMax;            // Real Power Maximum
    uint32 ulEnergy;                // Energy
    uint32 ulInvTime;               // Inverter Time
} XB_tzPGN_EXTRA_INV_STATS_AC2;

typedef struct XB_zPGN_INV_STATS_AC2
{
    uchar8 ucMsgCount;              // Message Count
    XB_teAC_SRC_ID teAcSrcId;       // AC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INV_STATS_AC2 *ptzExtra;   // Extra structures
} XB_tzPGN_INV_STATS_AC2;

// Inverter Statistics - DC (Deux)
typedef struct XB_zPGN_EXTRA_INV_STATS_DC2
{
    XB_tePREVIOUS_PERIOD tePreviousPeriod; // Previous Period
    uchar8 ucPreviousPeriodCount;   // Previous Period Count
    uint16 uiNumDcUvDetect;         // Number of DC Under Voltage Detections
    sint32 slCurrentMax;            // Current Maximum
    sint32 slVoltageMin;            // Lowest DC Voltage
    sint32 slVoltageMax;            // Highest DC Voltage
    sint32 slCapacityConsumed;      // CapacityConsumed
} XB_tzPGN_EXTRA_INV_STATS_DC2;

typedef struct XB_zPGN_INV_STATS_DC2
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INV_STATS_DC2 *ptzExtra;   // Extra structures
} XB_tzPGN_INV_STATS_DC2;

// Battery Status (Deux)
typedef struct XB_zPGN_BATT_STS2
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    sint32 slVoltage;               // Voltage
    sint32 slCurrent;               // Current
    uint32 ulPwr;                   // Power
    uint32 ulRippleVoltage;         // Ripple Voltage
    XB_teEXT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiTemp;                  // Temperature
    uchar8 ucSoc;                   // State of Charge
    uchar8 ucSoh;                   // State of Health
    uint16 uiBattCapRemain;         // Battery Capacity Remaining
    uchar8 ucBattCapPer;            // Battery Capacity Percent of Maximum
    uint16 uiTimeRemain;            // Time Remaining
    uint32 ulEnergyRemain;          // Energy Remaining
    uint16 uiTimeToFull;            // Time to Full
    XB_teBATT_TYPE teBattType;      // Battery Type
    uchar8 ucNomBattVoltage;        // Nominal Battery Voltage
} XB_tzPGN_BATT_STS2;

// DC Source Status (Deux)
typedef struct XB_zPGN_DC_SRC_STS2
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    sint32 slVoltage;               // Voltage
    sint32 slCurrent;               // Current
    uint32 ulPwr;                   // Power
    uint32 ulRippleVoltage;         // RippleVoltage
    XB_teGENERIC_STS_PAIR teDeratingSts; // Derating Status
    XB_teDERATING_REASON teDeratingReason; // Derating Reason
} XB_tzPGN_DC_SRC_STS2;

// Secondary Power Supply Status
typedef struct XB_zPGN_SPS_STS
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 ucOutputId;              // Output Identifier
    sint32 slVoltage;               // Voltage
    sint32 slCurrent;               // Current
    XB_teOP_STATE_SECONDARY_PWR_SUPPLY teOpState; // Operating State
    XB_teSECONDARY_PWR_SUPPLY_ON_REASON teOnReason; // On Reason
    XB_teSECONDARY_PWR_SUPPLY_OFF_REASON teOffReason; // Off Reason
} XB_tzPGN_SPS_STS;

// External Temperature Statistics (Deux)
typedef struct XB_zPGN_EXTRA_EXT_TEMP_STATS2
{
    XB_tePREVIOUS_PERIOD tePreviousPeriod; // Previous Period
    uchar8 ucPreviousPeriodCount;   // Previous Period Count
    uint16 uiTempMin;               // Temperature Minimum
    uint16 uiTempMax;               // Temperature Maximum
} XB_tzPGN_EXTRA_EXT_TEMP_STATS2;

typedef struct XB_zPGN_EXT_TEMP_STATS2
{
    uchar8 ucMsgCount;              // Message Count
    XB_teEXT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_EXT_TEMP_STATS2 *ptzExtra;   // Extra structures
} XB_tzPGN_EXT_TEMP_STATS2;

// Internal Temperature Statistics (Deux)
typedef struct XB_zPGN_EXTRA_INT_TEMP_STATS2
{
    XB_tePREVIOUS_PERIOD tePreviousPeriod; // Previous Period
    uchar8 ucPreviousPeriodCount;   // Previous Period Count
    uint16 uiTempMin;               // Temperature Minimum
    uint16 uiTempMax;               // Temperature Maximum
} XB_tzPGN_EXTRA_INT_TEMP_STATS2;

typedef struct XB_zPGN_INT_TEMP_STATS2
{
    uchar8 ucMsgCount;              // Message Count
    XB_teINT_TEMP_SENSOR_IDS teTempSensId; // Temperature Sensor Identifier
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_INT_TEMP_STATS2 *ptzExtra;   // Extra structures
} XB_tzPGN_INT_TEMP_STATS2;

// Maximum Power Point Tracker Status
typedef struct XB_zPGN_MPPT_STS
{
    uchar8 ucMsgCount;              // Message Count
    XB_teMPPT_MODE teMpptMode;      // MPPT Mode
} XB_tzPGN_MPPT_STS;

// PID Control Loop Status
typedef struct XB_zPGN_EXTRA_PID_STS
{
    XB_tePID_CTRL_LOOP_ID teLoopId; // PID Control Loop Identifier
    sint32 slReference;             // Loop Reference Value
    sint32 slReadback;              // Loop Readback Value
    sint32 slErrTerm;               // Error Term
    sint32 slIntErrterm;            // Integral Error Term
    sint32 slDerErrTerm;            // Derivative Error Term
    sint32 slPropTerm;              // Proportional Term
    sint32 slIntTerm;               // Integral Term
    sint32 slDerTerm;               // Derivative Term
    sint32 slOutput;                // Loop Output
    sint16 siExtraField1;           // Extra Field 1
    sint16 siExtraField2;           // Extra Field 2
} XB_tzPGN_EXTRA_PID_STS;

typedef struct XB_zPGN_PID_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_PID_STS *ptzExtra;   // Extra structures
} XB_tzPGN_PID_STS;

// Fan Status
typedef struct XB_zPGN_EXTRA_FAN_STS
{
    XB_teFAN_ID teFanId;            // Fan Identifier
    uchar8 ucFanSpeed;              // Fan Speed
} XB_tzPGN_EXTRA_FAN_STS;

typedef struct XB_zPGN_FAN_STS
{
    uchar8 ucMsgCount;              // Messgae Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_FAN_STS *ptzExtra;   // Extra structures
} XB_tzPGN_FAN_STS;

// Fan Statistics
typedef struct XB_zPGN_EXTRA_FAN_STATS
{
    XB_teFAN_ID teFanId;            // Fan Identifier
    uint32 ulFanRunTimeMin;         // Fan Run Time in minute
} XB_tzPGN_EXTRA_FAN_STATS;

typedef struct XB_zPGN_FAN_STATS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_FAN_STATS *ptzExtra;   // Extra structures
} XB_tzPGN_FAN_STATS;

// Battery Monitor History
typedef struct XB_zPGN_BATT_MON_HIST
{
    uchar8 ucMsgCount;              // Message Count
    XB_teDC_SRC_ID teDcSrcId;       // DC Source Identifier
    uint16 uiAvgDischg;             // Average Discharge
    uint16 uiAvgDischgPer;          // Average Discharge Percent
    uint16 uiDeepestDischg;         // Deepest Discharge
    uint16 uiDeepestDischgPer;      // Deepest Discharge Percent
    uint32 ulCapacityRemoved;       // Capacity Removed from Battery
    uint32 ulCapacityReturned;      // Capacity Returned to Battery
    uint16 uiNumChg;                // Number of Charge cycles
    uint16 uiNumSync;               // Number of Synchronizations
    uint16 uiNumDischg;             // Number of Discharges
} XB_tzPGN_BATT_MON_HIST;

// Date and Time Status
typedef struct XB_zPGN_DATE_TIME_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint32 ulUtcTime;               // UTC Time
    sint16 siLocalOffsetMins;       // Local Offset, Minutes
    XB_teTIME_DOW teLocalDow;       // Local Day of the Week
} XB_tzPGN_DATE_TIME_STS;

// Active Fault Status
typedef struct XB_zPGN_EXTRA_ACTIVE_FAULT_STS
{
    XB_teFLT_TYPE teFaultType;      // Fault Type
    XB_teFLT_ID teFaultId;          // Fault Identifier
    uint32 ulFaultTime;             // Fault Time
} XB_tzPGN_EXTRA_ACTIVE_FAULT_STS;

typedef struct XB_zPGN_ACTIVE_FAULT_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_ACTIVE_FAULT_STS *ptzExtra;   // Extra structures
} XB_tzPGN_ACTIVE_FAULT_STS;

// Warning Log Status
typedef struct XB_zPGN_EXTRA_WARN_LOG_STS
{
    XB_teWRN_TYPE teWarnType;       // Warning Type
    XB_teWRN_ID teWarnId;           // Warning Identifier
    uint32 ulWarnTime;              // Warning Time
} XB_tzPGN_EXTRA_WARN_LOG_STS;

typedef struct XB_zPGN_WARN_LOG_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_WARN_LOG_STS *ptzExtra;   // Extra structures
} XB_tzPGN_WARN_LOG_STS;

// Active Warning Status
typedef struct XB_zPGN_EXTRA_ACTIVE_WARN_STS
{
    XB_teWRN_TYPE teWarnType;       // Warning Type
    XB_teWRN_ID teWarnId;           // Warning Identifier
    uint32 ulWarnTime;              // Warning Time
} XB_tzPGN_EXTRA_ACTIVE_WARN_STS;

typedef struct XB_zPGN_ACTIVE_WARN_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_ACTIVE_WARN_STS *ptzExtra;   // Extra structures
} XB_tzPGN_ACTIVE_WARN_STS;

// Software Version Status
typedef struct XB_zPGN_EXTRA_SW_VER_STS
{
    uchar8 ucProcessorInst;         // Controller or Processor Instance
    XB_teSW_MOD_ID teSwModId;       // Software Module Identifier
    uint32 ulSwVer;                 // Software Version
    uint16 uiSwBldNum;              // Software Build Number
} XB_tzPGN_EXTRA_SW_VER_STS;

typedef struct XB_zPGN_SW_VER_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_SW_VER_STS *ptzExtra;   // Extra structures
} XB_tzPGN_SW_VER_STS;

// State/Event Log Status
typedef struct XB_zPGN_EXTRA_STATE_EVT_LOG_STS
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teOP_STATE_ALL teStateId;    // State Identifier
    uint32 ulEvtTime;               // Event Time
} XB_tzPGN_EXTRA_STATE_EVT_LOG_STS;

typedef struct XB_zPGN_STATE_EVT_LOG_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_STATE_EVT_LOG_STS *ptzExtra;   // Extra structures
} XB_tzPGN_STATE_EVT_LOG_STS;

// Hardware Revision Status
typedef struct XB_zPGN_EXTRA_HW_REV_STS
{
    uchar8 ucHwModInst;             // Hardware Module Instance
    uint16 uiHwModRev;              // Hardware Module Revision
    uchar8 aucHwModSerNum[ 16 ];    // Hardware Module Serial Number
} XB_tzPGN_EXTRA_HW_REV_STS;

typedef struct XB_zPGN_HW_REV_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiModelNum;              // Model Number
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_HW_REV_STS *ptzExtra;   // Extra structures
} XB_tzPGN_HW_REV_STS;

// Active Warning Status (Deux)
typedef struct XB_zPGN_EXTRA_ACTIVE_WARN_STS2
{
    XB_teWRN_TYPE teWarnType;       // Warning Type
    XB_teWRN_ID teWarnId;           // Warning Identifier
    uint32 ulWarnTime;              // Warning Time
    uint16 uiStringId;              // String Identifier
} XB_tzPGN_EXTRA_ACTIVE_WARN_STS2;

typedef struct XB_zPGN_ACTIVE_WARN_STS2
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_ACTIVE_WARN_STS2 *ptzExtra;   // Extra structures
} XB_tzPGN_ACTIVE_WARN_STS2;

// Active Fault Status (Deux)
typedef struct XB_zPGN_EXTRA_ACTIVE_FAULT_STS2
{
    XB_teFLT_TYPE teFaultType;      // Fault Type
    XB_teFLT_ID teFaultId;          // Fault Identifier
    uint32 ulFaultTime;             // Fault Time
    uint16 uiStringId;              // String Identifier
} XB_tzPGN_EXTRA_ACTIVE_FAULT_STS2;

typedef struct XB_zPGN_ACTIVE_FAULT_STS2
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_ACTIVE_FAULT_STS2 *ptzExtra;   // Extra structures
} XB_tzPGN_ACTIVE_FAULT_STS2;

// Warning Log Status (Deux)
typedef struct XB_zPGN_EXTRA_WARN_LOG_STS2
{
    XB_teWRN_TYPE teWarnType;       // Warning Type
    XB_teWRN_ID teWarnId;           // Warning Identifier
    uint32 ulWarnTime;              // Warning Time
    uint16 uiStringId;              // String Identifier
} XB_tzPGN_EXTRA_WARN_LOG_STS2;

typedef struct XB_zPGN_WARN_LOG_STS2
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_WARN_LOG_STS2 *ptzExtra;   // Extra structures
} XB_tzPGN_WARN_LOG_STS2;

// Fault Log Status (Deux)
typedef struct XB_zPGN_EXTRA_FAULT_LOG_STS2
{
    XB_teFLT_TYPE teFaultType;      // Fault Type
    XB_teFLT_ID teFaultId;          // Fault Identifier
    uint32 ulFaultTime;             // Fault Time
    uint16 uiStringId;              // String Identifier
} XB_tzPGN_EXTRA_FAULT_LOG_STS2;

typedef struct XB_zPGN_FAULT_LOG_STS2
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_FAULT_LOG_STS2 *ptzExtra;   // Extra structures
} XB_tzPGN_FAULT_LOG_STS2;

// State/Event Log Status( Duex )
typedef struct XB_zPGN_EXTRA_STATE_EVT_LOG_STS2
{
    XB_teEVT_ID teEvtId;            // Event Identifier
    XB_teOP_STATE_ALL teStateId;    // State Identifier
    uint32 ulEvtTime;               // Event Time
    uint16 uiStringId;              // String Identifier
} XB_tzPGN_EXTRA_STATE_EVT_LOG_STS2;

typedef struct XB_zPGN_STATE_EVT_LOG_STS2
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    XB_tzPGN_EXTRA_STATE_EVT_LOG_STS2 *ptzExtra;   // Extra structures
} XB_tzPGN_STATE_EVT_LOG_STS2;

// RVC DC Source Status 4
typedef struct XB_zPGN_RVC_DC_SRC_STS4
{
    uchar8 ucDevInst;               // Device Instance
    uchar8 ucDevPrio;               // Device Priority
    XB_teCHG_STATE_RVC teDesChgState; // Desired Charge State
    uint16 uiDesDcV;                // Desired DC Voltage
    uint16 uiDesDcI;                // Desired DC Current
    XB_teBATT_TYPE_RVC teBattType;  // Battery Type
} XB_tzPGN_RVC_DC_SRC_STS4;


#endif

//*****************************************************************************
// End of file.
//! @}
//*****************************************************************************
