/*******************************************************************************

  (c) 2017 - 2023 Xantrex Canada ULC. All rights reserved.
  All trademarks are owned or licensed by Xantrex Canada ULC,
  its subsidiaries or affiliated companies.

****************************************************************************//**

  @file rvcpdefs.h

  @brief RV-Protocol Definitions

  RV-C Protocol definitions regarding manufacturer codes and device addressing.

*******************************************************************************/

#ifndef RVC_P_DEFS_H
#define RVC_P_DEFS_H


/*=============================================================================
                              Includes
=============================================================================*/

/*=============================================================================
                            Definitions
=============================================================================*/

#if defined( __TMS320C2000__ )
// Supress "remark #232-D: nonstandard type for a bit field" generated by TI
// C2000 Compilation Tools
#pragma diag_suppress 232
#endif // __TMS320C28XX__

//! RV-C Protocol CAN Data Length Code
#define RVC_CAN_FRAME_DLC                   ( 8U )

//! RVC manufactures' codes
#define RVC_MANUFACTURER_CODE_XANTREX       ( 119U )
#define SAE_MANUFACTURER_CODE_SCHNEIDER     ( 807U )

//! Power Components Dynamic Address Range
#define RVC_PWR_COMP_DYN_ADDR_START         ( 128U )
#define RVC_PWR_COMP_DYN_ADDR_END           ( 143U )

//! Controls and Displays Dynamic Address Range
#define RVC_CTRL_DISP_DYNAMIC_ADDR_START    ( 144U )
#define RVC_CTRL_DISP_DYNAMIC_ADDR_END      ( 159U )

//! Sensors Dynamic Address Range
#define RVC_SENSORS_DYNAMIC_ADDR_START      ( 160U )
#define RVC_SENSORS_DYNAMIC_ADDR_END        ( 175U )

//! Component Dynamic Address extra Range
#define RVC_COMP_DYN_ADDR_EXT_START         ( 0U )
#define RVC_COMP_DYN_ADDR_EXT_END           ( 63U )

//! Device Instances
#define RVC_UINT8_INV_CHG_INSTANCE_START    ( 1U )
#define RVC_UINT8_INV_CHG_INSTANCE_END      ( 13U )

//! Device Priority
#define RVC_UINT8_INV_CHG_PRIORITY          ( 100U )

/*=============================================================================
                               Structures
=============================================================================*/

// Parameter Auxiliary Status
//typedef struct RVC_zPGN_PM_PARAM_AUX_STS
//{
//    uchar8 ucOutputId;              // Output Identifier
//    RVC_teAUX_OP_STATE teOpState;   // Operating State uchar8
//    RVC_teAUX_ON_OFF_REASON teOnReason; // On Reason uchar8
//    RVC_teAUX_ON_OFF_REASON teOffReason; // Off Reason uchar8
//} RVC_tzPGN_PM_PARAM_AUX_STS;
typedef struct zPmParamAuxSts
{
    uint32 ucOutputId   : 8; // Output Identifieruchar8
    uint32 teOpState    : 8; // Operating State uchar8 (RVC_teAUX_OP_STATE)
    uint32 teOnReason   : 8; // On Reason uchar8 (RVC_teAUX_ON_OFF_REASON)
    uint32 teOffReason  : 8; // Off Reason uchar8 (RVC_teAUX_ON_OFF_REASON)
} tzPmParamAuxSts;

// PM Parameter AUX Status
typedef union uParamAuxSts
{
    uint32          ulAuxParamValue;
    tzPmParamAuxSts tzAuxParam;
} tuParamAuxSts;

// Parameter Auxiliary Configuration
//typedef struct RVC_zPGN_PM_PARAM_AUX_CFG
//{
//    uchar8 ucOutputId;              // Output Identifier
//    RVC_teAUX_DESIRED_STATE teDesiredState; // Desired State 4bit
//    RVC_teAUX_ACTIVE_LVL teActiveLevel; // Active Level 4bit
//    RVC_teAUX_TRIGGER_ID teSetTrigger; // Set Trigger Id uchar8
//    RVC_teAUX_TRIGGER_ID teClrTrigger; // Clear Trigger Id uchar8
//} RVC_tzPGN_PM_PARAM_AUX_CFG;
typedef struct zPmParamAuxCfg
{
    uint32 ucOutputId      : 8;     // Output Identifier
    uint32 teDesiredState  : 4;     // Desired State 4bit
    uint32 teActiveLevel   : 4;     // Active Level 4bit
    uint32 teSetTrigger    : 8;     // Set Trigger Id uchar8
    uint32 teClrTrigger    : 8;     // Clear Trigger Id uchar8
} tzPmParamAuxCfg;

// PM Parameter AUX Configuration
typedef union uParamAuxCfg
{
    uint32          ulAuxParamValue;
    tzPmParamAuxCfg tzAuxParam;
} tuParamAuxCfg;

//typedef struct RVC_zPGN_PM_PARAM_AUX_CFG_TRIG_LVL
//{
//    RVC_teAUX_TRIGGER_ID teTriggerId; // Trigger Id uchar8
//    sint16 siTriggerLvl;            // Trigger Level
//    uchar8 ucReserved;              // Reserved
//} RVC_tzPGN_PM_PARAM_AUX_CFG_TRIG_LVL;
typedef struct zPmParamAuxCfgTrigLvl
{
    uint32 teTriggerId      :  8;     // Trigger Id uchar8
    uint32 siTriggerLvl     : 16;     // Trigger Level
    uint32 ucReserved       :  8;     // Reserved
} tzPmParamAuxCfgTrigLvl;

// PM Parameter AUX Configuration Trigger Level
typedef union uParamAuxCfgTrigLvl
{
    uint32                 ulAuxParamValue;
    tzPmParamAuxCfgTrigLvl tzAuxParam;
} tuParamAuxCfgTrigLvl;

//typedef struct RVC_zPGN_PM_PARAM_AUX_CFG_TRIG_DLY
//{
//    RVC_teAUX_TRIGGER_ID teTriggerId; // Trigger Id uchar8
//    uint16 uiTriggerDly;            // Trigger Delay
//    uchar8 ucReserved;              // Reserved
//} RVC_tzPGN_PM_PARAM_AUX_CFG_TRIG_DLY;
typedef struct zPmParamAuxCfgTrigDly
{
    uint32 teTriggerId      :  8;     // Trigger Id uchar8
    uint32 uiTriggerDly     : 16;     // Trigger Delay
    uint32 ucReserved       :  8;     // Reserved
} tzPmParamAuxCfgTrigDly;

// PM Parameter AUX Configuration Trigger Level
typedef union uParamAuxCfgTrigDly
{
    uint32                 ulAuxParamValue;
    tzPmParamAuxCfgTrigDly tzAuxParam;
} tuParamAuxCfgTrigDly;


#endif // RVC_P_DEFS_H


//*****************************************************************************
// End of file.
//*****************************************************************************
