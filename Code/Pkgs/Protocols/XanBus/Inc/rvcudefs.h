
//   (c) 2003 - 2024 Xantrex Canada ULC. All rights reserved.
//   All trademarks are owned or licensed by Xantrex Canada ULC,
//   its subsidiaries or affiliated companies.


//   @addtogroup rvcudefs rvcudefs
//   @{

//     @brief 
//       Definitions and types intended to be used by an application
//       interfacing with RV-C.
//       The file defines Parameter Group Numbers, the structures used by the
//       application, and the enums used in many of the structure fields.


//   @note
//     - Autogenerated.

#ifndef RVCUDEFS_H
#define RVCUDEFS_H

#include "LIB_stddefs.h"

#include "pgnudefs.h"

#define RVC_VER 10312L
#define RVC_BUILD 704


    // The following defines the name for each PGN

#define RVC_PGN_AC_FLT_CTRL_CFG_CMD1      0x01FFB5L
#define RVC_PGN_AC_FLT_CTRL_CFG_CMD2      0x01FFB4L
#define RVC_PGN_AC_FLT_CTRL_CFG_STS1      0x01FFB7L
#define RVC_PGN_AC_FLT_CTRL_CFG_STS2      0x01FFB6L
#define RVC_PGN_AGS_CRIT_CMD_AMB_TEMP     0x01FFBFL
#define RVC_PGN_AGS_CRIT_CMD_DC_I         0x01FFBFL
#define RVC_PGN_AGS_CRIT_CMD_DC_SOC       0x01FFBFL
#define RVC_PGN_AGS_CRIT_CMD_DC_V         0x01FFBFL
#define RVC_PGN_AGS_CRIT_CMD_XFER_AC_V    0x01FFBFL
#define RVC_PGN_AGS_CRIT_STS_AMB_TEMP     0x01FFC0L
#define RVC_PGN_AGS_CRIT_STS_DC_I         0x01FFC0L
#define RVC_PGN_AGS_CRIT_STS_DC_SOC       0x01FFC0L
#define RVC_PGN_AGS_CRIT_STS_DC_V         0x01FFC0L
#define RVC_PGN_AGS_CRIT_STS_XFER_AC_V    0x01FFC0L
#define RVC_PGN_ALARM_CMD                 0x01FE9EL
#define RVC_PGN_ALARM_STS                 0x01FE9FL
#define RVC_PGN_BATT_CMD                  0x01FE8AL
#define RVC_PGN_BATT_STS1                 0x01FE95L
#define RVC_PGN_BATT_STS11                0x01FE8BL
#define RVC_PGN_BATT_STS2                 0x01FE94L
#define RVC_PGN_BATT_STS3                 0x01FE93L
#define RVC_PGN_BATT_STS4                 0x01FE92L
#define RVC_PGN_BATT_STS6                 0x01FE90L
#define RVC_PGN_BATT_SUMM                 0x01FDF1L
#define RVC_PGN_CHG_AC_FLT_CFG_CMD1       0x01FF87L
#define RVC_PGN_CHG_AC_FLT_CFG_CMD2       0x01FF86L
#define RVC_PGN_CHG_AC_FLT_CFG_STS1       0x01FF89L
#define RVC_PGN_CHG_AC_FLT_CFG_STS2       0x01FF88L
#define RVC_PGN_CHG_AC_STS1               0x01FFCAL
#define RVC_PGN_CHG_AC_STS2               0x01FFC9L
#define RVC_PGN_CHG_AC_STS3               0x01FFC8L
#define RVC_PGN_CHG_AC_STS4               0x01FF8AL
#define RVC_PGN_CHG_CFG_CMD1              0x01FFC4L
#define RVC_PGN_CHG_CFG_CMD2              0x01FF95L
#define RVC_PGN_CHG_CFG_CMD3              0x01FECBL
#define RVC_PGN_CHG_CFG_CMD4              0x01FEBEL
#define RVC_PGN_CHG_CFG_STS1              0x01FFC6L
#define RVC_PGN_CHG_CFG_STS2              0x01FF96L
#define RVC_PGN_CHG_CFG_STS3              0x01FECCL
#define RVC_PGN_CHG_CFG_STS4              0x01FEBFL
#define RVC_PGN_CHG_CMD                   0x01FFC5L
#define RVC_PGN_CHG_EQLZ_CFG_CMD          0x01FF97L
#define RVC_PGN_CHG_EQLZ_CFG_STS          0x01FF98L
#define RVC_PGN_CHG_EQLZ_STS              0x01FF99L
#define RVC_PGN_CHG_STATS_STS             0x01FFC3L
#define RVC_PGN_CHG_STS                   0x01FFC7L
#define RVC_PGN_CHG_STS2                  0x01FEA3L
#define RVC_PGN_CHG_STS3                  0x01FDCAL
#define RVC_PGN_COMM_STS1                 0x01FFFAL
#define RVC_PGN_COMM_STS2                 0x01FFF9L
#define RVC_PGN_COMM_STS3                 0x01FFF8L
#define RVC_PGN_DC_SRC_CFG_CMD3           0x01FDDEL
#define RVC_PGN_DC_SRC_CMD                0x01FEA4L
#define RVC_PGN_DC_SRC_CONN_STS           0x01FDD0L
#define RVC_PGN_DC_SRC_STS1               0x01FFFDL
#define RVC_PGN_DC_SRC_STS11              0x01FEA5L
#define RVC_PGN_DC_SRC_STS2               0x01FFFCL
#define RVC_PGN_DC_SRC_STS3               0x01FFFBL
#define RVC_PGN_DC_SRC_STS4               0x01FEC9L
#define RVC_PGN_DC_SRC_STS6               0x01FEC7L
#define RVC_PGN_DEVICE_STATE_SYNC         0x01FDD1L
#define RVC_PGN_DIAG_MSG1                 0x01FECAL
#define RVC_PGN_FILE_DNLD_BLK             0x013100L
#define RVC_PGN_FILE_DNLD_INF             0x013200L
#define RVC_PGN_FILE_DNLD_STS             0x013B00L
#define RVC_PGN_GEN_CMD                   0x01FFDAL
#define RVC_PGN_GEN_DEMAND_CMD            0x01FFC1L
#define RVC_PGN_GEN_DEMAND_STS            0x01FFC2L
#define RVC_PGN_GEN_RST                   0x017F00L
#define RVC_PGN_GEN_START_CFG_CMD         0x01FFD8L
#define RVC_PGN_GEN_START_CFG_STS         0x01FFD9L
#define RVC_PGN_GEN_STS1                  0x01FFDCL
#define RVC_PGN_GEN_STS2                  0x01FFDBL
#define RVC_PGN_INST_ASSIGN               0x017C00L
#define RVC_PGN_INST_STS                  0x017B00L
#define RVC_PGN_INV_AC_FLT_CFG_CMD1       0x01FF8CL
#define RVC_PGN_INV_AC_FLT_CFG_STS1       0x01FF8EL
#define RVC_PGN_INV_AC_STS1               0x01FFD7L
#define RVC_PGN_INV_AC_STS2               0x01FFD6L
#define RVC_PGN_INV_AC_STS3               0x01FFD5L
#define RVC_PGN_INV_AC_STS4               0x01FF8FL
#define RVC_PGN_INV_APS_STS               0x01FFCDL
#define RVC_PGN_INV_CFG_CMD1              0x01FFD0L
#define RVC_PGN_INV_CFG_CMD2              0x01FFCFL
#define RVC_PGN_INV_CFG_CMD3              0x01FECDL
#define RVC_PGN_INV_CFG_CMD4              0x01FE9AL
#define RVC_PGN_INV_CFG_STS1              0x01FFD2L
#define RVC_PGN_INV_CFG_STS2              0x01FFD1L
#define RVC_PGN_INV_CFG_STS3              0x01FECEL
#define RVC_PGN_INV_CFG_STS4              0x01FE9BL
#define RVC_PGN_INV_CMD                   0x01FFD3L
#define RVC_PGN_INV_DC_STS                0x01FEE8L
#define RVC_PGN_INV_HV_DC_BUS_STS         0x01FFCCL
#define RVC_PGN_INV_OPS_STS               0x01FFCBL
#define RVC_PGN_INV_STATS_STS             0x01FFCEL
#define RVC_PGN_INV_STS                   0x01FFD4L
#define RVC_PGN_INV_TEMP_STS              0x01FEBDL
#define RVC_PGN_INV_TEMP_STS2             0x01FDCBL
#define RVC_PGN_ISO_ACK                   0x00E800L
#define RVC_PGN_ISO_ADDR_CLAIM            0x00EE00L
#define RVC_PGN_ISO_CMD_ADDR              0x00FED8L
#define RVC_PGN_ISO_REQ                   0x00EA00L
#define RVC_PGN_ISO_TP_CONN_MAN           0x00EC00L
#define RVC_PGN_ISO_TP_CONN_MAN           0x00EC00L
#define RVC_PGN_ISO_TP_CONN_MAN           0x00EC00L
#define RVC_PGN_ISO_TP_CONN_MAN           0x00EC00L
#define RVC_PGN_ISO_TP_CONN_MAN           0x00EC00L
#define RVC_PGN_ISO_TP_XFER               0x00EB00L
#define RVC_PGN_PM_AC_STS_RMS             0x00EF00L
#define RVC_PGN_PM_AC_XFER_SW_STS         0x00EF00L
#define RVC_PGN_PM_ASSOC_CFG              0x00EF00L
#define RVC_PGN_PM_ASSOC_STS              0x00EF00L
#define RVC_PGN_PM_CHG_STS                0x00EF00L
#define RVC_PGN_PM_DEV_MD_CFG             0x00EF00L
#define RVC_PGN_PM_DEV_MD_STS             0x00EF00L
#define RVC_PGN_PM_FXCC_CFG_CMD           0x00EF00L
#define RVC_PGN_PM_FXCC_CFG_STS           0x00EF00L
#define RVC_PGN_PM_GET_CONFIG_PARAM       0x00EF00L
#define RVC_PGN_PM_GET_STATUS_PARAM       0x00EF00L
#define RVC_PGN_PM_INV_CTRL_CMD           0x00EF00L
#define RVC_PGN_PM_INV_LD_SH_STS          0x00EF00L
#define RVC_PGN_PM_INV_STS                0x00EF00L
#define RVC_PGN_PM_LITHIONICS_CMD         0x00EF00L
#define RVC_PGN_PM_LITHIONICS_STS         0x00EF00L
#define RVC_PGN_PM_PARAM_ASSOC_CFG        0x00E900L
#define RVC_PGN_PM_PARAM_AUX_CFG          0x00E900L
#define RVC_PGN_PM_PARAM_AUX_CFG_TRIG_DLY    0x00E900L
#define RVC_PGN_PM_PARAM_AUX_CFG_TRIG_LVL    0x00E900L
#define RVC_PGN_PM_PARAM_AUX_STS          0x00E900L
#define RVC_PGN_PM_PARAM_DEV_MD_CFG       0x00E900L
#define RVC_PGN_PM_PPN_NAK_RSP            0x00EF00L
#define RVC_PGN_PM_PPN_READ_CMD           0x00EF00L
#define RVC_PGN_PM_PPN_READ_RSP           0x00EF00L
#define RVC_PGN_PM_PPN_SESSION_CMD        0x00EF00L
#define RVC_PGN_PM_PPN_SESSION_RSP        0x00EF00L
#define RVC_PGN_PM_PPN_WRITE_CMD          0x00EF00L
#define RVC_PGN_PM_PPN_WRITE_RSP          0x00EF00L
#define RVC_PGN_PM_REQ                    0x00EF00L
#define RVC_PGN_PM_RPC_CMD                0x00EF00L
#define RVC_PGN_PM_SET_CONFIG_PARAM       0x00EF00L
#define RVC_PGN_PM_SW_VER_STS             0x00EF00L
#define RVC_PGN_PROD_IDENT                0x00FEEBL
#define RVC_PGN_PROD_INFO_STS             0x01F014L
#define RVC_PGN_SCC_ARRAY_STS             0x01FDFFL
#define RVC_PGN_SCC_BATT_STS              0x01FE80L
#define RVC_PGN_SCC_CFG_CMD               0x01FEB0L
#define RVC_PGN_SCC_CFG_CMD2              0x01FDFDL
#define RVC_PGN_SCC_CFG_CMD3              0x01FDFBL
#define RVC_PGN_SCC_CFG_CMD4              0x01FDF9L
#define RVC_PGN_SCC_CFG_CMD5              0x01FDCEL
#define RVC_PGN_SCC_CFG_STS               0x01FEB2L
#define RVC_PGN_SCC_CFG_STS2              0x01FDFEL
#define RVC_PGN_SCC_CFG_STS3              0x01FDFCL
#define RVC_PGN_SCC_CFG_STS4              0x01FDFAL
#define RVC_PGN_SCC_CFG_STS5              0x01FDCFL
#define RVC_PGN_SCC_CMD                   0x01FEB1L
#define RVC_PGN_SCC_EQLZ_CFG_CMD          0x01FEADL
#define RVC_PGN_SCC_EQLZ_CFG_STS          0x01FEAEL
#define RVC_PGN_SCC_EQLZ_STS              0x01FEAFL
#define RVC_PGN_SCC_STS                   0x01FEB3L
#define RVC_PGN_SCC_STS2                  0x01FE85L
#define RVC_PGN_SCC_STS3                  0x01FE84L
#define RVC_PGN_SCC_STS4                  0x01FE83L
#define RVC_PGN_SCC_STS5                  0x01FE82L
#define RVC_PGN_SCC_STS6                  0x01FE81L
#define RVC_PGN_SET_SYS_DATE_TIME         0x01FFFEL
#define RVC_PGN_SIMPLE_CALIB_CFG          0x013800L
#define RVC_PGN_SW_VER_STS                0x01F80EL
#define RVC_PGN_SYS_DATE_TIME_STS         0x01FFFFL
#define RVC_PGN_VIRTUAL_TERMINAL          0x017E00L
#define RVC_PGN_XB_RESET_CMD              0x012400L

// Count of PGNs
#define RVC_PGN_TOTAL_COUNT          171
#define RVC_PGN_FASTPACKET_COUNT     4

    // The following defines give the length of each PGN in bytes

#define RVC_DLC_AC_FLT_CTRL_CFG_CMD1        7
#define RVC_DLC_AC_FLT_CTRL_CFG_CMD2        3
#define RVC_DLC_AC_FLT_CTRL_CFG_STS1        7
#define RVC_DLC_AC_FLT_CTRL_CFG_STS2        3
#define RVC_DLC_AGS_CRIT_CMD_AMB_TEMP       7
#define RVC_DLC_AGS_CRIT_CMD_DC_I           7
#define RVC_DLC_AGS_CRIT_CMD_DC_SOC         7
#define RVC_DLC_AGS_CRIT_CMD_DC_V           7
#define RVC_DLC_AGS_CRIT_CMD_XFER_AC_V      7
#define RVC_DLC_AGS_CRIT_STS_AMB_TEMP       7
#define RVC_DLC_AGS_CRIT_STS_DC_I           7
#define RVC_DLC_AGS_CRIT_STS_DC_SOC         7
#define RVC_DLC_AGS_CRIT_STS_DC_V           7
#define RVC_DLC_AGS_CRIT_STS_XFER_AC_V      7
#define RVC_DLC_ALARM_CMD                   4
#define RVC_DLC_ALARM_STS                   7
#define RVC_DLC_BATT_CMD                    4
#define RVC_DLC_BATT_STS1                   8
#define RVC_DLC_BATT_STS11                  7
#define RVC_DLC_BATT_STS2                   8
#define RVC_DLC_BATT_STS3                   8
#define RVC_DLC_BATT_STS4                   8
#define RVC_DLC_BATT_STS6                   5
#define RVC_DLC_BATT_SUMM                   8
#define RVC_DLC_CHG_AC_FLT_CFG_CMD1         7
#define RVC_DLC_CHG_AC_FLT_CFG_CMD2         3
#define RVC_DLC_CHG_AC_FLT_CFG_STS1         7
#define RVC_DLC_CHG_AC_FLT_CFG_STS2         3
#define RVC_DLC_CHG_AC_STS1                 8
#define RVC_DLC_CHG_AC_STS2                 8
#define RVC_DLC_CHG_AC_STS3                 8
#define RVC_DLC_CHG_AC_STS4                 4
#define RVC_DLC_CHG_CFG_CMD1                8
#define RVC_DLC_CHG_CFG_CMD2                7
#define RVC_DLC_CHG_CFG_CMD3                8
#define RVC_DLC_CHG_CFG_CMD4                7
#define RVC_DLC_CHG_CFG_STS1                8
#define RVC_DLC_CHG_CFG_STS2                7
#define RVC_DLC_CHG_CFG_STS3                8
#define RVC_DLC_CHG_CFG_STS4                7
#define RVC_DLC_CHG_CMD                     7
#define RVC_DLC_CHG_EQLZ_CFG_CMD            5
#define RVC_DLC_CHG_EQLZ_CFG_STS            5
#define RVC_DLC_CHG_EQLZ_STS                4
#define RVC_DLC_CHG_STATS_STS              28
#define RVC_DLC_CHG_STS                     8
#define RVC_DLC_CHG_STS2                    8
#define RVC_DLC_CHG_STS3                    3
#define RVC_DLC_COMM_STS1                   8
#define RVC_DLC_COMM_STS2                   8
#define RVC_DLC_COMM_STS3                   6
#define RVC_DLC_DC_SRC_CFG_CMD3             5
#define RVC_DLC_DC_SRC_CMD                  2
#define RVC_DLC_DC_SRC_CONN_STS             5
#define RVC_DLC_DC_SRC_STS1                 8
#define RVC_DLC_DC_SRC_STS11                7
#define RVC_DLC_DC_SRC_STS2                 8
#define RVC_DLC_DC_SRC_STS3                 8
#define RVC_DLC_DC_SRC_STS4                 8
#define RVC_DLC_DC_SRC_STS6                 5
#define RVC_DLC_DEVICE_STATE_SYNC           8
#define RVC_DLC_DIAG_MSG1                   2
#define RVC_DLC_EXTRA_DIAG_MSG1             5
#define RVC_DLC_FILE_DNLD_BLK               4
#define RVC_DLC_EXTRA_FILE_DNLD_BLK         1
#define RVC_DLC_FILE_DNLD_INF              15
#define RVC_DLC_FILE_DNLD_STS               8
#define RVC_DLC_GEN_CMD                     1
#define RVC_DLC_GEN_DEMAND_CMD              7
#define RVC_DLC_GEN_DEMAND_STS              7
#define RVC_DLC_GEN_RST                     2
#define RVC_DLC_GEN_START_CFG_CMD           4
#define RVC_DLC_GEN_START_CFG_STS           4
#define RVC_DLC_GEN_STS1                    8
#define RVC_DLC_GEN_STS2                    7
#define RVC_DLC_INST_ASSIGN                 8
#define RVC_DLC_INST_STS                    8
#define RVC_DLC_INV_AC_FLT_CFG_CMD1         7
#define RVC_DLC_INV_AC_FLT_CFG_STS1         7
#define RVC_DLC_INV_AC_STS1                 8
#define RVC_DLC_INV_AC_STS2                 8
#define RVC_DLC_INV_AC_STS3                 8
#define RVC_DLC_INV_AC_STS4                 4
#define RVC_DLC_INV_APS_STS                 7
#define RVC_DLC_INV_CFG_CMD1                7
#define RVC_DLC_INV_CFG_CMD2                7
#define RVC_DLC_INV_CFG_CMD3                8
#define RVC_DLC_INV_CFG_CMD4                8
#define RVC_DLC_INV_CFG_STS1                8
#define RVC_DLC_INV_CFG_STS2                7
#define RVC_DLC_INV_CFG_STS3                8
#define RVC_DLC_INV_CFG_STS4                8
#define RVC_DLC_INV_CMD                     8
#define RVC_DLC_INV_DC_STS                  5
#define RVC_DLC_INV_HV_DC_BUS_STS           7
#define RVC_DLC_INV_OPS_STS                 7
#define RVC_DLC_INV_STATS_STS              19
#define RVC_DLC_INV_STS                     4
#define RVC_DLC_INV_TEMP_STS                7
#define RVC_DLC_INV_TEMP_STS2               7
#define RVC_DLC_ISO_ACK                     8
#define RVC_DLC_ISO_ADDR_CLAIM              8
#define RVC_DLC_ISO_CMD_ADDR                9
#define RVC_DLC_ISO_REQ                     3
#define RVC_DLC_ISO_TP_CONN_MAN_ABORT       8
#define RVC_DLC_ISO_TP_CONN_MAN_BAM         8
#define RVC_DLC_ISO_TP_CONN_MAN_CTS         8
#define RVC_DLC_ISO_TP_CONN_MAN_EOM         8
#define RVC_DLC_ISO_TP_CONN_MAN_RTS         8
#define RVC_DLC_ISO_TP_XFER                 8
#define RVC_DLC_PM_AC_STS_RMS               8
#define RVC_DLC_PM_AC_XFER_SW_STS           5
#define RVC_DLC_PM_ASSOC_CFG                6
#define RVC_DLC_PM_ASSOC_STS                6
#define RVC_DLC_PM_CHG_STS                  8
#define RVC_DLC_PM_DEV_MD_CFG               4
#define RVC_DLC_PM_DEV_MD_STS               4
#define RVC_DLC_PM_FXCC_CFG_CMD             5
#define RVC_DLC_PM_FXCC_CFG_STS             5
#define RVC_DLC_PM_GET_CONFIG_PARAM         8
#define RVC_DLC_PM_GET_STATUS_PARAM         8
#define RVC_DLC_PM_INV_CTRL_CMD             5
#define RVC_DLC_PM_INV_LD_SH_STS            8
#define RVC_DLC_PM_INV_STS                  7
#define RVC_DLC_PM_LITHIONICS_CMD           2
#define RVC_DLC_PM_LITHIONICS_STS           7
#define RVC_DLC_PM_PARAM_ASSOC_CFG          4
#define RVC_DLC_PM_PARAM_AUX_CFG            4
#define RVC_DLC_PM_PARAM_AUX_CFG_TRIG_DLY      4
#define RVC_DLC_PM_PARAM_AUX_CFG_TRIG_LVL      4
#define RVC_DLC_PM_PARAM_AUX_STS            4
#define RVC_DLC_PM_PARAM_DEV_MD_CFG         4
#define RVC_DLC_PM_PPN_NAK_RSP              8
#define RVC_DLC_PM_PPN_READ_CMD             8
#define RVC_DLC_PM_PPN_READ_RSP             8
#define RVC_DLC_PM_PPN_SESSION_CMD          8
#define RVC_DLC_PM_PPN_SESSION_RSP          8
#define RVC_DLC_PM_PPN_WRITE_CMD            8
#define RVC_DLC_PM_PPN_WRITE_RSP            8
#define RVC_DLC_PM_REQ                      6
#define RVC_DLC_PM_RPC_CMD                  8
#define RVC_DLC_PM_SET_CONFIG_PARAM         8
#define RVC_DLC_PM_SW_VER_STS               8
#define RVC_DLC_PROD_IDENT                  0
#define RVC_DLC_EXTRA_PROD_IDENT            1
#define RVC_DLC_PROD_INFO_STS              43
#define RVC_DLC_SCC_ARRAY_STS               5
#define RVC_DLC_SCC_BATT_STS                8
#define RVC_DLC_SCC_CFG_CMD                 8
#define RVC_DLC_SCC_CFG_CMD2                7
#define RVC_DLC_SCC_CFG_CMD3                7
#define RVC_DLC_SCC_CFG_CMD4                8
#define RVC_DLC_SCC_CFG_CMD5                4
#define RVC_DLC_SCC_CFG_STS                 8
#define RVC_DLC_SCC_CFG_STS2                7
#define RVC_DLC_SCC_CFG_STS3                7
#define RVC_DLC_SCC_CFG_STS4                8
#define RVC_DLC_SCC_CFG_STS5                4
#define RVC_DLC_SCC_CMD                     3
#define RVC_DLC_SCC_EQLZ_CFG_CMD            6
#define RVC_DLC_SCC_EQLZ_CFG_STS            6
#define RVC_DLC_SCC_EQLZ_STS                5
#define RVC_DLC_SCC_STS                     8
#define RVC_DLC_SCC_STS2                    5
#define RVC_DLC_SCC_STS3                    7
#define RVC_DLC_SCC_STS4                    7
#define RVC_DLC_SCC_STS5                    7
#define RVC_DLC_SCC_STS6                    5
#define RVC_DLC_SET_SYS_DATE_TIME           8
#define RVC_DLC_SIMPLE_CALIB_CFG           13
#define RVC_DLC_SW_VER_STS                  1
#define RVC_DLC_EXTRA_SW_VER_STS            8
#define RVC_DLC_SYS_DATE_TIME_STS           8
#define RVC_DLC_VIRTUAL_TERMINAL            8
#define RVC_DLC_XB_RESET_CMD                2

    // Enums used for some message fields

// Proprietary Parameter Number
// Used in the following fields:
//   RVC_tzPGN_PM_PPN_NAK_RSP.eParamId
//   RVC_tzPGN_PM_PPN_READ_CMD.eParamId
//   RVC_tzPGN_PM_PPN_READ_RSP.eParamId
//   RVC_tzPGN_PM_PPN_WRITE_CMD.eParamId
//   RVC_tzPGN_PM_PPN_WRITE_RSP.eParamId
typedef enum RVC_ePROPRIETARY_PARAM_NUM
{
    RVC_ePROPRIETARY_PARAM_NUM_CAN_ADDR =   0,
    RVC_ePROPRIETARY_PARAM_NUM_BATT_INST =   1,
    RVC_ePROPRIETARY_PARAM_NUM_NUM_PACKS =   2,
    RVC_ePROPRIETARY_PARAM_NUM_BANK_INST =   3,
    RVC_ePROPRIETARY_PARAM_NUM_RESERVE_LIMIT =   4,
    RVC_ePROPRIETARY_PARAM_NUM_MAKE_ID  =   5,
    RVC_ePROPRIETARY_PARAM_NUM_MODEL_NUM1 =   6,
    RVC_ePROPRIETARY_PARAM_NUM_MODEL_NUM2 =   7,
    RVC_ePROPRIETARY_PARAM_NUM_SERIAL_NUM =   8,
    RVC_ePROPRIETARY_PARAM_NUM_SW_VER   =   9,
    RVC_ePROPRIETARY_PARAM_NUM_PROD_ID  =  10,
    RVC_ePROPRIETARY_PARAM_NUM_RATED_CAPACITY =  11,
    RVC_ePROPRIETARY_PARAM_NUM_CELLS_IN_SERIES =  12,
    RVC_ePROPRIETARY_PARAM_NUM_CELLS_IN_PARALLEL =  13,
    RVC_ePROPRIETARY_PARAM_NUM_BMS_SERIAL_NUM =  14,
    RVC_ePROPRIETARY_PARAM_NUM_BPC_SERIAL_NUM1 =  15,
    RVC_ePROPRIETARY_PARAM_NUM_BPC_SERIAL_NUM2 =  16,
    RVC_ePROPRIETARY_PARAM_NUM_BPC_HW_VER =  17,
    RVC_ePROPRIETARY_PARAM_NUM_BLUE_TOOTH_CFG =  18,
    RVC_ePROPRIETARY_PARAM_NUM_WI_FI_CFG =  19
} RVC_tePROPRIETARY_PARAM_NUM;

// Auxiliary Desired State
// Used in the following fields:
//   RVC_tzPGN_PM_PARAM_AUX_CFG.eDesiredState
typedef enum RVC_eAUX_DESIRED_STATE
{
    RVC_eAUX_DESIRED_STATE_MANUAL_OFF   =   0,
    RVC_eAUX_DESIRED_STATE_MANUAL_ON    =   1,
    RVC_eAUX_DESIRED_STATE_AUTOMATIC    =   2
} RVC_teAUX_DESIRED_STATE;

// Voltage Status
// Used in the following fields:
//   RVC_tzPGN_BATT_SUMM.eVoltSts
typedef enum RVC_eV_STS
{
    RVC_eV_STS_NORMAL                   =   0,
    RVC_eV_STS_EXTREME_UNDER_VOLTAGE    =   1,
    RVC_eV_STS_UNDER_VOLTAGE            =   2,
    RVC_eV_STS_OVER_VOLTAGE             =   3,
    RVC_eV_STS_EXTREME_OVER_VOLTAGE     =   4
} RVC_teV_STS;

// SW Module
// Used in the following fields:
//   RVC_tzPGN_PM_SW_VER_STS.eSwModIdent
typedef enum RVC_eSW_MOD
{
    RVC_eSW_MOD_APP                     =   0,
    RVC_eSW_MOD_XB_LIB                  =   1,
    RVC_eSW_MOD_RVC                     =   2,
    RVC_eSW_MOD_LOADER                  =   3
} RVC_teSW_MOD;

// RVC Stack Mode
// Used in the following fields:
//   RVC_tzPGN_INV_CFG_CMD3.eStackMd
//   RVC_tzPGN_INV_CFG_STS3.eStackMd
typedef enum RVC_eRVC_STACK_MODE
{
    RVC_eRVC_STACK_MODE_STANDALONE      =   0,
    RVC_eRVC_STACK_MODE_MASTER          =   1,
    RVC_eRVC_STACK_MODE_SLAVE           =   2,
    RVC_eRVC_STACK_MODE_SERIES_LINE2MASTER =   3,
    RVC_eRVC_STACK_MODE_SERIES_LINE1MASTER =   4,
    RVC_eRVC_STACK_MODE_SERIES_LINE2SLAVE =   5,
    RVC_eRVC_STACK_MODE_SERIES_LINE1SLAVE =   6,
    RVC_eRVC_STACK_MODE_PHASE1MASTER    =   7,
    RVC_eRVC_STACK_MODE_PHASE2MASTER    =   8,
    RVC_eRVC_STACK_MODE_PHASE3MASTER    =   9,
    RVC_eRVC_STACK_MODE_PHASE1SLAVE     =  10,
    RVC_eRVC_STACK_MODE_PHASE2SLAVE     =  11,
    RVC_eRVC_STACK_MODE_PHASE3SLAVE     =  12,
    RVC_eRVC_STACK_MODE_NO_DATA         = 255
} RVC_teRVC_STACK_MODE;

// Auxiliary 'OnOff' Reason
// Used in the following fields:
//   RVC_tzPGN_PM_PARAM_AUX_STS.eOffReason
//   RVC_tzPGN_PM_PARAM_AUX_STS.eOnReason
typedef enum RVC_eAUX_ON_OFF_REASON
{
    RVC_eAUX_ON_OFF_REASON_NOT_ON       =   0,
    RVC_eAUX_ON_OFF_REASON_MANUAL_ON    =   1,
    RVC_eAUX_ON_OFF_REASON_NOT_OFF      =   2,
    RVC_eAUX_ON_OFF_REASON_MANUAL_OFF   =   3,
    RVC_eAUX_ON_OFF_REASON_NO_ACTIVE_TRIGGER =   4,
    RVC_eAUX_ON_OFF_REASON_TRIGGER_OVERRIDE =   5,
    RVC_eAUX_ON_OFF_REASON_BATTERY_VOLTAGE_LOW =   6,
    RVC_eAUX_ON_OFF_REASON_BATTERY_VOLTAGE_HIGH =   7,
    RVC_eAUX_ON_OFF_REASON_BATTERY_TEMP_LOW =   8,
    RVC_eAUX_ON_OFF_REASON_BATTERY_TEMP_HIGH =   9,
    RVC_eAUX_ON_OFF_REASON_FAULT        =  10,
    RVC_eAUX_ON_OFF_REASON_AC_GOOD      =  11,
    RVC_eAUX_ON_OFF_REASON_BULK_EXIT    =  12,
    RVC_eAUX_ON_OFF_REASON_ABSORPTION_EXIT =  13,
    RVC_eAUX_ON_OFF_REASON_INTERNAL_TEMP_HIGH =  14,
    RVC_eAUX_ON_OFF_REASON_STATE_OF_CHARGE =  15,
    RVC_eAUX_ON_OFF_REASON_TIME_OF_DAY  =  16
} RVC_teAUX_ON_OFF_REASON;

// Control Mode
// Used in the following fields:
//   RVC_tzPGN_PM_DEV_MD_CFG.eDesiredMode
//   RVC_tzPGN_PM_DEV_MD_STS.eCurrentMode
//   RVC_tzPGN_PM_PARAM_DEV_MD_CFG.eDesiredMode
typedef enum RVC_eCTRL_MODE
{
    RVC_eCTRL_MODE_HIBERNATE            =   0,
    RVC_eCTRL_MODE_POWER_SAVE           =   1,
    RVC_eCTRL_MODE_SAFE                 =   2,
    RVC_eCTRL_MODE_OPERATING            =   3,
    RVC_eCTRL_MODE_DIAGNOSTIC           =   4,
    RVC_eCTRL_MODE_REMOTE_POWER_OFF     =   5,
    RVC_eCTRL_MODE_CBG_BACKUP           =  10,
    RVC_eCTRL_MODE_CBG_SELF_CONSUMP     =  11,
    RVC_eCTRL_MODE_CBG_SELF_CONSUMP_TIME =  12,
    RVC_eCTRL_MODE_CBG_SEND_CFG         =  13,
    RVC_eCTRL_MODE_CBG_PUSH_CFG         =  14,
    RVC_eCTRL_MODE_LAST_MODE            = 252,
    RVC_eCTRL_MODE_RESERVED             = 253,
    RVC_eCTRL_MODE_OUT_OF_RANGE         = 254,
    RVC_eCTRL_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} RVC_teCTRL_MODE;

// Xantrex Charger Algorithm
// Used in the following fields:
//   RVC_tzPGN_PM_CHG_STS.eChgAlgorithm
typedef enum RVC_eXANTREX_CHG_ALG
{
    RVC_eXANTREX_CHG_ALG_INVALID        =   0,
    RVC_eXANTREX_CHG_ALG_3STAGE         =   1,
    RVC_eXANTREX_CHG_ALG_2STAGE_NO_FLOAT =   2,
    RVC_eXANTREX_CHG_ALG_CVCC           =   3,
    RVC_eXANTREX_CHG_ALG_TRICKLE        =   4,
    RVC_eXANTREX_CHG_ALG_4STAGE         =   5,
    RVC_eXANTREX_CHG_ALG_RESERVED       = 253,
    RVC_eXANTREX_CHG_ALG_OUTOF_RANGE    = 254,
    RVC_eXANTREX_CHG_ALG_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} RVC_teXANTREX_CHG_ALG;

// Temperature Status
// Used in the following fields:
//   RVC_tzPGN_BATT_SUMM.eTempSts
typedef enum RVC_eTEMP_STS
{
    RVC_eTEMP_STS_NORMAL                =   0,
    RVC_eTEMP_STS_EXTREME_UNDER_TEMPERATURE =   1,
    RVC_eTEMP_STS_UNDER_TEMPERATURE     =   2,
    RVC_eTEMP_STS_OVER_TEMPERATURE      =   3,
    RVC_eTEMP_STS_EXTREME_OVER_TEMPERATURE =   4
} RVC_teTEMP_STS;

// Operating State, AC Transfer Switch
// Used in the following fields:
//   RVC_tzPGN_PM_AC_XFER_SW_STS.eOpState
typedef enum RVC_eOP_STATE_AC_XFR_SWITCH
{
    RVC_eOP_STATE_AC_XFR_SWITCH_INACTIVE =   0,
    RVC_eOP_STATE_AC_XFR_SWITCH_INPUT1ACTIVE =   1,
    RVC_eOP_STATE_AC_XFR_SWITCH_INPUT2ACTIVE =   2,
    RVC_eOP_STATE_AC_XFR_SWITCH_INPUT1DELAY =   3,
    RVC_eOP_STATE_AC_XFR_SWITCH_INPUT2DELAY =   4
} RVC_teOP_STATE_AC_XFR_SWITCH;

// Default Source Address
// Used in the following fields:
//   RVC_tzPGN_ALARM_CMD.eDevType
//   RVC_tzPGN_ALARM_STS.eDevType
//   RVC_tzPGN_DIAG_MSG1.eProdId
//   RVC_tzPGN_INST_ASSIGN.eDevType
//   RVC_tzPGN_INST_STS.eDevType
//   RVC_tzPGN_ISO_CMD_ADDR.ePrefSrcAddr
typedef enum RVC_eDFLT_SRC_ADDR
{
    RVC_eDFLT_SRC_ADDR_GENERATOR        =  64,
    RVC_eDFLT_SRC_ADDR_GENSTART_CONTROLLER =  65,
    RVC_eDFLT_SRC_ADDR_INVERTER         =  66,
    RVC_eDFLT_SRC_ADDR_INVERTER2        =  67,
    RVC_eDFLT_SRC_ADDR_CONTROL_PANEL    =  68,
    RVC_eDFLT_SRC_ADDR_BATTERY_MONITOR  =  69,
    RVC_eDFLT_SRC_ADDR_BATTERY_MONITOR2 =  70,
    RVC_eDFLT_SRC_ADDR_CHASSIS_BATTERY_MONITOR =  71,
    RVC_eDFLT_SRC_ADDR_CONVERTER        =  74,
    RVC_eDFLT_SRC_ADDR_CONVERTER2       =  75,
    RVC_eDFLT_SRC_ADDR_CHARGE_CONTROLLER =  76,
    RVC_eDFLT_SRC_ADDR_AC_LOAD_MONITOR  =  77,
    RVC_eDFLT_SRC_ADDR_AC_FAULT_PROTECTION =  78,
    RVC_eDFLT_SRC_ADDR_TRANSFER_SWITCH  =  79,
    RVC_eDFLT_SRC_ADDR_DC_LOAD          = 131,
    RVC_eDFLT_SRC_ADDR_DC_INPUT_KEYPAD  = 132,
    RVC_eDFLT_SRC_ADDR_AC_LOAD          = 137,
    RVC_eDFLT_SRC_ADDR_DC_MOTOR_CONTROLLER = 138,
    RVC_eDFLT_SRC_ADDR_GENERIC_AC_SOURCE = 140,
    RVC_eDFLT_SRC_ADDR_SOLAR_CHARGE_CONTROLLER = 141,
    RVC_eDFLT_SRC_ADDR_SERVICE_TOOL     = 249,
    RVC_eDFLT_SRC_ADDR_SYSTEM_CLOCK     = 250,
    RVC_eDFLT_SRC_ADDR_DATA_LOGGER      = 251,
    RVC_eDFLT_SRC_ADDR_CHASSIS_BRIDGE   = 252,
    RVC_eDFLT_SRC_ADDR_NETWORK_BRIDGE   = 253,
    RVC_eDFLT_SRC_ADDR_GLOBAL           = 255
} RVC_teDFLT_SRC_ADDR;

// Industry Group
// Used in the following fields:
//   RVC_tzPGN_ISO_ADDR_CLAIM.eIndustryGroup
//   RVC_tzPGN_ISO_CMD_ADDR.eIndustryGroup
typedef enum RVC_eINDUSTRY_GRP
{
    RVC_eINDUSTRY_GRP_ALL               =   0,
    RVC_eINDUSTRY_GRP_ON_HIGHWAY        =   1,
    RVC_eINDUSTRY_GRP_AGRICULTURE       =   2,
    RVC_eINDUSTRY_GRP_CONSTRUCTION      =   3,
    RVC_eINDUSTRY_GRP_MARINE            =   4,
    RVC_eINDUSTRY_GRP_INDUSTRIAL        =   5,
    RVC_eINDUSTRY_GRP_RESERVED1         =   6,
    RVC_eINDUSTRY_GRP_RESERVED2         =   7
} RVC_teINDUSTRY_GRP;

// ACK Status
// Used in the following fields:
//   RVC_tzPGN_ISO_ACK.eCtrlByte
typedef enum RVC_eACK_STS
{
    RVC_eACK_STS_ACK                    =   0,
    RVC_eACK_STS_NAK                    =   1,
    RVC_eACK_STS_DNY                    =   2
} RVC_teACK_STS;

// Group Function Value
// Used in the following fields:
//   RVC_tzPGN_ISO_ACK.eGroupFunctionValue
typedef enum RVC_eGRP_FUNC_VALUE
{
    RVC_eGRP_FUNC_VALUE_DO_NOT_CARE     =  -1,
    RVC_eGRP_FUNC_VALUE_UNSUPPORTED     = 241,
    RVC_eGRP_FUNC_VALUE_NOT_AVAILABLE   = 242,
    RVC_eGRP_FUNC_VALUE_DATA_ACCESS_ERROR = 243,
    RVC_eGRP_FUNC_VALUE_DATA_NOT_AVAILABLE = 244,
    RVC_eGRP_FUNC_VALUE_DATA_INVALID    = 245,
    RVC_eGRP_FUNC_VALUE_DLC_INVALID     = 246,
    RVC_eGRP_FUNC_VALUE_MESSAGE_COUNT   = 247,
    RVC_eGRP_FUNC_VALUE_CAC             = 248,
    RVC_eGRP_FUNC_VALUE_CONFIGURATION_TYPE = 249,
    RVC_eGRP_FUNC_VALUE_PROTOCOL        = 250,
    RVC_eGRP_FUNC_VALUE_SECURITY        = 251,
    RVC_eGRP_FUNC_VALUE_WRONG_MODE      = 252,
    RVC_eGRP_FUNC_VALUE_MEMORY_ERROR    = 253
} RVC_teGRP_FUNC_VALUE;

// Function Code
// Used in the following fields:
//   RVC_tzPGN_FILE_DNLD_INF.eDeviceFunction
//   RVC_tzPGN_ISO_ADDR_CLAIM.eDeviceFunction
//   RVC_tzPGN_ISO_CMD_ADDR.eDeviceFunction
typedef enum RVC_eFUNC_CODE
{
    RVC_eFUNC_CODE_DEFAULT              =   0,
    RVC_eFUNC_CODE_USER_INTERFACE       = 128,
    RVC_eFUNC_CODE_INVERTER_CHARGER     = 129,
    RVC_eFUNC_CODE_INVERTER             = 130,
    RVC_eFUNC_CODE_CHARGER              = 131,
    RVC_eFUNC_CODE_BATTERY_MONITOR      = 132,
    RVC_eFUNC_CODE_AGS                  = 133,
    RVC_eFUNC_CODE_DIAGNOSTIC_TERMINAL  = 134,
    RVC_eFUNC_CODE_GATEWAY              = 135,
    RVC_eFUNC_CODE_ENERGY_MANAGEMENT_SYSTEM = 136,
    RVC_eFUNC_CODE_BATTERY_MANAGEMENT_SYSTEM = 137,
    RVC_eFUNC_CODE_SERVICE_TOOL         = 249,
    RVC_eFUNC_CODE_SYSTEM_CLOCK         = 250
} RVC_teFUNC_CODE;

// Device Class
// Used in the following fields:
//   RVC_tzPGN_ISO_ADDR_CLAIM.eDeviceClass
//   RVC_tzPGN_ISO_CMD_ADDR.eDeviceClass
typedef enum RVC_eDEVICE_CLASS
{
    RVC_eDEVICE_CLASS_RESERVED          =   0,
    RVC_eDEVICE_CLASS_SYSTEM_TOOLS      =  10,
    RVC_eDEVICE_CLASS_SAFETY            =  20,
    RVC_eDEVICE_CLASS_GATEWAY           =  25,
    RVC_eDEVICE_CLASS_POWER_MANAGEMENT  =  30,
    RVC_eDEVICE_CLASS_STEERING          =  40,
    RVC_eDEVICE_CLASS_PROPULSION        =  50,
    RVC_eDEVICE_CLASS_NAVIGATION        =  60,
    RVC_eDEVICE_CLASS_COMMUNICATIONS    =  70,
    RVC_eDEVICE_CLASS_INSTRUMENTATION_AND_GENERAL =  80,
    RVC_eDEVICE_CLASS_ENVIRONMENTAL     =  90,
    RVC_eDEVICE_CLASS_DECK_CARGO_FISHING = 100
} RVC_teDEVICE_CLASS;

// Command Pair
// Used in the following fields:
//   RVC_tzPGN_AGS_CRIT_CMD_AMB_TEMP.eCmd
//   RVC_tzPGN_AGS_CRIT_CMD_AMB_TEMP.eActSts
//   RVC_tzPGN_AGS_CRIT_CMD_DC_I.eActSts
//   RVC_tzPGN_AGS_CRIT_CMD_DC_I.eCmd
//   RVC_tzPGN_AGS_CRIT_CMD_DC_SOC.eActSts
//   RVC_tzPGN_AGS_CRIT_CMD_DC_SOC.eCmd
//   RVC_tzPGN_AGS_CRIT_CMD_DC_V.eCmd
//   RVC_tzPGN_AGS_CRIT_CMD_DC_V.eActSts
//   RVC_tzPGN_AGS_CRIT_CMD_XFER_AC_V.eActSts
//   RVC_tzPGN_AGS_CRIT_CMD_XFER_AC_V.eCmd
//   RVC_tzPGN_ALARM_CMD.eAutoRstEn
//   RVC_tzPGN_ALARM_CMD.eAckAlarm
//   RVC_tzPGN_ALARM_CMD.eReadyAlarm
//   RVC_tzPGN_CHG_CMD.eDfltStatePwrUp
//   RVC_tzPGN_CHG_CMD.eAutoReChgEn
//   RVC_tzPGN_CHG_STS.eAutoReChgEn
//   RVC_tzPGN_CHG_STS.eDefltStatePwrUp
//   RVC_tzPGN_GEN_RST.eReboot
//   RVC_tzPGN_GEN_RST.eClrFlts
//   RVC_tzPGN_GEN_RST.eRstDflt
//   RVC_tzPGN_GEN_RST.eRstStats
//   RVC_tzPGN_GEN_RST.eRstLdr
//   RVC_tzPGN_GEN_RST.eTestMd
//   RVC_tzPGN_GEN_RST.eRstOEM
//   RVC_tzPGN_INV_CFG_STS1.eGenSupportEnOnStartUp
//   RVC_tzPGN_INV_CFG_STS1.eAcPassThruEnOnStartUp
//   RVC_tzPGN_INV_CFG_STS1.eLdSenseEnOnStartUp
//   RVC_tzPGN_INV_CFG_STS1.eInvEnOnStartUp
//   RVC_tzPGN_INV_CMD.eGenSupportEn
//   RVC_tzPGN_INV_CMD.eInvEn
//   RVC_tzPGN_INV_CMD.ePassThruEn
//   RVC_tzPGN_INV_CMD.eInvEnOnStartUp
//   RVC_tzPGN_INV_CMD.eLdSenseEnOnStartUp
//   RVC_tzPGN_INV_CMD.eAcPassThruEnOnStartUp
//   RVC_tzPGN_INV_CMD.eGenSupportOnStartUp
//   RVC_tzPGN_INV_CMD.eLoadSenseEn
//   RVC_tzPGN_PM_INV_CTRL_CMD.eForceSell
//   RVC_tzPGN_PM_INV_CTRL_CMD.eSellToGridEnDis
//   RVC_tzPGN_PM_INV_CTRL_CMD.eInvEnDis
//   RVC_tzPGN_PM_INV_STS.eInvEnDis
//   RVC_tzPGN_SCC_CFG_CMD.eLinkageMode
//   RVC_tzPGN_SCC_CFG_CMD.eBattSensPres
//   RVC_tzPGN_SCC_CMD.eEnableOnPwrUp
//   RVC_tzPGN_SCC_CMD.eClrHist
typedef enum RVC_eCMD_PAIR
{
    RVC_eCMD_PAIR_OFF                   =   0,
    RVC_eCMD_PAIR_ON                    =   1,
    RVC_eCMD_PAIR_RESERVED              =   2,
    RVC_eCMD_PAIR_NO_CHANGE             =   3
} RVC_teCMD_PAIR;

// Generic status pair
// Used in the following fields:
//   RVC_tzPGN_AC_FLT_CTRL_CFG_CMD1.eLine
//   RVC_tzPGN_AC_FLT_CTRL_CFG_CMD1.eInOut
//   RVC_tzPGN_AC_FLT_CTRL_CFG_CMD1.eBypassMode
//   RVC_tzPGN_AC_FLT_CTRL_CFG_CMD2.eLine
//   RVC_tzPGN_AC_FLT_CTRL_CFG_CMD2.eInOut
//   RVC_tzPGN_AC_FLT_CTRL_CFG_STS1.eLine
//   RVC_tzPGN_AC_FLT_CTRL_CFG_STS1.eInOut
//   RVC_tzPGN_AC_FLT_CTRL_CFG_STS1.eBypassMode
//   RVC_tzPGN_AC_FLT_CTRL_CFG_STS2.eLine
//   RVC_tzPGN_AC_FLT_CTRL_CFG_STS2.eInOut
//   RVC_tzPGN_AGS_CRIT_STS_AMB_TEMP.eCurrDemandSts
//   RVC_tzPGN_AGS_CRIT_STS_AMB_TEMP.eActSts
//   RVC_tzPGN_AGS_CRIT_STS_DC_I.eActSts
//   RVC_tzPGN_AGS_CRIT_STS_DC_I.eCurrDemandSts
//   RVC_tzPGN_AGS_CRIT_STS_DC_SOC.eCurrDemandSts
//   RVC_tzPGN_AGS_CRIT_STS_DC_SOC.eActSts
//   RVC_tzPGN_AGS_CRIT_STS_DC_V.eActSts
//   RVC_tzPGN_AGS_CRIT_STS_DC_V.eCurrDemandSts
//   RVC_tzPGN_AGS_CRIT_STS_XFER_AC_V.eCurrDemandSts
//   RVC_tzPGN_AGS_CRIT_STS_XFER_AC_V.eActSts
//   RVC_tzPGN_ALARM_STS.eAlarmAckd
//   RVC_tzPGN_ALARM_STS.eAlarmRdy
//   RVC_tzPGN_ALARM_STS.eAlarmRstEn
//   RVC_tzPGN_ALARM_STS.eFtMonReq
//   RVC_tzPGN_ALARM_STS.eAlarmForUser
//   RVC_tzPGN_ALARM_STS.eAlarmForLog
//   RVC_tzPGN_ALARM_STS.eAlarmTrig
//   RVC_tzPGN_BATT_CMD.eDesiredChgOnOffSts
//   RVC_tzPGN_BATT_CMD.eDesiredLoadOnOffSts
//   RVC_tzPGN_BATT_CMD.eClrHistory
//   RVC_tzPGN_BATT_CMD.eReserved
//   RVC_tzPGN_BATT_STS11.eDischgOnOffSts
//   RVC_tzPGN_BATT_STS11.eChgDetect
//   RVC_tzPGN_BATT_STS11.eChgOnOffSts
//   RVC_tzPGN_BATT_STS11.eReservSts
//   RVC_tzPGN_BATT_STS6.eHiDcSrcTempLimitSts
//   RVC_tzPGN_BATT_STS6.eLowDcSrcTempLimitSts
//   RVC_tzPGN_BATT_STS6.eHiAmpDcSrcLimitSts
//   RVC_tzPGN_BATT_STS6.eLowVoltLimitSts
//   RVC_tzPGN_BATT_STS6.eHiVoltLimitSts
//   RVC_tzPGN_BATT_STS6.eLowSocLimitSts
//   RVC_tzPGN_CHG_AC_FLT_CFG_CMD1.eBypassMode
//   RVC_tzPGN_CHG_AC_FLT_CFG_CMD1.eInOut
//   RVC_tzPGN_CHG_AC_FLT_CFG_CMD2.eInOut
//   RVC_tzPGN_CHG_AC_FLT_CFG_STS1.eBypassMode
//   RVC_tzPGN_CHG_AC_FLT_CFG_STS1.eInOut
//   RVC_tzPGN_CHG_AC_FLT_CFG_STS2.eInOut
//   RVC_tzPGN_CHG_AC_STS1.eInOut
//   RVC_tzPGN_CHG_AC_STS1.eFltOpnGnd
//   RVC_tzPGN_CHG_AC_STS1.eFltOpnNeutral
//   RVC_tzPGN_CHG_AC_STS1.eFltRevPolarity
//   RVC_tzPGN_CHG_AC_STS1.eFltGndFlt
//   RVC_tzPGN_CHG_AC_STS2.eInOut
//   RVC_tzPGN_CHG_AC_STS3.eInOut
//   RVC_tzPGN_CHG_AC_STS4.eFltSurgeProt
//   RVC_tzPGN_CHG_AC_STS4.eInOut
//   RVC_tzPGN_CHG_AC_STS4.eFltLoFreq
//   RVC_tzPGN_CHG_AC_STS4.eBypassModeAct
//   RVC_tzPGN_CHG_AC_STS4.eFltHiFreq
//   RVC_tzPGN_CHG_CFG_CMD1.eBattSensPres
//   RVC_tzPGN_CHG_CFG_STS1.eBattSensPres
//   RVC_tzPGN_DC_SRC_CMD.eDesChgOnOffSts
//   RVC_tzPGN_DC_SRC_CMD.eDesPwrOnOffSts
//   RVC_tzPGN_DC_SRC_STS11.eChgDetect
//   RVC_tzPGN_DC_SRC_STS11.eDischgOnOffSts
//   RVC_tzPGN_DC_SRC_STS11.eChgOnOffSts
//   RVC_tzPGN_DC_SRC_STS11.eReservSts
//   RVC_tzPGN_DC_SRC_STS6.eHiAmpDcSrcLimitSts
//   RVC_tzPGN_DC_SRC_STS6.eLowSocLimitSts
//   RVC_tzPGN_DC_SRC_STS6.eLowVoltLimitSts
//   RVC_tzPGN_DC_SRC_STS6.eLowDcSrcTempLimitSts
//   RVC_tzPGN_DC_SRC_STS6.eHiDcSrcTempLimitSts
//   RVC_tzPGN_DC_SRC_STS6.eHiVoltLimitSts
//   RVC_tzPGN_DIAG_MSG1.eOpStsRed
//   RVC_tzPGN_DIAG_MSG1.eOpStsYel
//   RVC_tzPGN_DIAG_MSG1.eOpStsProdActive
//   RVC_tzPGN_DIAG_MSG1.eOpStsProdOn
//   RVC_tzPGN_GEN_DEMAND_CMD.eGenDemand
//   RVC_tzPGN_GEN_DEMAND_CMD.eQuietTimeOverride
//   RVC_tzPGN_GEN_DEMAND_CMD.eManOverride
//   RVC_tzPGN_GEN_DEMAND_CMD.eGenLock
//   RVC_tzPGN_GEN_DEMAND_CMD.eExtActRst
//   RVC_tzPGN_GEN_DEMAND_STS.eExtActDetect
//   RVC_tzPGN_GEN_DEMAND_STS.eIntGenDemand
//   RVC_tzPGN_GEN_DEMAND_STS.eNetGenDemand
//   RVC_tzPGN_GEN_DEMAND_STS.eGenDemand
//   RVC_tzPGN_GEN_DEMAND_STS.eQuietTime
//   RVC_tzPGN_GEN_DEMAND_STS.eManOverrideDetect
//   RVC_tzPGN_GEN_DEMAND_STS.eQuietTimeOverride
//   RVC_tzPGN_GEN_DEMAND_STS.eGenLock
//   RVC_tzPGN_GEN_STS2.eCautionLight
//   RVC_tzPGN_GEN_STS2.eOilLvlSw
//   RVC_tzPGN_GEN_STS2.eOilPresSdSw
//   RVC_tzPGN_GEN_STS2.eTempSdSw
//   RVC_tzPGN_INV_AC_FLT_CFG_CMD1.eBypassMode
//   RVC_tzPGN_INV_AC_FLT_CFG_STS1.eBypassMode
//   RVC_tzPGN_INV_AC_STS1.eFltGndFlt
//   RVC_tzPGN_INV_AC_STS1.eFltOpnGnd
//   RVC_tzPGN_INV_AC_STS1.eInOut
//   RVC_tzPGN_INV_AC_STS1.eFltOpnNeutral
//   RVC_tzPGN_INV_AC_STS1.eFltRevPolarity
//   RVC_tzPGN_INV_AC_STS2.eInOut
//   RVC_tzPGN_INV_AC_STS3.eInOut
//   RVC_tzPGN_INV_AC_STS4.eBypassModeAct
//   RVC_tzPGN_INV_AC_STS4.eFltLoFreq
//   RVC_tzPGN_INV_AC_STS4.eFltHiFreq
//   RVC_tzPGN_INV_AC_STS4.eFltSurgeProt
//   RVC_tzPGN_INV_AC_STS4.eInOut
//   RVC_tzPGN_INV_STS.eLoadSenseEn
//   RVC_tzPGN_INV_STS.eBattTempSensPres
//   RVC_tzPGN_INV_STS.eGenSupportEn
//   RVC_tzPGN_INV_STS.eInverterEn
//   RVC_tzPGN_INV_STS.ePassthruEn
//   RVC_tzPGN_PM_CHG_STS.eBattTempSensorPresent
//   RVC_tzPGN_PM_FXCC_CFG_CMD.eTransMode
//   RVC_tzPGN_PM_FXCC_CFG_CMD.eAlarmEnDis
//   RVC_tzPGN_PM_FXCC_CFG_CMD.eOverFltRecEnDis
//   RVC_tzPGN_PM_FXCC_CFG_STS.eOvrFltRecEnDis
//   RVC_tzPGN_PM_FXCC_CFG_STS.eAlarmEnDis
//   RVC_tzPGN_PM_FXCC_CFG_STS.eTransMode
//   RVC_tzPGN_SCC_CFG_STS.eBattSensPres
//   RVC_tzPGN_SCC_CFG_STS.eLinkMode
//   RVC_tzPGN_SCC_EQLZ_STS.ePreChgSts
//   RVC_tzPGN_SCC_STS.ePwrUpEnDis
//   RVC_tzPGN_SCC_STS.eClrHist
typedef enum RVC_eGENERIC_STSPAIR
{
    RVC_eGENERIC_STSPAIR_OFF            =   0,
    RVC_eGENERIC_STSPAIR_ON             =   1,
    RVC_eGENERIC_STSPAIR_ERROR          =   2,
    RVC_eGENERIC_STSPAIR_UNKNOWN        =   3
} RVC_teGENERIC_STSPAIR;

// RVC Inverter Status
// Used in the following fields:
//   RVC_tzPGN_GEN_STS1.eSts
//   RVC_tzPGN_INV_STS.eSts
typedef enum RVC_eRVC_INV_STS
{
    RVC_eRVC_INV_STS_DISABLED           =   0,
    RVC_eRVC_INV_STS_INVERT             =   1,
    RVC_eRVC_INV_STS_AC_PASSTHRU        =   2,
    RVC_eRVC_INV_STS_APS_ONLY           =   3,
    RVC_eRVC_INV_STS_LOAD_SENSE         =   4,
    RVC_eRVC_INV_STS_WAITING_TO_INVERT  =   5,
    RVC_eRVC_INV_STS_GENERATOR_SUPPORT  =   6,
    RVC_eRVC_INV_STS_NO_DATA            = 255
} RVC_teRVC_INV_STS;

// RVC Charger Operating State
// Used in the following fields:
//   RVC_tzPGN_CHG_STS.eOpState
typedef enum RVC_eRVC_CHG_OP_STATE
{
    RVC_eRVC_CHG_OP_STATE_DISABLE       =   0,
    RVC_eRVC_CHG_OP_STATE_NOT_CHARGING  =   1,
    RVC_eRVC_CHG_OP_STATE_BULK          =   2,
    RVC_eRVC_CHG_OP_STATE_ABSORPTION    =   3,
    RVC_eRVC_CHG_OP_STATE_OVERCHARGE    =   4,
    RVC_eRVC_CHG_OP_STATE_EQUALIZE      =   5,
    RVC_eRVC_CHG_OP_STATE_FLOAT         =   6,
    RVC_eRVC_CHG_OP_STATE_CONSTANT_VOLTAGE_CONSTANT_CURRENT =   7,
    RVC_eRVC_CHG_OP_STATE_NO_DATA       = 255
} RVC_teRVC_CHG_OP_STATE;

// RVC Charging Algorithm
// Used in the following fields:
//   RVC_tzPGN_CHG_CFG_CMD1.eChgAlg
//   RVC_tzPGN_CHG_CFG_STS1.eChgAlg
//   RVC_tzPGN_SCC_CFG_CMD.eChgAlg
//   RVC_tzPGN_SCC_CFG_STS.eChgAlg
typedef enum RVC_eRVC_CHG_ALG
{
    RVC_eRVC_CHG_ALG_CONSTANT_VOLTAGE   =   0,
    RVC_eRVC_CHG_ALG_CONSTANT_CURRENT   =   1,
    RVC_eRVC_CHG_ALG_3STAGE             =   2,
    RVC_eRVC_CHG_ALG_2STAGE             =   3,
    RVC_eRVC_CHG_ALG_TRICKLE            =   4,
    RVC_eRVC_CHG_ALG_CUSTOM2            = 249,
    RVC_eRVC_CHG_ALG_CUSTOM1            = 250,
    RVC_eRVC_CHG_ALG_NO_DATA            = 255
} RVC_teRVC_CHG_ALG;

// RVC Charging Mode
// Used in the following fields:
//   RVC_tzPGN_CHG_CFG_CMD1.eChgMode
//   RVC_tzPGN_CHG_CFG_STS1.eChgMode
//   RVC_tzPGN_SCC_CFG_CMD.eChgMode
//   RVC_tzPGN_SCC_CFG_STS.eChgMode
typedef enum RVC_eRVC_CHG_MODE
{
    RVC_eRVC_CHG_MODE_STANDALONE        =   0,
    RVC_eRVC_CHG_MODE_PRIMARY           =   1,
    RVC_eRVC_CHG_MODE_SECONDARY         =   2,
    RVC_eRVC_CHG_MODE_LINKED_TO_DC_SOURCE =   3,
    RVC_eRVC_CHG_MODE_NO_DATA           = 255
} RVC_teRVC_CHG_MODE;

// RVC Battery Type
// Used in the following fields:
//   RVC_tzPGN_BATT_STS4.eBattType
//   RVC_tzPGN_CHG_CFG_CMD1.eBattType
//   RVC_tzPGN_CHG_CFG_STS1.eBattType
//   RVC_tzPGN_DC_SRC_STS4.eBattType
//   RVC_tzPGN_SCC_CFG_CMD.eBattType
//   RVC_tzPGN_SCC_CFG_STS.eBattType
typedef enum RVC_eRVC_BATT_TYPE
{
    RVC_eRVC_BATT_TYPE_FLOODED          =   0,
    RVC_eRVC_BATT_TYPE_GEL              =   1,
    RVC_eRVC_BATT_TYPE_AGM              =   2,
    RVC_eRVC_BATT_TYPE_LITHIUM_IRON_PHOSPHATE =   3,
    RVC_eRVC_BATT_TYPE_BMS_DIRECTED_CUSTOM_LI_ION =  11,
    RVC_eRVC_BATT_TYPE_CUSTOM_LI_ION_FOR_CCCV =  12,
    RVC_eRVC_BATT_TYPE_CUSTOM1          =  13,
    RVC_eRVC_BATT_TYPE_NO_DATA          =  15
} RVC_teRVC_BATT_TYPE;

// RVC Charger Command
// Used in the following fields:
//   RVC_tzPGN_CHG_CMD.eSts
//   RVC_tzPGN_SCC_CMD.eSts
typedef enum RVC_eRVC_CHG_CMD
{
    RVC_eRVC_CHG_CMD_DISABLE            =   0,
    RVC_eRVC_CHG_CMD_ENABLE_CHARGER     =   1,
    RVC_eRVC_CHG_CMD_START_EQUALIZATION =   2,
    RVC_eRVC_CHG_CMD_TOP_UP_BATTERY     =   3,
    RVC_eRVC_CHG_CMD_DATA_NOT_AVAILABLE = 255
} RVC_teRVC_CHG_CMD;

// RVC Generator Command
// Used in the following fields:
//   RVC_tzPGN_GEN_CMD.eCmd
typedef enum RVC_eRVC_GEN_CMD
{
    RVC_eRVC_GEN_CMD_STOP               =   0,
    RVC_eRVC_GEN_CMD_START              =   1,
    RVC_eRVC_GEN_CMD_MANUAL_PRIME       =   2,
    RVC_eRVC_GEN_CMD_MANUAL_PREHEAT     =   3
} RVC_teRVC_GEN_CMD;

// RVC Generator Type
// Used in the following fields:
//   RVC_tzPGN_GEN_START_CFG_CMD.eGenType
//   RVC_tzPGN_GEN_START_CFG_STS.eGenType
typedef enum RVC_eRVC_GEN_TYPE
{
    RVC_eRVC_GEN_TYPE_RUN_CRANK_INPUTS  =   1,
    RVC_eRVC_GEN_TYPE_CRANK_GLOW_STOP_INPUTS =   2,
    RVC_eRVC_GEN_TYPE_PREHEAT_START_PRIME_STOP_INPUTS =   3,
    RVC_eRVC_GEN_TYPE_SINGLE_ON_OFF_INPUT =   4
} RVC_teRVC_GEN_TYPE;

// SAE J1939 FMI
// Used in the following fields:
//   RVC_tzPGN_DIAG_MSG1.eFmi
typedef enum RVC_eSAEJ1939FMI
{
    RVC_eSAEJ1939FMI_DATUM_ABOVE_NORMAL_OPERATING_RANGE =   0,
    RVC_eSAEJ1939FMI_DATUM_BELOW_NORMAL_OPERATING_RANGE =   1,
    RVC_eSAEJ1939FMI_DATUM_ERRATIC_INTERMITTENT_INVALID =   2,
    RVC_eSAEJ1939FMI_SHORT_CIRCUIT_HIGH_VOLTAGE =   3,
    RVC_eSAEJ1939FMI_SHORT_CIRCUIT_LOW_VOLTAGE =   4,
    RVC_eSAEJ1939FMI_CURRENT_BELOW_NORMAL =   5,
    RVC_eSAEJ1939FMI_CURRENT_ABOVE_NORMAL =   6,
    RVC_eSAEJ1939FMI_MECHANICAL_SYSTEM_NOT_RESPONDING =   7,
    RVC_eSAEJ1939FMI_ABNORMAL_FREQUENCY_PULSE_WIDTH_PERIOD =   8,
    RVC_eSAEJ1939FMI_ABNORMAL_UPDATE_RATE =   9,
    RVC_eSAEJ1939FMI_ABNORMAL_RATEOF_CHANGE =  10,
    RVC_eSAEJ1939FMI_FAILURE_NOT_IDENTIFIABLE =  11,
    RVC_eSAEJ1939FMI_BAD_INTELLIGENT_DEVICE_COMPONENT =  12,
    RVC_eSAEJ1939FMI_OUT_OF_CALIBRATION =  13,
    RVC_eSAEJ1939FMI_NONE_OF_THE_ABOVE  =  14,
    RVC_eSAEJ1939FMI_DATUM_VALID_BUT_ABOVE_NORMAL_LEAST_SEVERE =  15,
    RVC_eSAEJ1939FMI_DATUM_VALID_BUT_ABOVE_NORMAL_MODERATELY_SEVERE =  16,
    RVC_eSAEJ1939FMI_DATUM_VALID_BUT_BELOW_NORMAL_LEAST_SEVERE =  17,
    RVC_eSAEJ1939FMI_DATUM_VALID_BUT_BELOW_NORMAL_MODERATELY_SEVERE =  18,
    RVC_eSAEJ1939FMI_RECEIVED_INVALID_NETWORK_DATUM =  19,
    RVC_eSAEJ1939FMI_POLARITY_REVERSED  =  20,
    RVC_eSAEJ1939FMI_NETWORKED_DEVICE_NOT_RESPONDING =  21,
    RVC_eSAEJ1939FMI_RESERVED1          =  22,
    RVC_eSAEJ1939FMI_RESERVED2          =  23,
    RVC_eSAEJ1939FMI_RESERVED3          =  24,
    RVC_eSAEJ1939FMI_RESERVED4          =  25,
    RVC_eSAEJ1939FMI_RESERVED5          =  26,
    RVC_eSAEJ1939FMI_RESERVED6          =  27,
    RVC_eSAEJ1939FMI_RESERVED7          =  28,
    RVC_eSAEJ1939FMI_RESERVED8          =  29,
    RVC_eSAEJ1939FMI_RESERVED9          =  30,
    RVC_eSAEJ1939FMI_NO_FAILURE_INFORMATION_AVAILABLE =  31
} RVC_teSAEJ1939FMI;

// RVC Phase Status
// Used in the following fields:
//   RVC_tzPGN_CHG_AC_STS3.ePhsSts
//   RVC_tzPGN_INV_AC_STS3.ePhsSts
typedef enum RVC_eRVC_PHASE_STS
{
    RVC_eRVC_PHASE_STS_NO_COMPLEMENTARY_LEG =   0,
    RVC_eRVC_PHASE_STS_IN_PHASE         =   1,
    RVC_eRVC_PHASE_STS_SPLIT_PHASE      =   2,
    RVC_eRVC_PHASE_STS_VARIABLE_PHASE   =   3,
    RVC_eRVC_PHASE_STS_ERROR            =  14,
    RVC_eRVC_PHASE_STS_NO_DATA          =  15
} RVC_teRVC_PHASE_STS;

// RVC AGS Criterion Type
// Used in the following fields:
//   RVC_tzPGN_AGS_CRIT_CMD_AMB_TEMP.eCritType
//   RVC_tzPGN_AGS_CRIT_CMD_DC_I.eCritType
//   RVC_tzPGN_AGS_CRIT_CMD_DC_SOC.eCritType
//   RVC_tzPGN_AGS_CRIT_CMD_DC_V.eCritType
//   RVC_tzPGN_AGS_CRIT_CMD_XFER_AC_V.eCritType
//   RVC_tzPGN_AGS_CRIT_STS_AMB_TEMP.eCritType
//   RVC_tzPGN_AGS_CRIT_STS_DC_I.eCritType
//   RVC_tzPGN_AGS_CRIT_STS_DC_SOC.eCritType
//   RVC_tzPGN_AGS_CRIT_STS_DC_V.eCritType
//   RVC_tzPGN_AGS_CRIT_STS_XFER_AC_V.eCritType
typedef enum RVC_eRVCAGS_CRITERION_TYPE
{
    RVC_eRVCAGS_CRITERION_TYPE_DC_VOLTAGE =   0,
    RVC_eRVCAGS_CRITERION_TYPE_DC_SOC   =   1,
    RVC_eRVCAGS_CRITERION_TYPE_DC_CURRENT =   2,
    RVC_eRVCAGS_CRITERION_TYPE_AMB_TEMP =   3,
    RVC_eRVCAGS_CRITERION_TYPE_XFER_SWITCH_AC_POINT_VOLTAGE =   4,
    RVC_eRVCAGS_CRITERION_TYPE_PROPRIETARY1 = 128,
    RVC_eRVCAGS_CRITERION_TYPE_PROPRIETARY2 = 129,
    RVC_eRVCAGS_CRITERION_TYPE_PROPRIETARY3 = 130
} RVC_teRVCAGS_CRITERION_TYPE;

// Operating State, Loader
// Used in the following fields:
//   RVC_tzPGN_FILE_DNLD_STS.eOpState
typedef enum RVC_eOP_STATE_LDR
{
    RVC_eOP_STATE_LDR_WAIT_FILE_DL_INF  =   0,
    RVC_eOP_STATE_LDR_WAIT_FILE_DL_BLK  =   1,
    RVC_eOP_STATE_LDR_WRITING_BLK       =   2,
    RVC_eOP_STATE_LDR_CHECKING_FILE     =   3,
    RVC_eOP_STATE_LDR_WAIT_REBOOT       =   4,
    RVC_eOP_STATE_LDR_ERASING_BLK       =   5
} RVC_teOP_STATE_LDR;

// Configuration Parameter ID
// Used in the following fields:
//   RVC_tzPGN_PM_GET_CONFIG_PARAM.eCfgParamId
//   RVC_tzPGN_PM_SET_CONFIG_PARAM.eCfgParamId
typedef enum RVC_eCFG_PARAM_ID
{
    RVC_eCFG_PARAM_ID_DCDC_ENABLE_DISABLE =   0,
    RVC_eCFG_PARAM_ID_DEVICE_MODE       =   1,
    RVC_eCFG_PARAM_ID_ASSOCIATION       =   2,
    RVC_eCFG_PARAM_ID_AUXILIARY_CONFIGURATION =   3,
    RVC_eCFG_PARAM_ID_AUXILIARY_TRIGGER_LEVEL =   4,
    RVC_eCFG_PARAM_ID_AUXILIARY_TRIGGER_DELAY =   5,
    RVC_eCFG_PARAM_ID_AUDIBLE_ALARM_ENABLE_DISABLE =   6,
    RVC_eCFG_PARAM_ID_AUXILIARY_STATUS  =   7
} RVC_teCFG_PARAM_ID;

// AcXferSwMode
// Used in the following fields:
//   RVC_tzPGN_PM_AC_XFER_SW_STS.eXferSwMode
typedef enum RVC_eAC_XFER_SW_MODE
{
    RVC_eAC_XFER_SW_MODE_UNKNOWN        =   0,
    RVC_eAC_XFER_SW_MODE_GRID_PRIORITY  =   1,
    RVC_eAC_XFER_SW_MODE_GENERATOR_PRIORITY =   2,
    RVC_eAC_XFER_SW_MODE_INVERTER_PRIORITY =   3
} RVC_teAC_XFER_SW_MODE;

// Disconnect Status
// Used in the following fields:
//   RVC_tzPGN_BATT_STS6.eHiAmpDcSrcDisconSts
//   RVC_tzPGN_BATT_STS6.eHiDcSrcTempDisconSts
//   RVC_tzPGN_BATT_STS6.eLowDcSrcTempDisconSts
//   RVC_tzPGN_BATT_STS6.eLowSocDisconSts
//   RVC_tzPGN_BATT_STS6.eLowVoltDisconSts
//   RVC_tzPGN_BATT_STS6.eHiVoltDisconSts
//   RVC_tzPGN_DC_SRC_STS6.eHiAmpDcSrcDisconSts
//   RVC_tzPGN_DC_SRC_STS6.eHiDcSrcTempDisconSts
//   RVC_tzPGN_DC_SRC_STS6.eLowDcSrcTempDisconSts
//   RVC_tzPGN_DC_SRC_STS6.eLowSocDisconSts
//   RVC_tzPGN_DC_SRC_STS6.eLowVoltDisconSts
//   RVC_tzPGN_DC_SRC_STS6.eHiVoltDisconSts
typedef enum RVC_eDISCONNECT_STS
{
    RVC_eDISCONNECT_STS_CONNECTED       =   0,
    RVC_eDISCONNECT_STS_DISCONNECTED    =   1
} RVC_teDISCONNECT_STS;

// AC Line PM
// Used in the following fields:
//   RVC_tzPGN_PM_AC_STS_RMS.eLine
//   RVC_tzPGN_PM_INV_LD_SH_STS.eLine
typedef enum RVC_eAC_LINE_PM
{
    RVC_eAC_LINE_PM_INVALID             =   0,
    RVC_eAC_LINE_PM_LINE1               =   1,
    RVC_eAC_LINE_PM_LINE2               =   2,
    RVC_eAC_LINE_PM_LINE3               =   3,
    RVC_eAC_LINE_PM_RESERVED            =  13,
    RVC_eAC_LINE_PM_OUT_OF_RANGE        =  14,
    RVC_eAC_LINE_PM_DATA_NOT_AVAILABLE_DO_NOT_CHANGE =  15
} RVC_teAC_LINE_PM;

// AC Source Identifier
// Used in the following fields:
//   RVC_tzPGN_PM_AC_STS_RMS.eAcSrcId
//   RVC_tzPGN_PM_INV_CTRL_CMD.eAcSrcId
//   RVC_tzPGN_PM_INV_LD_SH_STS.eAcSrcId
//   RVC_tzPGN_PM_INV_STS.eAcSrcId
typedef enum RVC_eAC_SRC_ID
{
    RVC_eAC_SRC_ID_INVALID              =   0,
    RVC_eAC_SRC_ID_NONE                 =   1,
    RVC_eAC_SRC_ID_ANONYMOUS            =   2,
    RVC_eAC_SRC_ID_SHORE1               =   3,
    RVC_eAC_SRC_ID_SHORE2               =   4,
    RVC_eAC_SRC_ID_SHORE3               =   5,
    RVC_eAC_SRC_ID_SHORE4               =   6,
    RVC_eAC_SRC_ID_SHORE5               =   7,
    RVC_eAC_SRC_ID_SHORE6               =   8,
    RVC_eAC_SRC_ID_SHORE7               =   9,
    RVC_eAC_SRC_ID_SHORE8               =  10,
    RVC_eAC_SRC_ID_SHORE9               =  11,
    RVC_eAC_SRC_ID_SHORE10              =  12,
    RVC_eAC_SRC_ID_SHORE11              =  13,
    RVC_eAC_SRC_ID_SHORE12              =  14,
    RVC_eAC_SRC_ID_SHORE13              =  15,
    RVC_eAC_SRC_ID_SHORE14              =  16,
    RVC_eAC_SRC_ID_SHORE15              =  17,
    RVC_eAC_SRC_ID_SHORE16              =  18,
    RVC_eAC_SRC_ID_GEN1                 =  19,
    RVC_eAC_SRC_ID_GEN2                 =  20,
    RVC_eAC_SRC_ID_GEN3                 =  21,
    RVC_eAC_SRC_ID_GEN4                 =  22,
    RVC_eAC_SRC_ID_GEN5                 =  23,
    RVC_eAC_SRC_ID_GEN6                 =  24,
    RVC_eAC_SRC_ID_GEN7                 =  25,
    RVC_eAC_SRC_ID_GEN8                 =  26,
    RVC_eAC_SRC_ID_GEN9                 =  27,
    RVC_eAC_SRC_ID_GEN10                =  28,
    RVC_eAC_SRC_ID_GEN11                =  29,
    RVC_eAC_SRC_ID_GEN12                =  30,
    RVC_eAC_SRC_ID_GEN13                =  31,
    RVC_eAC_SRC_ID_GEN14                =  32,
    RVC_eAC_SRC_ID_GEN15                =  33,
    RVC_eAC_SRC_ID_GEN16                =  34,
    RVC_eAC_SRC_ID_AC1                  =  35,
    RVC_eAC_SRC_ID_AC2                  =  36,
    RVC_eAC_SRC_ID_AC3                  =  37,
    RVC_eAC_SRC_ID_AC4                  =  38,
    RVC_eAC_SRC_ID_AC5                  =  39,
    RVC_eAC_SRC_ID_AC6                  =  40,
    RVC_eAC_SRC_ID_AC7                  =  41,
    RVC_eAC_SRC_ID_AC8                  =  42,
    RVC_eAC_SRC_ID_AC9                  =  43,
    RVC_eAC_SRC_ID_AC10                 =  44,
    RVC_eAC_SRC_ID_AC11                 =  45,
    RVC_eAC_SRC_ID_AC12                 =  46,
    RVC_eAC_SRC_ID_AC13                 =  47,
    RVC_eAC_SRC_ID_AC14                 =  48,
    RVC_eAC_SRC_ID_AC15                 =  49,
    RVC_eAC_SRC_ID_AC16                 =  50,
    RVC_eAC_SRC_ID_AC_LOAD1             =  51,
    RVC_eAC_SRC_ID_AC_LOAD2             =  52,
    RVC_eAC_SRC_ID_AC_LOAD3             =  53,
    RVC_eAC_SRC_ID_AC_LOAD4             =  54,
    RVC_eAC_SRC_ID_AC_LOAD5             =  55,
    RVC_eAC_SRC_ID_AC_LOAD6             =  56,
    RVC_eAC_SRC_ID_AC_LOAD7             =  57,
    RVC_eAC_SRC_ID_AC_LOAD8             =  58,
    RVC_eAC_SRC_ID_AC_LOAD9             =  59,
    RVC_eAC_SRC_ID_AC_LOAD10            =  60,
    RVC_eAC_SRC_ID_AC_LOAD11            =  61,
    RVC_eAC_SRC_ID_AC_LOAD12            =  62,
    RVC_eAC_SRC_ID_AC_LOAD13            =  63,
    RVC_eAC_SRC_ID_AC_LOAD14            =  64,
    RVC_eAC_SRC_ID_AC_LOAD15            =  65,
    RVC_eAC_SRC_ID_AC_LOAD16            =  66,
    RVC_eAC_SRC_ID_GRID1                =  67,
    RVC_eAC_SRC_ID_GRID2                =  68,
    RVC_eAC_SRC_ID_GRID3                =  69,
    RVC_eAC_SRC_ID_GRID4                =  70,
    RVC_eAC_SRC_ID_GRID5                =  71,
    RVC_eAC_SRC_ID_GRID6                =  72,
    RVC_eAC_SRC_ID_GRID7                =  73,
    RVC_eAC_SRC_ID_GRID8                =  74,
    RVC_eAC_SRC_ID_GRID9                =  75,
    RVC_eAC_SRC_ID_GRID10               =  76,
    RVC_eAC_SRC_ID_GRID11               =  77,
    RVC_eAC_SRC_ID_GRID12               =  78,
    RVC_eAC_SRC_ID_GRID13               =  79,
    RVC_eAC_SRC_ID_GRID14               =  80,
    RVC_eAC_SRC_ID_GRID15               =  81,
    RVC_eAC_SRC_ID_GRID16               =  82,
    RVC_eAC_SRC_ID_ALL                  = 252,
    RVC_eAC_SRC_ID_RESERVED             = 253,
    RVC_eAC_SRC_ID_OUT_OF_RANGE         = 254,
    RVC_eAC_SRC_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} RVC_teAC_SRC_ID;

// DC Source Identifier
// Used in the following fields:
//   RVC_tzPGN_BATT_CMD.eDcInst
//   RVC_tzPGN_BATT_CMD.eBattInst
//   RVC_tzPGN_BATT_STS1.eBattInst
//   RVC_tzPGN_BATT_STS1.eDcInst
//   RVC_tzPGN_BATT_STS11.eDcInst
//   RVC_tzPGN_BATT_STS11.eBattInst
//   RVC_tzPGN_BATT_STS2.eDcInst
//   RVC_tzPGN_BATT_STS2.eBattInst
//   RVC_tzPGN_BATT_STS3.eDcInst
//   RVC_tzPGN_BATT_STS3.eBattInst
//   RVC_tzPGN_BATT_STS4.eBattInst
//   RVC_tzPGN_BATT_STS4.eDcInst
//   RVC_tzPGN_BATT_STS6.eBattInst
//   RVC_tzPGN_BATT_STS6.eDcInst
//   RVC_tzPGN_BATT_SUMM.eDcInst
//   RVC_tzPGN_BATT_SUMM.eBattInst
//   RVC_tzPGN_DC_SRC_CMD.eInst
//   RVC_tzPGN_DC_SRC_STS1.eInst
//   RVC_tzPGN_DC_SRC_STS11.eInst
//   RVC_tzPGN_DC_SRC_STS2.eInst
//   RVC_tzPGN_DC_SRC_STS3.eInst
//   RVC_tzPGN_DC_SRC_STS4.eInst
//   RVC_tzPGN_DC_SRC_STS6.eDcInst
//   RVC_tzPGN_PM_CHG_STS.eDcInOutAssocId
//   RVC_tzPGN_PM_LITHIONICS_CMD.eInst
//   RVC_tzPGN_PM_LITHIONICS_STS.eInst
typedef enum RVC_eDC_SRC_ID
{
    RVC_eDC_SRC_ID_INVALID              =   0,
    RVC_eDC_SRC_ID_MAIN_HOUSE_BATTERY_BANK =   1,
    RVC_eDC_SRC_ID_CHASSIS_START_BATTERY =   2,
    RVC_eDC_SRC_ID_SECONDARY_HOUSE_BATTERY_BANK =   3,
    RVC_eDC_SRC_ID_UNKNOWN_DO_NOT_CHANGE = 255
} RVC_teDC_SRC_ID;

// Source Quality
// Used in the following fields:
//   RVC_tzPGN_PM_AC_STS_RMS.eQuality
typedef enum RVC_eSRC_QUAL
{
    RVC_eSRC_QUAL_INVALID               =   0,
    RVC_eSRC_QUAL_BEING_QUALIFIED       =   1,
    RVC_eSRC_QUAL_BAD_FREQUENCY         =   2,
    RVC_eSRC_QUAL_BAD_LEVEL             =   3,
    RVC_eSRC_QUAL_GOOD                  =   4,
    RVC_eSRC_QUAL_FREQUENCY_LOW         =  21,
    RVC_eSRC_QUAL_FREQUENCY_HIGH        =  22,
    RVC_eSRC_QUAL_VOLTAGE_LOW           =  31,
    RVC_eSRC_QUAL_VOLTAGE_HIGH          =  32,
    RVC_eSRC_QUAL_RESERVED              = 253,
    RVC_eSRC_QUAL_OUT_OF_RANGE          = 254,
    RVC_eSRC_QUAL_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} RVC_teSRC_QUAL;

// Software Module Identifier
// Used in the following fields:
//   RVC_tzPGN_FILE_DNLD_INF.eSwModId
//   RVC_tzPGN_SW_VER_STS.eSwModId
typedef enum RVC_eSW_MOD_ID
{
    RVC_eSW_MOD_ID_XAN_BUS              =   0,
    RVC_eSW_MOD_ID_OPERATING_SYSTEM     =   1,
    RVC_eSW_MOD_ID_APPLICATION          =   2,
    RVC_eSW_MOD_ID_LOADER               =   3,
    RVC_eSW_MOD_ID_RESERVED2            =   4,
    RVC_eSW_MOD_ID_OTHER1               =   5,
    RVC_eSW_MOD_ID_OTHER2               =   6,
    RVC_eSW_MOD_ID_RESERVED             = 253,
    RVC_eSW_MOD_ID_OUT_OF_RANGE         = 254,
    RVC_eSW_MOD_ID_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} RVC_teSW_MOD_ID;

// Derating Reason
// Used in the following fields:
//   RVC_tzPGN_CHG_STS3.eDerateReason
typedef enum RVC_eDERATING_REASON
{
    RVC_eDERATING_REASON_NOT_DERATING   =   0,
    RVC_eDERATING_REASON_HIGH_INTERNAL_TEMPERATURE =   1,
    RVC_eDERATING_REASON_HIGH_BATTERY_TEMPERATURE =   2,
    RVC_eDERATING_REASON_BATTERY_VOLTAGE =   3,
    RVC_eDERATING_REASON_AC_INPUT_VOLTAGE =   4,
    RVC_eDERATING_REASON_AC_INPUT_CURRENT =   5
} RVC_teDERATING_REASON;

// RVC Qualification Status
// Used in the following fields:
//   RVC_tzPGN_CHG_AC_STS4.eQualifStat
//   RVC_tzPGN_INV_AC_STS4.eQualifStat
typedef enum RVC_eRVC_QUALIFICATION_STS
{
    RVC_eRVC_QUALIFICATION_STS_UNQUALIFIED_NO_AC_PRESENT =   0,
    RVC_eRVC_QUALIFICATION_STS_UNQUALIFIED_BAD_AC =   1,
    RVC_eRVC_QUALIFICATION_STS_WAITINGTO_QUALIFY =   2,
    RVC_eRVC_QUALIFICATION_STS_QUALIFYING =   3,
    RVC_eRVC_QUALIFICATION_STS_QUALIFIED_GOOD_AC =   4,
    RVC_eRVC_QUALIFICATION_STS_UNDEFINED_VALUE =  15
} RVC_teRVC_QUALIFICATION_STS;

// Time Remain Interp
// Used in the following fields:
//   RVC_tzPGN_BATT_STS2.eTimeRemainInterp
//   RVC_tzPGN_DC_SRC_STS2.eTimeRemainInterp
typedef enum RVC_eTIME_REMAIN_INTERP
{
    RVC_eTIME_REMAIN_INTERP_TIMETO_EMPTY =   0,
    RVC_eTIME_REMAIN_INTERP_TIMETO_FULL =   1
} RVC_teTIME_REMAIN_INTERP;

// Download Result Code
// Used in the following fields:
//   RVC_tzPGN_FILE_DNLD_STS.eResultCode
typedef enum RVC_eDL_RESULT_CODE
{
    RVC_eDL_RESULT_CODE_NO_ERROR        =   0,
    RVC_eDL_RESULT_CODE_INVALID_FILE_DL_INF =   1,
    RVC_eDL_RESULT_CODE_INVALID_FILE_DL_BLK =   2,
    RVC_eDL_RESULT_CODE_BLK_WRITE_ERR   =   3,
    RVC_eDL_RESULT_CODE_FILE_CRC_ERR    =   4
} RVC_teDL_RESULT_CODE;

// RVC Pre-Charging Status
// Used in the following fields:
//   RVC_tzPGN_CHG_EQLZ_STS.ePreChgSts
typedef enum RVC_eRVC_PRE_CHG_STS
{
    RVC_eRVC_PRE_CHG_STS_NOTPRECHARGING =   0,
    RVC_eRVC_PRE_CHG_STS_PRECHARGINGFOREQUALIZATION =   1,
    RVC_eRVC_PRE_CHG_STS_RESERVED       =   2,
    RVC_eRVC_PRE_CHG_STS_UNDEFINED_VALUE =   3
} RVC_teRVC_PRE_CHG_STS;

// RVC AC Waveform
// Used in the following fields:
//   RVC_tzPGN_CHG_AC_STS3.eWaveform
//   RVC_tzPGN_INV_AC_STS3.eWaveform
typedef enum RVC_eRVCAC_WAVEFORM
{
    RVC_eRVCAC_WAVEFORM_TRUE_SINE_WAVE  =   0,
    RVC_eRVCAC_WAVEFORM_NOT_SINE_WAVE   =   1,
    RVC_eRVCAC_WAVEFORM_RESERVED        =   2,
    RVC_eRVCAC_WAVEFORM_NO_DATA         =   3
} RVC_teRVCAC_WAVEFORM;

// RVC Force Charge
// Used in the following fields:
//   RVC_tzPGN_CHG_CMD.eForceChg
//   RVC_tzPGN_CHG_STS.eForceChg
//   RVC_tzPGN_SCC_CMD.eForceChg
//   RVC_tzPGN_SCC_STS.eForceChg
typedef enum RVC_eRVC_FORCE_CHG
{
    RVC_eRVC_FORCE_CHG_CHARGING_NOT_FORCED =   0,
    RVC_eRVC_FORCE_CHG_FORCE_CHARGE_TO_BULK =   1,
    RVC_eRVC_FORCE_CHG_FORCE_CHARGE_TO_FLOAT =   2,
    RVC_eRVC_FORCE_CHG_NO_CHANGE        =  14,
    RVC_eRVC_FORCE_CHG_UNDEFINED        =  15
} RVC_teRVC_FORCE_CHG;

// RVC Voltage Fault
// Used in the following fields:
//   RVC_tzPGN_CHG_AC_STS4.eVFlt
//   RVC_tzPGN_INV_AC_STS4.eVFlt
typedef enum RVC_eRVCV_FLT
{
    RVC_eRVCV_FLT_VOLTAGE_OK            =   0,
    RVC_eRVCV_FLT_EXTREMELY_LOW_VOLTAGE =   1,
    RVC_eRVCV_FLT_LOW_VOLTAGE           =   2,
    RVC_eRVCV_FLT_HIGH_VOLTAGE          =   3,
    RVC_eRVCV_FLT_EXTREMELY_HIGH_VOLTAGE =   4,
    RVC_eRVCV_FLT_OPEN_LINE1DETECTED    =   5,
    RVC_eRVCV_FLT_OPEN_LINE2DETECTED    =   6,
    RVC_eRVCV_FLT_RESERVED              = 252,
    RVC_eRVCV_FLT_OUT_OF_RANGE          = 254,
    RVC_eRVCV_FLT_DATA_NOT_AVAILABLE    = 255
} RVC_teRVCV_FLT;

// RVC Device Priority
// Used in the following fields:
//   RVC_tzPGN_CHG_STS2.eChgPrio
//   RVC_tzPGN_DC_SRC_STS1.eDevPri
//   RVC_tzPGN_DC_SRC_STS11.eDevPri
//   RVC_tzPGN_DC_SRC_STS2.eDevPri
//   RVC_tzPGN_DC_SRC_STS3.eDevPri
//   RVC_tzPGN_DC_SRC_STS4.eDevPri
//   RVC_tzPGN_DC_SRC_STS6.eDevPri
typedef enum RVC_eRVC_DEVICE_PRIORITY
{
    RVC_eRVC_DEVICE_PRIORITY_VOLTMETER  =  20,
    RVC_eRVC_DEVICE_PRIORITY_VOLTMETER_AMMETER =  40,
    RVC_eRVC_DEVICE_PRIORITY_INVERTER   =  60,
    RVC_eRVC_DEVICE_PRIORITY_CHARGER    =  80,
    RVC_eRVC_DEVICE_PRIORITY_INVERTER_CHARGER = 100,
    RVC_eRVC_DEVICE_PRIORITY_BATTERY_SOC_DEVICE = 120,
    RVC_eRVC_DEVICE_PRIORITY_NO_DATA    = 255
} RVC_teRVC_DEVICE_PRIORITY;

// Association Type
// Used in the following fields:
//   RVC_tzPGN_PM_ASSOC_CFG.eAssocType
//   RVC_tzPGN_PM_ASSOC_STS.eAssocType
//   RVC_tzPGN_PM_PARAM_ASSOC_CFG.eAssocType
typedef enum RVC_eASSN_TYPE
{
    RVC_eASSN_TYPE_INVALID              =   0,
    RVC_eASSN_TYPE_DC_INPUT             =   1,
    RVC_eASSN_TYPE_DC_OUT               =   2,
    RVC_eASSN_TYPE_DC_INPUT_OUT         =   3,
    RVC_eASSN_TYPE_RESERVED             =   4,
    RVC_eASSN_TYPE_AC_INPUT             =   5,
    RVC_eASSN_TYPE_AC_OUT               =   6,
    RVC_eASSN_TYPE_AC_INPUT_OUT         =   7
} RVC_teASSN_TYPE;

// Inverter Mode
// Used in the following fields:
//   RVC_tzPGN_PM_INV_STS.eInvMode
typedef enum RVC_eINV_MODE
{
    RVC_eINV_MODE_INVALID               =   0,
    RVC_eINV_MODE_SINGLE_PHASE_STAND_ALONE =   1,
    RVC_eINV_MODE_SINGLE_PHASE_MASTER   =  11,
    RVC_eINV_MODE_SINGLE_PHASE_SLAVE    =  12,
    RVC_eINV_MODE_SPLIT_PHASE_STAND_ALONE =  20,
    RVC_eINV_MODE_SPLIT_PHASE_MASTER    =  21,
    RVC_eINV_MODE_SPLIT_PHASE_SLAVE     =  22,
    RVC_eINV_MODE_TWO_PHASE_PHASE1MASTER =  23,
    RVC_eINV_MODE_TWO_PHASE_PHASE1SLAVE =  24,
    RVC_eINV_MODE_TWO_PHASE_PHASE2MASTER =  25,
    RVC_eINV_MODE_TWO_PHASE_PHASE2SLAVE =  26,
    RVC_eINV_MODE_THREE_PHASE_STAND_ALONE =  30,
    RVC_eINV_MODE_THREE_PHASE_MASTER    =  31,
    RVC_eINV_MODE_THREE_PHASE_SLAVE     =  32,
    RVC_eINV_MODE_THREE_PHASE_PHASE1MASTER =  33,
    RVC_eINV_MODE_THREE_PHASE_PHASE1SLAVE =  34,
    RVC_eINV_MODE_THREE_PHASE_PHASE2MASTER =  35,
    RVC_eINV_MODE_THREE_PHASE_PHASE2SLAVE =  36,
    RVC_eINV_MODE_THREE_PHASE_PHASE3MASTER =  37,
    RVC_eINV_MODE_THREE_PHASE_PHASE3SLAVE =  38,
    RVC_eINV_MODE_RESERVED              = 253,
    RVC_eINV_MODE_OUT_OF_RANGE          = 254,
    RVC_eINV_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} RVC_teINV_MODE;

// Prop Msg ID
// Used in the following fields:
//   RVC_tzPGN_PM_AC_STS_RMS.eMsgId
//   RVC_tzPGN_PM_AC_XFER_SW_STS.eMsgId
//   RVC_tzPGN_PM_ASSOC_CFG.eMsgId
//   RVC_tzPGN_PM_ASSOC_STS.eMsgId
//   RVC_tzPGN_PM_CHG_STS.eMsgId
//   RVC_tzPGN_PM_DEV_MD_CFG.eMsgId
//   RVC_tzPGN_PM_DEV_MD_STS.eMsgId
//   RVC_tzPGN_PM_FXCC_CFG_CMD.eMsgId
//   RVC_tzPGN_PM_FXCC_CFG_STS.eMsgId
//   RVC_tzPGN_PM_GET_CONFIG_PARAM.eMsgId
//   RVC_tzPGN_PM_GET_STATUS_PARAM.eMsgId
//   RVC_tzPGN_PM_INV_CTRL_CMD.eMsgId
//   RVC_tzPGN_PM_INV_LD_SH_STS.eMsgId
//   RVC_tzPGN_PM_INV_STS.eMsgId
//   RVC_tzPGN_PM_LITHIONICS_CMD.eMsgId
//   RVC_tzPGN_PM_LITHIONICS_STS.eMsgId
//   RVC_tzPGN_PM_PPN_NAK_RSP.eMsgId
//   RVC_tzPGN_PM_PPN_READ_CMD.eMsgId
//   RVC_tzPGN_PM_PPN_READ_RSP.eMsgId
//   RVC_tzPGN_PM_PPN_SESSION_CMD.eMsgId
//   RVC_tzPGN_PM_PPN_SESSION_RSP.eMsgId
//   RVC_tzPGN_PM_PPN_WRITE_CMD.eMsgId
//   RVC_tzPGN_PM_PPN_WRITE_RSP.eMsgId
//   RVC_tzPGN_PM_REQ.eMsgId
//   RVC_tzPGN_PM_REQ.eReqId
//   RVC_tzPGN_PM_RPC_CMD.eMsgId
//   RVC_tzPGN_PM_SET_CONFIG_PARAM.eMsgId
//   RVC_tzPGN_PM_SW_VER_STS.eMsgId
typedef enum RVC_ePROP_MSG_ID
{
    RVC_ePROP_MSG_ID_INVALID            =   0,
    RVC_ePROP_MSG_ID_ASSOC_CFG          =   1,
    RVC_ePROP_MSG_ID_REQUEST            =   2,
    RVC_ePROP_MSG_ID_ASSOC_STS          =   3,
    RVC_ePROP_MSG_ID_DEV_MODE_CFG       =   4,
    RVC_ePROP_MSG_ID_FXCC_CFG_CMD       =   5,
    RVC_ePROP_MSG_ID_DEV_MODE_STS       =   6,
    RVC_ePROP_MSG_ID_FXCC_CFG_STS       =   7,
    RVC_ePROP_MSG_ID_SW_VER_STS         =   8,
    RVC_ePROP_MSG_ID_RPC_CMD            =   9,
    RVC_ePROP_MSG_ID_INV_LS_STS         =  10,
    RVC_ePROP_MSG_ID_INV_STS            =  11,
    RVC_ePROP_MSG_ID_CHG_STS            =  12,
    RVC_ePROP_MSG_ID_INV_CTRL_CMD       =  14,
    RVC_ePROP_MSG_ID_AC_STS_RMS         =  15,
    RVC_ePROP_MSG_ID_AC_XFER_SW_STS     =  16,
    RVC_ePROP_MSG_ID_GET_CONFIGURATION_PARAMETER =  17,
    RVC_ePROP_MSG_ID_SET_CONFIGURATION_PARAMETER =  18,
    RVC_ePROP_MSG_ID_GET_STATUS_PARAMETER =  19,
    RVC_ePROP_MSG_ID_PPN_SESSION_CMD    =  96,
    RVC_ePROP_MSG_ID_PPN_SESSION_RSP    =  97,
    RVC_ePROP_MSG_ID_PPN_READ_CMD       =  98,
    RVC_ePROP_MSG_ID_PPN_READ_RSP       =  99,
    RVC_ePROP_MSG_ID_PPN_WRITE_CMD      = 100,
    RVC_ePROP_MSG_ID_PPN_WRITE_RSP      = 101,
    RVC_ePROP_MSG_ID_PPN_NAK_RSP        = 127,
    RVC_ePROP_MSG_ID_LITHIONICS_CMD     = 170,
    RVC_ePROP_MSG_ID_LITHIONICS_STS     = 171
} RVC_tePROP_MSG_ID;

// Ignition Control Status
// Used in the following fields:
//   RVC_tzPGN_PM_FXCC_CFG_CMD.eInvIgnCtrl
//   RVC_tzPGN_PM_FXCC_CFG_STS.eInvIgnCtrl
typedef enum RVC_eIGNITION_CTRL_STS
{
    RVC_eIGNITION_CTRL_STS_OFF          =   0,
    RVC_eIGNITION_CTRL_STS_LOCK_OUT     =   1,
    RVC_eIGNITION_CTRL_STS_AUTO_OFF     =   2,
    RVC_eIGNITION_CTRL_STS_ERROR        =   3
} RVC_teIGNITION_CTRL_STS;

// Cal Data Point
// Used in the following fields:
//   RVC_tzPGN_SIMPLE_CALIB_CFG.eDataPtId
typedef enum RVC_eCAL_DATA_POINT
{
    RVC_eCAL_DATA_POINT_BATTERY_CURRENT =   1,
    RVC_eCAL_DATA_POINT_BATTERY_VOLTAGE =   2,
    RVC_eCAL_DATA_POINT_APS_VOLTAGE     =   3,
    RVC_eCAL_DATA_POINT_AC1_IN_CURRENT_L1 =   4,
    RVC_eCAL_DATA_POINT_AC1_IN_CURRENT_L2 =   5,
    RVC_eCAL_DATA_POINT_AC1_IN_VOLTAGE_L1 =   6,
    RVC_eCAL_DATA_POINT_AC1_IN_VOLTAGE_L2 =   7,
    RVC_eCAL_DATA_POINT_AC1_IN_VOLTAGE_L1L2 =   8,
    RVC_eCAL_DATA_POINT_AC2_IN_CURRENT_L1 =   9,
    RVC_eCAL_DATA_POINT_AC2_IN_CURRENT_L2 =  10,
    RVC_eCAL_DATA_POINT_AC2_IN_VOLTAGE_L1 =  11,
    RVC_eCAL_DATA_POINT_AC2_IN_VOLTAGE_L2 =  12,
    RVC_eCAL_DATA_POINT_AC2_IN_VOLTAGE_L1L2 =  13,
    RVC_eCAL_DATA_POINT_AC_OUT_VOLTAGE  =  14,
    RVC_eCAL_DATA_POINT_AC_OUT_CURRENT  =  15,
    RVC_eCAL_DATA_POINT_AC_OUT_HI_RES_CURRENT =  16,
    RVC_eCAL_DATA_POINT_AC_OUT_CURRENT_L1 =  17,
    RVC_eCAL_DATA_POINT_AC_OUT_CURRENT_L2 =  18,
    RVC_eCAL_DATA_POINT_REF_AC_OUT_VOLTAGE_RMS =  19,
    RVC_eCAL_DATA_POINT_REF_DC_OUT_VOLTAGE =  20,
    RVC_eCAL_DATA_POINT_REF_DC_OUT_CURRENT =  21,
    RVC_eCAL_DATA_POINT_DC_DC_OUT_CURRENT =  22,
    RVC_eCAL_DATA_POINT_DC_DC_OUT_VOLTAGE =  23
} RVC_teCAL_DATA_POINT;

// AC Connection PM
// Used in the following fields:
//   RVC_tzPGN_PM_AC_STS_RMS.eAcConn
typedef enum RVC_eAC_CONNECTION_PM
{
    RVC_eAC_CONNECTION_PM_INVALID       =   0,
    RVC_eAC_CONNECTION_PM_AC_INPUT1     =   1,
    RVC_eAC_CONNECTION_PM_AC_INPUT2     =   2,
    RVC_eAC_CONNECTION_PM_AC_INPUT3     =   3,
    RVC_eAC_CONNECTION_PM_AC_INPUT4     =   4,
    RVC_eAC_CONNECTION_PM_AC_OUTPUT1    =   5,
    RVC_eAC_CONNECTION_PM_AC_OUTPUT2    =   6,
    RVC_eAC_CONNECTION_PM_AC_OUTPUT3    =   7,
    RVC_eAC_CONNECTION_PM_AC_OUTPUT4    =   8,
    RVC_eAC_CONNECTION_PM_RESERVED      =  13,
    RVC_eAC_CONNECTION_PM_OUT_OF_RANGE  =  14,
    RVC_eAC_CONNECTION_PM_DATA_NOT_AVAILABLE_DO_NOT_CHANGE =  15
} RVC_teAC_CONNECTION_PM;

// Auxiliary Operating State
// Used in the following fields:
//   RVC_tzPGN_PM_PARAM_AUX_STS.eOpState
typedef enum RVC_eAUX_OP_STATE
{
    RVC_eAUX_OP_STATE_AUTO_ON           =   0,
    RVC_eAUX_OP_STATE_AUTO_OFF          =   1,
    RVC_eAUX_OP_STATE_MANUAL_ON         =   2,
    RVC_eAUX_OP_STATE_MANUAL_OFF        =   3
} RVC_teAUX_OP_STATE;

// Auxiliary Trigger Id
// Used in the following fields:
//   RVC_tzPGN_PM_PARAM_AUX_CFG.eClrTrigger
//   RVC_tzPGN_PM_PARAM_AUX_CFG.eSetTrigger
//   RVC_tzPGN_PM_PARAM_AUX_CFG_TRIG_DLY.eTriggerId
//   RVC_tzPGN_PM_PARAM_AUX_CFG_TRIG_LVL.eTriggerId
typedef enum RVC_eAUX_TRIGGER_ID
{
    RVC_eAUX_TRIGGER_ID_BATTERY_VOLTAGE_LOW_SET =   0,
    RVC_eAUX_TRIGGER_ID_BATTERY_VOLTAGE_LOW_CLR =   1,
    RVC_eAUX_TRIGGER_ID_BATTERY_VOLTAGE_HIGH_SET =   2,
    RVC_eAUX_TRIGGER_ID_BATTERY_VOLTAGE_HIGH_CLR =   3,
    RVC_eAUX_TRIGGER_ID_BATTERY_TEMP_LOW_SET =   4,
    RVC_eAUX_TRIGGER_ID_BATTERY_TEMP_LOW_CLR =   5,
    RVC_eAUX_TRIGGER_ID_BATTERY_TEMP_HIGH_SET =   6,
    RVC_eAUX_TRIGGER_ID_BATTERY_TEMP_HIGH_CLR =   7,
    RVC_eAUX_TRIGGER_ID_FAULT_SET       =   8,
    RVC_eAUX_TRIGGER_ID_FAULT_CLR       =   9,
    RVC_eAUX_TRIGGER_ID_AC_GOOD_SET     =  10,
    RVC_eAUX_TRIGGER_ID_AC_GOOD_CLR     =  11,
    RVC_eAUX_TRIGGER_ID_BULK_EXIT_CLR   =  12,
    RVC_eAUX_TRIGGER_ID_ABSORPTION_EXIT_CLR =  13,
    RVC_eAUX_TRIGGER_ID_INTERNAL_TEMP_HIGH_SET =  14,
    RVC_eAUX_TRIGGER_ID_INTERNAL_TEMP_HIGH_CLR =  15,
    RVC_eAUX_TRIGGER_ID_TIME_OF_DAY_SET =  16,
    RVC_eAUX_TRIGGER_ID_TIME_OF_DAY_CLR =  17
} RVC_teAUX_TRIGGER_ID;

// RVC Desired Charger State
// Used in the following fields:
//   RVC_tzPGN_BATT_STS4.eDesChgState
//   RVC_tzPGN_DC_SRC_STS4.eDesChgState
//   RVC_tzPGN_SCC_STS.eOpState
typedef enum RVC_eRVC_DESIRED_CHG_STATE
{
    RVC_eRVC_DESIRED_CHG_STATE_UNDEFINED_SOURCE_DECIDES =   0,
    RVC_eRVC_DESIRED_CHG_STATE_DO_NOT_CHARGE =   1,
    RVC_eRVC_DESIRED_CHG_STATE_BULK     =   2,
    RVC_eRVC_DESIRED_CHG_STATE_ABSORPTION =   3,
    RVC_eRVC_DESIRED_CHG_STATE_OVERCHARGE =   4,
    RVC_eRVC_DESIRED_CHG_STATE_EQUALIZE =   5,
    RVC_eRVC_DESIRED_CHG_STATE_FLOAT    =   6,
    RVC_eRVC_DESIRED_CHG_STATE_CVCC     =   7,
    RVC_eRVC_DESIRED_CHG_STATE_NO_DATA  = 255
} RVC_teRVC_DESIRED_CHG_STATE;

// Status Bit
// Used in the following fields:
//   RVC_tzPGN_PM_LITHIONICS_STS.eCntctFlutter
//   RVC_tzPGN_PM_LITHIONICS_STS.eChgSrcDet
//   RVC_tzPGN_PM_LITHIONICS_STS.eNeverDieResState
//   RVC_tzPGN_PM_LITHIONICS_STS.eOptoLoopOpen
//   RVC_tzPGN_PM_LITHIONICS_STS.eResVoltageRange
//   RVC_tzPGN_PM_LITHIONICS_STS.eLowVoltageState
//   RVC_tzPGN_PM_LITHIONICS_STS.eBattProtState
//   RVC_tzPGN_PM_LITHIONICS_STS.ePwrOffState
//   RVC_tzPGN_PM_LITHIONICS_STS.eAuxCntctState
//   RVC_tzPGN_PM_LITHIONICS_STS.eHighVoltageState
//   RVC_tzPGN_PM_LITHIONICS_STS.ePreChgErr
//   RVC_tzPGN_PM_LITHIONICS_STS.eOverCurrState
//   RVC_tzPGN_PM_LITHIONICS_STS.eAcPwrPres
//   RVC_tzPGN_PM_LITHIONICS_STS.eTsmChgPres
//   RVC_tzPGN_PM_LITHIONICS_STS.eTsmChgErr
//   RVC_tzPGN_PM_LITHIONICS_STS.eTempInterSensErr
//   RVC_tzPGN_PM_LITHIONICS_STS.eAgsrState
//   RVC_tzPGN_PM_LITHIONICS_STS.eHotTempState
//   RVC_tzPGN_PM_LITHIONICS_STS.eColdTempState
//   RVC_tzPGN_PM_LITHIONICS_STS.eAuxIn1State
//   RVC_tzPGN_PM_LITHIONICS_STS.eChgDisState
//   RVC_tzPGN_PM_LITHIONICS_STS.eAuxCntctErr
typedef enum RVC_eSTS_BIT
{
    RVC_eSTS_BIT_OFF                    =   0,
    RVC_eSTS_BIT_ON                     =   1
} RVC_teSTS_BIT;

// Operating State, Charger
// Used in the following fields:
//   RVC_tzPGN_PM_CHG_STS.eOpState
typedef enum RVC_eOP_STATE_CHG
{
    RVC_eOP_STATE_CHG_NOT_CHARGING      =   0,
    RVC_eOP_STATE_CHG_BULK              =   1,
    RVC_eOP_STATE_CHG_ABSORPTION        =   2,
    RVC_eOP_STATE_CHG_OVERCHARGE        =   3,
    RVC_eOP_STATE_CHG_EQUALIZE          =   4,
    RVC_eOP_STATE_CHG_FLOAT             =   5,
    RVC_eOP_STATE_CHG_NO_FLOAT          =   6,
    RVC_eOP_STATE_CHG_CONSTANT_VI       =   7,
    RVC_eOP_STATE_CHG_CHARGER_DISABLED  =   8,
    RVC_eOP_STATE_CHG_QUALIFYING_AC     =   9,
    RVC_eOP_STATE_CHG_QUALIFYING_APS    =  10,
    RVC_eOP_STATE_CHG_ENGAGING_CHARGER  =  11,
    RVC_eOP_STATE_CHG_CHARGE_FAULT      =  12,
    RVC_eOP_STATE_CHG_CHARGER_SUSPEND   =  13,
    RVC_eOP_STATE_CHG_AC_GOOD           =  14,
    RVC_eOP_STATE_CHG_APS_GOOD          =  15,
    RVC_eOP_STATE_CHG_AC_FAULT          =  16,
    RVC_eOP_STATE_CHG_CHARGE            =  17,
    RVC_eOP_STATE_CHG_ABSORPTION_EXIT_PENDING =  18,
    RVC_eOP_STATE_CHG_GROUND_FAULT      =  19,
    RVC_eOP_STATE_CHG_AC_GOOD_PENDING   =  20,
    RVC_eOP_STATE_CHG_LOAD_SHAVING      =  21,
    RVC_eOP_STATE_CHG_AC_SUPPORT        =  22,
    RVC_eOP_STATE_CHG_AC_COUPLED        =  23,
    RVC_eOP_STATE_CHG_AC_COUPLED_BULK   =  24,
    RVC_eOP_STATE_CHG_AC_COUPLED_ABSORPTION =  25,
    RVC_eOP_STATE_CHG_AC_COUPLED_FLOAT  =  26,
    RVC_eOP_STATE_CHG_AC_COUPLED_NO_FLOAT =  27,
    RVC_eOP_STATE_CHG_EXTERNAL_BMS      =  28,
    RVC_eOP_STATE_CHG_LOAD_SENSE        =  29
} RVC_teOP_STATE_CHG;

// Module Count
// Used in the following fields:
//   RVC_tzPGN_BATT_SUMM.eModuleCnt
typedef enum RVC_eMOD_COUNT
{
    RVC_eMOD_COUNT_CELL_NOT_BALANCE     =   0,
    RVC_eMOD_COUNT_BALANCE_PROCESS_ACTIVE =   1
} RVC_teMOD_COUNT;

// Session Status
// Used in the following fields:
//   RVC_tzPGN_PM_PPN_SESSION_CMD.eSessEnDis
//   RVC_tzPGN_PM_PPN_SESSION_RSP.eSessEnDis
typedef enum RVC_eSESSION_STS
{
    RVC_eSESSION_STS_OFF                =   0,
    RVC_eSESSION_STS_ON                 =   1,
    RVC_eSESSION_STS_RESERVED           = 254,
    RVC_eSESSION_STS_NO_DATA            = 255
} RVC_teSESSION_STS;

// Status Parameter ID
// Used in the following fields:
//   RVC_tzPGN_PM_GET_STATUS_PARAM.eStsParamId
typedef enum RVC_eSTS_PARAM_ID
{
    RVC_eSTS_PARAM_ID_DCDC_VOLTAGE      =   0,
    RVC_eSTS_PARAM_ID_DCDC_CURRENT      =   1,
    RVC_eSTS_PARAM_ID_AUXILIARY_STATUS  =   2
} RVC_teSTS_PARAM_ID;

// DC Source Function
// Used in the following fields:
//   RVC_tzPGN_DC_SRC_CFG_CMD3.eFunction
//   RVC_tzPGN_DC_SRC_CONN_STS.eFunction
typedef enum RVC_eDC_SRC_FUNC
{
    RVC_eDC_SRC_FUNC_INVALID            =   0,
    RVC_eDC_SRC_FUNC_SOURCE_CONNECTION  =   1,
    RVC_eDC_SRC_FUNC_LOAD_CONNECTION    =   2,
    RVC_eDC_SRC_FUNC_PRIMARY_TO_SECONDARY_BRIDGE =   3,
    RVC_eDC_SRC_FUNC_MAIN_BATTERY_CONTACTOR =   4,
    RVC_eDC_SRC_FUNC_RESERVED1          =   5,
    RVC_eDC_SRC_FUNC_RESERVED2          =   6,
    RVC_eDC_SRC_FUNC_RESERVED3          =   7,
    RVC_eDC_SRC_FUNC_RESERVED4          =   8,
    RVC_eDC_SRC_FUNC_RESERVED5          =   9,
    RVC_eDC_SRC_FUNC_RESERVED6          =  10,
    RVC_eDC_SRC_FUNC_RESERVED7          =  11,
    RVC_eDC_SRC_FUNC_RESERVED8          =  12,
    RVC_eDC_SRC_FUNC_RESERVED9          =  13,
    RVC_eDC_SRC_FUNC_RESERVED10         =  14,
    RVC_eDC_SRC_FUNC_UNSPECIFIED        =  15
} RVC_teDC_SRC_FUNC;

// Charger Mode
// Used in the following fields:
//   RVC_tzPGN_PM_CHG_STS.eChgMode
typedef enum RVC_eCHG_MODE
{
    RVC_eCHG_MODE_STANDALONE            =   0,
    RVC_eCHG_MODE_PRIMARY               =   1,
    RVC_eCHG_MODE_SECONDARY             =   2,
    RVC_eCHG_MODE_ECHO                  =   3,
    RVC_eCHG_MODE_RESERVED              = 253,
    RVC_eCHG_MODE_OUTOF_RANGE           = 254,
    RVC_eCHG_MODE_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} RVC_teCHG_MODE;

// Operating State, Inverter
// Used in the following fields:
//   RVC_tzPGN_PM_INV_STS.eOpState
typedef enum RVC_eOP_STATE_INV
{
    RVC_eOP_STATE_INV_INVERT            =   0,
    RVC_eOP_STATE_INV_AC_PASSTHRU       =   1,
    RVC_eOP_STATE_INV_APS_ONLY          =   2,
    RVC_eOP_STATE_INV_LOAD_SENSE_ACTIVE =   3,
    RVC_eOP_STATE_INV_INVERTER_DISABLED =   4,
    RVC_eOP_STATE_INV_LOAD_SENSE_READY  =   5,
    RVC_eOP_STATE_INV_ENGAGING_INVERTER =   6,
    RVC_eOP_STATE_INV_INVERT_FAULT      =   7,
    RVC_eOP_STATE_INV_INVERTER_STANDBY  =   8,
    RVC_eOP_STATE_INV_GRID_TIED         =   9,
    RVC_eOP_STATE_INV_GRID_SUPPORT      =  10,
    RVC_eOP_STATE_INV_GEN_SUPPORT       =  11,
    RVC_eOP_STATE_INV_SELL_TO_GRID      =  12,
    RVC_eOP_STATE_INV_LOAD_SHAVING      =  13,
    RVC_eOP_STATE_INV_GRID_FREQUENCY_STABILIZATION =  14,
    RVC_eOP_STATE_INV_AC_COUPLING       =  15,
    RVC_eOP_STATE_INV_REVERSE_IBATT     =  16
} RVC_teOP_STATE_INV;

// XB Reset Command
// Used in the following fields:
//   RVC_tzPGN_XB_RESET_CMD.eCmd
typedef enum RVC_eXB_RST_CMD
{
    RVC_eXB_RST_CMD_REBOOT              =   0,
    RVC_eXB_RST_CMD_REBOOT_DL_MODE      =   1,
    RVC_eXB_RST_CMD_FACTORY             =   2,
    RVC_eXB_RST_CMD_OEM                 =   3,
    RVC_eXB_RST_CMD_CLEAR_NV_AND_REBOOT =   4,
    RVC_eXB_RST_CMD_NO_CHANGE           = 252,
    RVC_eXB_RST_CMD_RESERVED            = 253,
    RVC_eXB_RST_CMD_OUT_OF_RANGE        = 254,
    RVC_eXB_RST_CMD_DATA_NOT_AVAILABLE_DO_NOT_CHANGE = 255
} RVC_teXB_RST_CMD;

// Derating Status
// Used in the following fields:
//   RVC_tzPGN_CHG_STS3.eDerateSts
typedef enum RVC_eDERATING_STS
{
    RVC_eDERATING_STS_CHARGER_NOT_DERATING =   0,
    RVC_eDERATING_STS_CHARGER_DERATING  =   1
} RVC_teDERATING_STS;

// AC Line Number
// Used in the following fields:
//   RVC_tzPGN_CHG_AC_FLT_CFG_CMD1.eLine
//   RVC_tzPGN_CHG_AC_FLT_CFG_CMD2.eLine
//   RVC_tzPGN_CHG_AC_FLT_CFG_STS1.eLine
//   RVC_tzPGN_CHG_AC_FLT_CFG_STS2.eLine
//   RVC_tzPGN_CHG_AC_STS1.eLine
//   RVC_tzPGN_CHG_AC_STS2.eLine
//   RVC_tzPGN_CHG_AC_STS3.eLine
//   RVC_tzPGN_CHG_AC_STS4.eLine
//   RVC_tzPGN_CHG_CFG_CMD1.eChgInstLine
//   RVC_tzPGN_CHG_CFG_STS1.eChgInstLine
//   RVC_tzPGN_INV_AC_STS1.eLine
//   RVC_tzPGN_INV_AC_STS2.eLine
//   RVC_tzPGN_INV_AC_STS3.eLine
//   RVC_tzPGN_INV_AC_STS4.eLine
typedef enum RVC_eAC_LINE_NUM
{
    RVC_eAC_LINE_NUM_LINE1              =   0,
    RVC_eAC_LINE_NUM_LINE2              =   1,
    RVC_eAC_LINE_NUM_RESERVED           =   2,
    RVC_eAC_LINE_NUM_UNDEFINED          =   3
} RVC_teAC_LINE_NUM;

// Auxiliary Active Level
// Used in the following fields:
//   RVC_tzPGN_PM_PARAM_AUX_CFG.eActiveLevel
typedef enum RVC_eAUX_ACTIVE_LVL
{
    RVC_eAUX_ACTIVE_LVL_ACTIVE_LOW      =   0,
    RVC_eAUX_ACTIVE_LVL_ACTIVE_HIGH     =   1,
    RVC_eAUX_ACTIVE_LVL_DATA_NOT_SUPPORTED =   2
} RVC_teAUX_ACTIVE_LVL;


    // The structures for each PGN

// ISO Acknowledgment
typedef struct RVC_zPGN_ISO_ACK
{
    RVC_teACK_STS teCtrlByte;       // Control Byte
    RVC_teGRP_FUNC_VALUE teGroupFunctionValue; // Group Function Value
    uint32 ulParmGrpNum;            // PGN of Requested Information
} RVC_tzPGN_ISO_ACK;

// Parameter Device Mode Config
typedef struct RVC_zPGN_PM_PARAM_DEV_MD_CFG
{
    RVC_teCTRL_MODE teDesiredMode;  // Desired Device Mode uchar8
    uchar8 ucReserved;              // Reserved
    uint16 uiReserved;              // Reserved
} RVC_tzPGN_PM_PARAM_DEV_MD_CFG;

// Parameter Association Config
typedef struct RVC_zPGN_PM_PARAM_ASSOC_CFG
{
    RVC_teASSN_TYPE teAssocType;    // Association Type uchar8
    uchar8 ucAssocInst;             // Association Instance
    uchar8 ucAssocId;               // Association Identifier
    uchar8 ucReserved;              // Reserved
} RVC_tzPGN_PM_PARAM_ASSOC_CFG;

// Parameter Auxiliary Configuration
typedef struct RVC_zPGN_PM_PARAM_AUX_CFG
{
    uchar8 ucOutputId;              // Output Identifier
    RVC_teAUX_DESIRED_STATE teDesiredState; // Desired State 4bit
    RVC_teAUX_ACTIVE_LVL teActiveLevel; // Active Level 4bit
    RVC_teAUX_TRIGGER_ID teSetTrigger; // Set Trigger Id uchar8
    RVC_teAUX_TRIGGER_ID teClrTrigger; // Clear Trigger Id uchar8
} RVC_tzPGN_PM_PARAM_AUX_CFG;

// Parameter Auxiliary Configuration Trigger Level
typedef struct RVC_zPGN_PM_PARAM_AUX_CFG_TRIG_LVL
{
    RVC_teAUX_TRIGGER_ID teTriggerId; // Trigger Id uchar8
    sint16 siTriggerLvl;            // Trigger Level
    uchar8 ucReserved;              // Reserved
} RVC_tzPGN_PM_PARAM_AUX_CFG_TRIG_LVL;

// Parameter Auxiliary Configuration Trigger Delay
typedef struct RVC_zPGN_PM_PARAM_AUX_CFG_TRIG_DLY
{
    RVC_teAUX_TRIGGER_ID teTriggerId; // Trigger Id uchar8
    uint16 uiTriggerDly;            // Trigger Delay
    uchar8 ucReserved;              // Reserved
} RVC_tzPGN_PM_PARAM_AUX_CFG_TRIG_DLY;

// Parameter Auxiliary Status
typedef struct RVC_zPGN_PM_PARAM_AUX_STS
{
    uchar8 ucOutputId;              // Output Identifier
    RVC_teAUX_OP_STATE teOpState;   // Operating State uchar8
    RVC_teAUX_ON_OFF_REASON teOnReason; // On Reason uchar8
    RVC_teAUX_ON_OFF_REASON teOffReason; // Off Reason uchar8
} RVC_tzPGN_PM_PARAM_AUX_STS;

// ISO Request
typedef struct RVC_zPGN_ISO_REQ
{
    uint32 ulParmGrpNum;            // PGN being requested
} RVC_tzPGN_ISO_REQ;

// ISO Transport Protocol, Data Transfer
typedef struct RVC_zPGN_ISO_TP_XFER
{
    uchar8 ucSeqNumMultiPacketFrame; // Sequence number of multi-packet frame
    uchar8 aucMultiPacketPacketizedData[ 7 ]; // Multi-packet packetized data
} RVC_tzPGN_ISO_TP_XFER;

// ISO Transport Protocol, Connection Management - RTS
typedef struct RVC_zPGN_ISO_TP_CONN_MAN_RTS
{
    uchar8 ucRtsGroupFunctionCode;  // RTS Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesXmit;    // Total number of frames to be transmitted
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} RVC_tzPGN_ISO_TP_CONN_MAN_RTS;

// ISO Transport Protocol, Connection Management - CTS
typedef struct RVC_zPGN_ISO_TP_CONN_MAN_CTS
{
    uchar8 ucCtsGroupFunctionCode;  // CTS Group Function Code
    uchar8 ucNumFramesThatCanBeSent; // Number of frames that can be sent
    uchar8 ucNumNextFrameToBeSent;  // Number of next frame to be sent
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} RVC_tzPGN_ISO_TP_CONN_MAN_CTS;

// ISO Transport Protocol, Connection Management - EOM
typedef struct RVC_zPGN_ISO_TP_CONN_MAN_EOM
{
    uchar8 ucEomGroupFunctionCode;  // EOM Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesRxed;    // Total number of frames received
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} RVC_tzPGN_ISO_TP_CONN_MAN_EOM;

// ISO Transport Protocol, Connection Management - BAM
typedef struct RVC_zPGN_ISO_TP_CONN_MAN_BAM
{
    uchar8 ucBamGroupFunctionCode;  // BAM Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesToBeSent; // Total number of frames to be sent
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} RVC_tzPGN_ISO_TP_CONN_MAN_BAM;

// ISO Transport Protocol, Connection Management - Abort
typedef struct RVC_zPGN_ISO_TP_CONN_MAN_ABORT
{
    uchar8 ucAbortGroupFunctionCode; // Abort Group Function Code
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} RVC_tzPGN_ISO_TP_CONN_MAN_ABORT;

// ISO Address Claim
typedef struct RVC_zPGN_ISO_ADDR_CLAIM
{
    uint32 ulUniqueNumber;          // Unique Number (ISO Identity Number)
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    RVC_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    uchar8 ucRsvBit;                // Reserved Bit
    RVC_teDEVICE_CLASS teDeviceClass; // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    RVC_teINDUSTRY_GRP teIndustryGroup; // Industry Group
    uchar8 ucSelfCfgAddr;           // ISO Self Configurable Address
} RVC_tzPGN_ISO_ADDR_CLAIM;

// Proprietary Message Association Config
typedef struct RVC_zPGN_PM_ASSOC_CFG
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teASSN_TYPE teAssocType;    // Association Type
    uchar8 ucAssocInst;             // Association Instance
    uchar8 ucAssocId;               // Association Identifier
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_ASSOC_CFG;

// Proprietary Message Request
typedef struct RVC_zPGN_PM_REQ
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_tePROP_MSG_ID teReqId;      // Requested Identifier
    uchar8 ucParam1;                // Param 1
    uchar8 ucParam2;                // Param 2
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_REQ;

// Proprietary Message Association Status
typedef struct RVC_zPGN_PM_ASSOC_STS
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teASSN_TYPE teAssocType;    // Association Type
    uchar8 ucAssocInst;             // Association Instance
    uchar8 ucAssocId;               // Association Identifier
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_ASSOC_STS;

// Proprietary Message Device Mode Config
typedef struct RVC_zPGN_PM_DEV_MD_CFG
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teCTRL_MODE teDesiredMode;  // Desired Device Mode
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_DEV_MD_CFG;

// Proprietary Message FXCC Configuration Command
typedef struct RVC_zPGN_PM_FXCC_CFG_CMD
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    uchar8 ucPwrSvHr;               // Power Save To Hibernate Timeout
    RVC_teIGNITION_CTRL_STS teInvIgnCtrl; // Inverter Ignition Control
    RVC_teGENERIC_STSPAIR teTransMode; // Transfer Mode
    RVC_teGENERIC_STSPAIR teAlarmEnDis; // Audible Alarm Enable/Disable
    RVC_teGENERIC_STSPAIR teOverFltRecEnDis; // Overload Fault Recovery
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_FXCC_CFG_CMD;

// Proprietary Message Device Mode Status
typedef struct RVC_zPGN_PM_DEV_MD_STS
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teCTRL_MODE teCurrentMode;  // Current Device Mode
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_DEV_MD_STS;

// Proprietary Message FXCC Configuration Status
typedef struct RVC_zPGN_PM_FXCC_CFG_STS
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    uchar8 ucPwrSvHr;               // Power Save To Hibernate Time Out
    RVC_teIGNITION_CTRL_STS teInvIgnCtrl; // Inverter Ignition Control
    RVC_teGENERIC_STSPAIR teTransMode; // Transfer Mode
    RVC_teGENERIC_STSPAIR teAlarmEnDis; // Audible Alarm Enable
    RVC_teGENERIC_STSPAIR teOvrFltRecEnDis; // Overload Fault Recovery
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_FXCC_CFG_STS;

// Proprietary Message Software Version Status
typedef struct RVC_zPGN_PM_SW_VER_STS
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    uchar8 ucProcInst;              // Processor Instance
    RVC_teSW_MOD teSwModIdent;      // SW Module ID
    uchar8 ucSwVerMsb;              // SW Version MSB
    uchar8 ucSwVerIsb;              // SW Version ISB
    uchar8 ucSwVerLsb;              // SW Version LSB
    uchar8 ucSwBldNumMsb;           // SW Build Number MSB
    uchar8 ucSwBldNumLsb;           // SW Build Number LSB
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_SW_VER_STS;

// Proprietary Message Remote Procedure Command
typedef struct RVC_zPGN_PM_RPC_CMD
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    uchar8 ucProcedureId;           // Procedure ID
    uint32 ulProcedureArg;          // Procedure Argument
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_RPC_CMD;

// Proprietary Message Inverter Load Share Status
typedef struct RVC_zPGN_PM_INV_LD_SH_STS
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teAC_SRC_ID teAcSrcId;      // AC Source Identifier
    RVC_teAC_LINE_PM teLine;        // Line
    uchar8 ucInvOutPwr_1;           // Inverter Output Power; LSB 4 bits
    uchar8 ucInvOutPwr_2;           // Inverter Output Power; ISB 8 bits
    uchar8 ucInvOutPwr_3;           // Inverter Output Power; MSB 3 bits
    uchar8 ucCurrent_1;             // Inverter Output Current LSB 5 bits
    uchar8 ucCurrent_2;             // Inverter Output Current MSB 8 bits
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_INV_LD_SH_STS;

// Proprietary Message Inverter Status
typedef struct RVC_zPGN_PM_INV_STS
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teAC_SRC_ID teAcSrcId;      // AC Source Identifier
    RVC_teINV_MODE teInvMode;       // Inverter Mode
    RVC_teOP_STATE_INV teOpState;   // Operating State
    RVC_teCMD_PAIR teInvEnDis;      // Inverter Enable/Disable
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_INV_STS;

// Proprietary Message Charger Status
typedef struct RVC_zPGN_PM_CHG_STS
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teDC_SRC_ID teDcInOutAssocId; // DC In/Out Association ID
    RVC_teGENERIC_STSPAIR teBattTempSensorPresent; // Battery Temperature Sensor Present
    RVC_teOP_STATE_CHG teOpState;   // Operating State
    RVC_teCHG_MODE teChgMode;       // Charger Mode
    RVC_teXANTREX_CHG_ALG teChgAlgorithm; // Charger Algorithm
    sint16 siCtrlVolts;             // Charger Control Voltage
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_CHG_STS;

// Proprietary Message Inverter Control Command
typedef struct RVC_zPGN_PM_INV_CTRL_CMD
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_teAC_SRC_ID teAcSrcId;      // AC Source ID
    RVC_teCMD_PAIR teInvEnDis;      // Inverter Enable/Disable
    RVC_teCMD_PAIR teSellToGridEnDis; // Sell Enable/Disable
    RVC_teCMD_PAIR teForceSell;     // Force Sell On/Off
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_INV_CTRL_CMD;

// Proprietary Message AC Status RMS
typedef struct RVC_zPGN_PM_AC_STS_RMS
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teAC_SRC_ID teAcSrcId;      // AC Source Identifier
    RVC_teAC_LINE_PM teLine;        // Line
    RVC_teAC_CONNECTION_PM teAcConn; // AC Connection
    RVC_teSRC_QUAL teQuality;       // Quality
    uint16 uiFreq;                  // Frequency
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_AC_STS_RMS;

// Proprietary Message AC Transfer Switch Status
typedef struct RVC_zPGN_PM_AC_XFER_SW_STS
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teOP_STATE_AC_XFR_SWITCH teOpState; // Operating State
    RVC_teAC_XFER_SW_MODE teXferSwMode; // Transfer Switch Mode
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_AC_XFER_SW_STS;

// Proprietary Message Get Configuration Parameter
typedef struct RVC_zPGN_PM_GET_CONFIG_PARAM
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_teCFG_PARAM_ID teCfgParamId; // Configuration Parameter Identifier
    uint32 ulParamValue;            // Parameter Value
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_GET_CONFIG_PARAM;

// Proprietary Message Set Configuration Parameter
typedef struct RVC_zPGN_PM_SET_CONFIG_PARAM
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teCFG_PARAM_ID teCfgParamId; // Configuration Parameter Identifier
    uint32 ulParamValue;            // Parameter Value
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_SET_CONFIG_PARAM;

// Proprietary Message Get Status Parameter
typedef struct RVC_zPGN_PM_GET_STATUS_PARAM
{
    RVC_tePROP_MSG_ID teMsgId;      // Message Identifier
    RVC_teSTS_PARAM_ID teStsParamId; // Status Parameter Identifier
    uint32 ulParamValue;            // Parameter Value
    uint16 uiCrc;                   // CRC
} RVC_tzPGN_PM_GET_STATUS_PARAM;

// PPN Session Command
typedef struct RVC_zPGN_PM_PPN_SESSION_CMD
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_teSESSION_STS teSessEnDis;  // Session Enable/Disable
} RVC_tzPGN_PM_PPN_SESSION_CMD;

// PPM Session Response
typedef struct RVC_zPGN_PM_PPN_SESSION_RSP
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_teSESSION_STS teSessEnDis;  // Session Enable/Disable
} RVC_tzPGN_PM_PPN_SESSION_RSP;

// PPN Read Command
typedef struct RVC_zPGN_PM_PPN_READ_CMD
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_tePROPRIETARY_PARAM_NUM teParamId; // Proprietary Parameter Number
} RVC_tzPGN_PM_PPN_READ_CMD;

// PPN Read Response
typedef struct RVC_zPGN_PM_PPN_READ_RSP
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_tePROPRIETARY_PARAM_NUM teParamId; // Proprietary Parameter Number
    uchar8 ucValue0;                // Value byte 0
    uchar8 ucValue1;                // Value byte 1
    uchar8 ucValue2;                // Value byte 2
    uchar8 ucValue3;                // Value byte 3
    uchar8 ucValue4;                // Value byte 4
    uchar8 ucValue5;                // Value byte 5
} RVC_tzPGN_PM_PPN_READ_RSP;

// PPN Write Command
typedef struct RVC_zPGN_PM_PPN_WRITE_CMD
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_tePROPRIETARY_PARAM_NUM teParamId; // Proprietary Parameter Number
    uchar8 ucValue0;                // Value byte 0
    uchar8 ucValue1;                // Value byte 1
    uchar8 ucValue2;                // Value byte 2
    uchar8 ucValue3;                // Value byte 3
    uchar8 ucValue4;                // Value byte 4
    uchar8 ucValue5;                // Value byte 5
} RVC_tzPGN_PM_PPN_WRITE_CMD;

// PPN Write Response
typedef struct RVC_zPGN_PM_PPN_WRITE_RSP
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_tePROPRIETARY_PARAM_NUM teParamId; // Proprietary Parameter Number
    uchar8 ucValue0;                // Value byte 0
    uchar8 ucValue1;                // Value byte 1
    uchar8 ucValue2;                // Value byte 2
    uchar8 ucValue3;                // Value byte 3
    uchar8 ucValue4;                // Value byte 4
    uchar8 ucValue5;                // Value byte 5
} RVC_tzPGN_PM_PPN_WRITE_RSP;

// PPN Nak Response
typedef struct RVC_zPGN_PM_PPN_NAK_RSP
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_tePROPRIETARY_PARAM_NUM teParamId; // Proprietary Parameter Number
} RVC_tzPGN_PM_PPN_NAK_RSP;

// Lithionics Proprietary Command
typedef struct RVC_zPGN_PM_LITHIONICS_CMD
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_teDC_SRC_ID teInst;         // Instance
} RVC_tzPGN_PM_LITHIONICS_CMD;

// Lithionics Proprietary Status
typedef struct RVC_zPGN_PM_LITHIONICS_STS
{
    RVC_tePROP_MSG_ID teMsgId;      // Message ID
    RVC_teDC_SRC_ID teInst;         // Instance
    uchar8 ucMaxRecTemp;            // Maximum Recorded Temperature
    uchar8 ucMinRecTemp;            // Minimum Recorded Temperature
    RVC_teSTS_BIT teHighVoltageState; // High Voltage State
    RVC_teSTS_BIT teChgSrcDet;      // Charge Source Detected
    RVC_teSTS_BIT teNeverDieResState; // NeverDie Reserve State
    RVC_teSTS_BIT teOptoLoopOpen;   // OptoLoop is Open
    RVC_teSTS_BIT teResVoltageRange; // Reserve Voltage Range
    RVC_teSTS_BIT teLowVoltageState; // Low Voltage State
    RVC_teSTS_BIT teBattProtState;  // Battery Protection State
    RVC_teSTS_BIT tePwrOffState;    // Power Off State
    RVC_teSTS_BIT teAuxCntctState;  // AUX Contacts State
    RVC_teSTS_BIT teAuxCntctErr;    // AUX Contacts Error
    RVC_teSTS_BIT tePreChgErr;      // Pre-charge Error
    RVC_teSTS_BIT teCntctFlutter;   // Contactor Flutter
    RVC_teSTS_BIT teAcPwrPres;      // AC Power Present
    RVC_teSTS_BIT teTsmChgPres;     // TSM Charger Present
    RVC_teSTS_BIT teTsmChgErr;      // TSM Charger Error
    RVC_teSTS_BIT teTempInterSensErr; // Temperature Intervention Sensor Error
    RVC_teSTS_BIT teAgsrState;      // AGSR State
    RVC_teSTS_BIT teHotTempState;   // Hot Temperature State
    RVC_teSTS_BIT teColdTempState;  // Cold Temperature State
    RVC_teSTS_BIT teAuxIn1State;    // AUXIN1 State
    RVC_teSTS_BIT teChgDisState;    // Charge Disable State
    RVC_teSTS_BIT teOverCurrState;  // Over-current State
} RVC_tzPGN_PM_LITHIONICS_STS;

// ISO Commanded Address
typedef struct RVC_zPGN_ISO_CMD_ADDR
{
    uint32 ulUniqueNumber;          // Unique Number (ISO Identity Number)
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    RVC_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    uchar8 ucRsvBit;                // Reserved Bit
    RVC_teDEVICE_CLASS teDeviceClass; // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    RVC_teINDUSTRY_GRP teIndustryGroup; // Industry Group
    uchar8 ucSelfCfgAddr;           // ISO Self Configurable Address
    RVC_teDFLT_SRC_ADDR tePrefSrcAddr; // Preferred Source Address
} RVC_tzPGN_ISO_CMD_ADDR;

// Product Identification
typedef struct RVC_zPGN_EXTRA_PROD_IDENT
{
    uchar8 ucData;                  // Data
} RVC_tzPGN_EXTRA_PROD_IDENT;

typedef struct RVC_zPGN_PROD_IDENT
{
    uint16 uiExtraCount;            // Count of extra structure
    RVC_tzPGN_EXTRA_PROD_IDENT *ptzExtra;   // Extra structures
} RVC_tzPGN_PROD_IDENT;

// XB Reset Command
typedef struct RVC_zPGN_XB_RESET_CMD
{
    uchar8 ucProcessorInst;         // None
    RVC_teXB_RST_CMD teCmd;         // Command
} RVC_tzPGN_XB_RESET_CMD;

// File Download Block
typedef struct RVC_zPGN_EXTRA_FILE_DNLD_BLK
{
    uchar8 ucBlkData;               // Block Data
} RVC_tzPGN_EXTRA_FILE_DNLD_BLK;

typedef struct RVC_zPGN_FILE_DNLD_BLK
{
    uint16 uiBlkNum;                // Block Number
    uint16 uiBlkSz;                 // Block Size
    uint16 uiExtraCount;            // Count of extra structure
    RVC_tzPGN_EXTRA_FILE_DNLD_BLK *ptzExtra;   // Extra structures
} RVC_tzPGN_FILE_DNLD_BLK;

// File Download Information
typedef struct RVC_zPGN_FILE_DNLD_INF
{
    RVC_teFUNC_CODE teDeviceFunction; // Device Function
    uchar8 ucProcessorInst;         // Controller Instance
    RVC_teSW_MOD_ID teSwModId;      // Software Module Identifier
    uint32 ulSwVer;                 // Software Version
    uint32 ulFileSz;                // File Size
    uint16 uiCrc;                   // CRC
    uint16 uiExpectNumBlks;         // Expected Number of Blocks
} RVC_tzPGN_FILE_DNLD_INF;

// Simple Calibration Configuration
typedef struct RVC_zPGN_SIMPLE_CALIB_CFG
{
    uchar8 ucRsvBits;               // Reserved Bits
    uchar8 ucMsgCount;              // Message Count
    uint32 ulStsPgn;                // Status Parameter Group Number
    RVC_teCAL_DATA_POINT teDataPtId; // Data Point Identifier
    uint16 uiScale;                 // Scaling Factor (k)
    uint16 uiOffset;                // Offset Value
    uint32 ulValue;                 // Value
} RVC_tzPGN_SIMPLE_CALIB_CFG;

// File Download Status
typedef struct RVC_zPGN_FILE_DNLD_STS
{
    RVC_teOP_STATE_LDR teOpState;   // Operating State
    RVC_teDL_RESULT_CODE teResultCode; // Result Code
    uchar8 ucProcessorInst;         // Controller Instance
    uint16 uiModelNum;              // Model Number
    uint16 uiHwModRev;              // Hardware Module Revision
    uint16 uiBlkNum;                // Block Number
} RVC_tzPGN_FILE_DNLD_STS;

// Instance Status
typedef struct RVC_zPGN_INST_STS
{
    RVC_teDFLT_SRC_ADDR teDevType;  // Device Type
    uchar8 ucBaseInst;              // Base Instance
    uchar8 ucMaxInst;               // Max Instance
    uint16 uiBaseIntAddr;           // Base Internal Address
    uint16 uiMaxIntAddr;            // Max Internal Address
} RVC_tzPGN_INST_STS;

// Instance Assignment
typedef struct RVC_zPGN_INST_ASSIGN
{
    RVC_teDFLT_SRC_ADDR teDevType;  // Device Type
    uchar8 ucBaseInst;              // Base Instance
    uchar8 ucMaxInst;               // Max Instance
    uint16 uiBaseIntAddr;           // Base Internal Address
    uint16 uiMaxIntAddr;            // Max Internal Address
} RVC_tzPGN_INST_ASSIGN;

// Virtual Terminal
typedef struct RVC_zPGN_VIRTUAL_TERMINAL
{
    uchar8 ucAsciiChar1;            // ASCII Character 1
    uchar8 ucAsciiChar2;            // ASCII Character 2
    uchar8 ucAsciiChar3;            // ASCII Character 3
    uchar8 ucAsciiChar4;            // ASCII Character 4
    uchar8 ucAsciiChar5;            // ASCII Character 5
    uchar8 ucAsciiChar6;            // ASCII Character 6
    uchar8 ucAsciiChar7;            // ASCII Character 7
    uchar8 ucAsciiChar8;            // ASCII Character 8
} RVC_tzPGN_VIRTUAL_TERMINAL;

// General Reset
typedef struct RVC_zPGN_GEN_RST
{
    RVC_teCMD_PAIR teReboot;        // Reboot
    RVC_teCMD_PAIR teClrFlts;       // Clear Faults
    RVC_teCMD_PAIR teRstDflt;       // Reset to Default Settings
    RVC_teCMD_PAIR teRstStats;      // Reset Statistics
    RVC_teCMD_PAIR teTestMd;        // Test Mode
    RVC_teCMD_PAIR teRstOEM;        // Reset to OEM Settings
    RVC_teCMD_PAIR teRstLdr;        // Reset to Loader Mode
} RVC_tzPGN_GEN_RST;

// Product Information Status
typedef struct RVC_zPGN_PROD_INFO_STS
{
    uchar8 ucMsgCount;              // Message Count
    uchar8 aucModelName[ 16 ];      // Model Name
    uchar8 aucFga[ 12 ];            // Finished Goods Assembly
    uint32 ulPwrLvl;                // Power Level
    sint32 slNomDcLvl;              // Nominal DC Level
    uint32 ulNomAcLvl;              // Nominal AC Level
    uint16 uiNomAcOutFreq;          // Nominal AC Output Frequency
} RVC_tzPGN_PROD_INFO_STS;

// Software Version Status
typedef struct RVC_zPGN_EXTRA_SW_VER_STS
{
    uchar8 ucProcessorInst;         // Controller or Processor Instance
    RVC_teSW_MOD_ID teSwModId;      // Software Module Identifier
    uint32 ulSwVer;                 // Software Version
    uint16 uiSwBldNum;              // Software Build Number
} RVC_tzPGN_EXTRA_SW_VER_STS;

typedef struct RVC_zPGN_SW_VER_STS
{
    uchar8 ucMsgCount;              // Message Count
    uint16 uiExtraCount;            // Count of extra structure
    RVC_tzPGN_EXTRA_SW_VER_STS *ptzExtra;   // Extra structures
} RVC_tzPGN_SW_VER_STS;

// Charger Status 3
typedef struct RVC_zPGN_CHG_STS3
{
    uchar8 ucChgInst;               // Charger Instance
    RVC_teDERATING_STS teDerateSts; // Derating Status
    RVC_teDERATING_REASON teDerateReason; // Derating Reason
} RVC_tzPGN_CHG_STS3;

// Inverter Temperature Status 2
typedef struct RVC_zPGN_INV_TEMP_STS2
{
    uchar8 ucInst;                  // Instance
    uint16 uiCtrlBrdTemp;           // Control Board Temperature
    uint16 uiCapTemp;               // Capacitor Temperature
    uint16 uiAmbTemp;               // Ambient Temperature
} RVC_tzPGN_INV_TEMP_STS2;

// Solar Controller Configuration Command 5
typedef struct RVC_zPGN_SCC_CFG_CMD5
{
    uchar8 ucInst;                  // Instance
    uchar8 ucChgPrio;               // Charger priority
    uchar8 ucExtTempOtSdThresh;     // External temperature sensor high temperature limit
    uchar8 ucExtTempUtSdThresh;     // External temperature sensor low temperature limit
} RVC_tzPGN_SCC_CFG_CMD5;

// Solar Controller Configuration Status 5
typedef struct RVC_zPGN_SCC_CFG_STS5
{
    uchar8 ucInst;                  // Instance
    uchar8 ucChgPrio;               // Charger priority
    uchar8 ucExtTempOtSdThresh;     // External temperature sensor high temperature limit
    uchar8 ucExtTempUtSdThresh;     // External temperature sensor low temperature limi
} RVC_tzPGN_SCC_CFG_STS5;

// DC Source Connection Status
typedef struct RVC_zPGN_DC_SRC_CONN_STS
{
    uchar8 ucDevInst;               // Device Instance
    uchar8 ucDevDSA;                // Device DSA
    RVC_teDC_SRC_FUNC teFunction;   // Function
    uchar8 ucPrimaryDcInst;         // Primary DC instance
    uchar8 ucSecondDcInst;          // Secondary DC instance
} RVC_tzPGN_DC_SRC_CONN_STS;

// Device State Synchronization
typedef struct RVC_zPGN_DEVICE_STATE_SYNC
{
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucPayloadID;             // Payload Identifier
    uchar8 ucPayload1;              // Payload 1
    uchar8 ucPayload2;              // Payload 2
    uchar8 ucPayload3;              // Payload 3
    uchar8 ucPayload4;              // Payload 4
    uchar8 ucPayload5;              // Payload 5
} RVC_tzPGN_DEVICE_STATE_SYNC;

// DC Source Configuration Command 3
typedef struct RVC_zPGN_DC_SRC_CFG_CMD3
{
    uchar8 ucDevInst;               // Device Instance
    uchar8 ucDevDSA;                // Device DSA
    RVC_teDC_SRC_FUNC teFunction;   // Function
    uchar8 ucPrimaryDcInst;         // Primary DC instance
    uchar8 ucSecondDcInst;          // Secondary DC instance
} RVC_tzPGN_DC_SRC_CFG_CMD3;

// Battery Summary
typedef struct RVC_zPGN_BATT_SUMM
{
    RVC_teDC_SRC_ID teBattInst;     // Battery Instance
    RVC_teDC_SRC_ID teDcInst;       // DC Instance
    uchar8 ucSeriesString;          // Series String
    RVC_teMOD_COUNT teModuleCnt;    // Module Count
    uchar8 ucCellsPerModule;        // Cells per Module
    RVC_teV_STS teVoltSts;          // Voltage Status
    RVC_teTEMP_STS teTempSts;       // Temperature Status
} RVC_tzPGN_BATT_SUMM;

// Solar Controller Configuration Command 4
typedef struct RVC_zPGN_SCC_CFG_CMD4
{
    uchar8 ucInst;                  // Instance
    uint16 uiBattOvRetV;            // Battery high voltage limit return voltage
    uint16 uiBattUvRetV;            // Battery low voltage llimit return voltage
    uchar8 ucBattUvDly;             // Battery low voltage time delay
    uchar8 ucAbsorpTime;            // Absorption duration
    uchar8 ucTempCompConst;         // Temperature compensation factor
} RVC_tzPGN_SCC_CFG_CMD4;

// Solar Controller Configuration Status 4
typedef struct RVC_zPGN_SCC_CFG_STS4
{
    uchar8 ucInst;                  // Instance
    uint16 uiBattOvRetV;            // Battery high voltage limit return voltage
    uint16 uiBattUvRetV;            // Battery low voltage limit return voltage
    uchar8 ucBattUvDly;             // Battery low voltage time delay
    uchar8 ucAbsorpTime;            // Absorption duration
    uchar8 ucTempCompConst;         // Temperature compensation factor
} RVC_tzPGN_SCC_CFG_STS4;

// Solar Controller Configuration Command 3
typedef struct RVC_zPGN_SCC_CFG_CMD3
{
    uchar8 ucInst;                  // Inststance
    uint16 uiBattUvWarnThresh;      // Under-voltage warning voltage
    uint16 uiBattOvSdThresh;        // Battery high voltage limit voltage
    uint16 uiBattUvSdThresh;        // Battery low voltage limit voltage
} RVC_tzPGN_SCC_CFG_CMD3;

// Solar Controller Configuration Status 3
typedef struct RVC_zPGN_SCC_CFG_STS3
{
    uchar8 ucInst;                  // Instance
    uint16 uiBattUvWarnThresh;      // Under-voltage warning voltage
    uint16 uiBattOvSdThresh;        // Battery high voltage limit voltage
    uint16 uiBattUvSdThresh;        // Battery low voltage limit voltage
} RVC_tzPGN_SCC_CFG_STS3;

// Solar Controller Configuration Command 2
typedef struct RVC_zPGN_SCC_CFG_CMD2
{
    uchar8 ucInst;                  // Instance
    uint16 uiBulkV;                 // Bulk-absorption voltage
    uint16 uiFloatV;                // Float voltage
    uint16 uiChgRetV;               // Charge return voltage
} RVC_tzPGN_SCC_CFG_CMD2;

// Solar Controller Configuration Status 2
typedef struct RVC_zPGN_SCC_CFG_STS2
{
    uchar8 ucInst;                  // Instance
    uint16 uiBulkV;                 // Bulk absorption voltage
    uint16 uiFloatV;                // Float voltage
    uint16 uiChgRetV;               // Charge return voltage
} RVC_tzPGN_SCC_CFG_STS2;

// Solar Controller Solar Array Status
typedef struct RVC_zPGN_SCC_ARRAY_STS
{
    uchar8 ucInst;                  // Instance
    uint16 uiArrayV;                // Solar array measured voltage
    uint16 uiArrayI;                // Solar array measured input current
} RVC_tzPGN_SCC_ARRAY_STS;

// Solar Controller Battery Status
typedef struct RVC_zPGN_SCC_BATT_STS
{
    uchar8 ucInst;                  // Instance
    uchar8 ucDcSrcInst;             // DC Source Instance
    uchar8 ucChgPriority;           // Charger Priority
    uint16 uiBattVolts;             // Measured voltage
    uint16 uiBattCurrent;           // Measured current
    uchar8 ucBattTemp;              // Measured temperature
} RVC_tzPGN_SCC_BATT_STS;

// Solar Controller Status 6
typedef struct RVC_zPGN_SCC_STS6
{
    uchar8 ucInst;                  // Instance
    uint16 uiOperatingDays;         // Total number of operating days
    uint16 uiIntTemp;               // Solar charge controller measured temperature
} RVC_tzPGN_SCC_STS6;

// Solar Controller Status 5
typedef struct RVC_zPGN_SCC_STS5
{
    uchar8 ucInst;                  // Instance
    uint16 uiWeekAh;                // Last 7 days amp-hours to battery
    uint32 ulCumPwrGen;             // Cumulative power generation
} RVC_tzPGN_SCC_STS5;

// Solar Controller Status 4
typedef struct RVC_zPGN_SCC_STS4
{
    uchar8 ucInst;                  // Instance
    uint16 uiTodayAh;               // Today amp-hours to battery
    uint16 uiYesterdayAh;           // Yesterday amp-hours to battery
    uint16 uiBeforeYesterdayAh;     // Day before yesterday's amp-hours to battery
} RVC_tzPGN_SCC_STS4;

// Solar Controller Status 3
typedef struct RVC_zPGN_SCC_STS3
{
    uchar8 ucInst;                  // Instance
    uint16 uiRatedPvV;              // Rated solar input voltage
    uint16 uiRatedPvI;              // Rated solar input current
    uint16 uiRatedPvOverPwr;        // Rated solar over-power
} RVC_tzPGN_SCC_STS3;

// Solar Controller Status 2
typedef struct RVC_zPGN_SCC_STS2
{
    uchar8 ucInst;                  // Instance
    uint16 uiRatedBattV;            // Rated battery voltage
    uint16 uiRatedBattI;            // Rated battery current
} RVC_tzPGN_SCC_STS2;

// Battery Command
typedef struct RVC_zPGN_BATT_CMD
{
    RVC_teDC_SRC_ID teBattInst;     // Battery Instance
    RVC_teGENERIC_STSPAIR teDesiredLoadOnOffSts; // Desired Load On/Off status
    RVC_teGENERIC_STSPAIR teDesiredChgOnOffSts; // Desired Charge On/Off status
    RVC_teGENERIC_STSPAIR teClrHistory; // Clear History
    RVC_teGENERIC_STSPAIR teReserved; // Reserved
    uchar8 ucRtnModuleCellDetail;   // Return Modules Cell Details
    RVC_teDC_SRC_ID teDcInst;       // DC Instance
} RVC_tzPGN_BATT_CMD;

// Battery Status 11
typedef struct RVC_zPGN_BATT_STS11
{
    RVC_teDC_SRC_ID teBattInst;     // Battery Instance
    RVC_teDC_SRC_ID teDcInst;       // DC Instance
    RVC_teGENERIC_STSPAIR teDischgOnOffSts; // Discharge On/Off status
    RVC_teGENERIC_STSPAIR teChgOnOffSts; // Charge On/Off status
    RVC_teGENERIC_STSPAIR teChgDetect; // Charge Detected
    RVC_teGENERIC_STSPAIR teReservSts; // Reserve Status
    uint16 uiNomFullCap;            // Nominal Full Capacity
    uint16 uiDcPwr;                 // DC Power
} RVC_tzPGN_BATT_STS11;

// Battery Status 6
typedef struct RVC_zPGN_BATT_STS6
{
    RVC_teDC_SRC_ID teBattInst;     // Battery Instance
    RVC_teDC_SRC_ID teDcInst;       // DC Instance
    RVC_teGENERIC_STSPAIR teHiVoltLimitSts; // High Voltage Limit Status
    RVC_teDISCONNECT_STS teHiVoltDisconSts; // High Voltage Disconnect Status
    RVC_teGENERIC_STSPAIR teLowVoltLimitSts; // Low Voltage Limit Status
    RVC_teDISCONNECT_STS teLowVoltDisconSts; // Low Voltage Disconnect Status
    RVC_teGENERIC_STSPAIR teLowSocLimitSts; // Low State of Charge Limit Status
    RVC_teDISCONNECT_STS teLowSocDisconSts; // Low State of Charge Disconnect Status
    RVC_teGENERIC_STSPAIR teLowDcSrcTempLimitSts; // Low DC Source Temperature Limit Status
    RVC_teDISCONNECT_STS teLowDcSrcTempDisconSts; // Low DC Source Temperature Disconnect Status
    RVC_teGENERIC_STSPAIR teHiDcSrcTempLimitSts; // High DC Source Temperature Limit Status
    RVC_teDISCONNECT_STS teHiDcSrcTempDisconSts; // High DC Source Temperature Disconnect Status
    RVC_teGENERIC_STSPAIR teHiAmpDcSrcLimitSts; // High Current DC Source Limit Status
    RVC_teDISCONNECT_STS teHiAmpDcSrcDisconSts; // High Current DC Source Disconnect Status
} RVC_tzPGN_BATT_STS6;

// Battery Status 4
typedef struct RVC_zPGN_BATT_STS4
{
    RVC_teDC_SRC_ID teBattInst;     // Battery Instance
    RVC_teDC_SRC_ID teDcInst;       // DC Instance
    RVC_teRVC_DESIRED_CHG_STATE teDesChgState; // Desired Charge State
    uint16 uiDesDcV;                // Desired DC Voltage
    uint16 uiDesDcI;                // Desired DC Current
    RVC_teRVC_BATT_TYPE teBattType; // Battery Type
} RVC_tzPGN_BATT_STS4;

// Battery Status 3
typedef struct RVC_zPGN_BATT_STS3
{
    RVC_teDC_SRC_ID teBattInst;     // Battery Instance
    RVC_teDC_SRC_ID teDcInst;       // DC Instance
    uchar8 ucSoh;                   // State of Health
    uint16 uiCapRemain;             // Capacity Remaining
    uchar8 ucRelCap;                // Relative Capacity
    uint16 uiAcRmsRipple;           // AC RMS Ripple
} RVC_tzPGN_BATT_STS3;

// Battery Status 2
typedef struct RVC_zPGN_BATT_STS2
{
    RVC_teDC_SRC_ID teBattInst;     // Battery Instance
    RVC_teDC_SRC_ID teDcInst;       // DC Instance
    uint16 uiSrcTemp;               // Source Temperature
    uchar8 ucSoc;                   // State of Charge
    uint16 uiTimeRemain;            // Time Remaining
    RVC_teTIME_REMAIN_INTERP teTimeRemainInterp; // Time Remain Interpretion
} RVC_tzPGN_BATT_STS2;

// Battery Status 1
typedef struct RVC_zPGN_BATT_STS1
{
    RVC_teDC_SRC_ID teBattInst;     // Battery Instance
    RVC_teDC_SRC_ID teDcInst;       // DC Instance
    uint16 uiDcV;                   // DC Voltage
    uint32 ulDcI;                   // DC Current
} RVC_tzPGN_BATT_STS1;

// Inverter Configuration Command 4
typedef struct RVC_zPGN_INV_CFG_CMD4
{
    uchar8 ucInst;                  // Instance
    uint16 uiOutACVolt;             // Output AC Voltage
    uchar8 ucOutFreq;               // Output Frequency
    uint16 uiACOutPwrLim;           // AC Output Power Limit
    uint16 uiACOutPwrTimeLim;       // AC Output Power Time Limit
} RVC_tzPGN_INV_CFG_CMD4;

// Inverter Configuration Status 4
typedef struct RVC_zPGN_INV_CFG_STS4
{
    uchar8 ucInst;                  // Instance
    uint16 uiOutACVolt;             // Output AC Voltage
    uchar8 ucOutFreq;               // Output Frequency
    uint16 uiACOutPwrLim;           // AC Output Power Limit
    uint16 uiACOutPwrTimeLim;       // AC Output Power Time Limit
} RVC_tzPGN_INV_CFG_STS4;

// Alarm Command
typedef struct RVC_zPGN_ALARM_CMD
{
    uchar8 ucInst;                  // Instance
    RVC_teDFLT_SRC_ADDR teDevType;  // DSA
    RVC_teCMD_PAIR teReadyAlarm;    // Ready alarm
    RVC_teCMD_PAIR teAckAlarm;      // Acknowledge alarm
    RVC_teCMD_PAIR teAutoRstEn;     // Automatic reset enabled
    uchar8 ucDevInst;               // Device instance
} RVC_tzPGN_ALARM_CMD;

// Alarm Status
typedef struct RVC_zPGN_ALARM_STS
{
    uchar8 ucInst;                  // Instance
    RVC_teDFLT_SRC_ADDR teDevType;  // DSA
    RVC_teGENERIC_STSPAIR teAlarmTrig; // Alarm triggered
    RVC_teGENERIC_STSPAIR teAlarmRdy; // Alarm ready
    RVC_teGENERIC_STSPAIR teAlarmAckd; // Alarm is acknowledged
    RVC_teGENERIC_STSPAIR teAlarmRstEn; // Alarm reset enabled
    uint16 uiElapsedTime;           // Elapsed time
    uchar8 ucDevInst;               // Device instance
    RVC_teGENERIC_STSPAIR teFtMonReq; // Full-time monitoring required
    RVC_teGENERIC_STSPAIR teAlarmForLog; // Alarm for logging
    RVC_teGENERIC_STSPAIR teAlarmForUser; // Alarm for user notification
} RVC_tzPGN_ALARM_STS;

// Charger Status 2
typedef struct RVC_zPGN_CHG_STS2
{
    uchar8 ucChgInst;               // Charger Instance
    uchar8 ucDcSrcInst;             // DC Source Instance
    RVC_teRVC_DEVICE_PRIORITY teChgPrio; // Charger Priority
    uint16 uiChgV;                  // Charging Voltage
    uint16 uiChgI;                  // Charging Current
    uchar8 ucChgTemp;               // Charger temperature
} RVC_tzPGN_CHG_STS2;

// DC SOURCE COMMAND
typedef struct RVC_zPGN_DC_SRC_CMD
{
    RVC_teDC_SRC_ID teInst;         // Instance
    RVC_teGENERIC_STSPAIR teDesPwrOnOffSts; // Desired Power On/Off Status
    RVC_teGENERIC_STSPAIR teDesChgOnOffSts; // Desired Charge On/Off Status
} RVC_tzPGN_DC_SRC_CMD;

// DC SOURCE STATUS 11
typedef struct RVC_zPGN_DC_SRC_STS11
{
    RVC_teDC_SRC_ID teInst;         // Instance
    RVC_teRVC_DEVICE_PRIORITY teDevPri; // Device Priority
    RVC_teGENERIC_STSPAIR teDischgOnOffSts; // Discharge On/Off status
    RVC_teGENERIC_STSPAIR teChgOnOffSts; // Charge On/Off status
    RVC_teGENERIC_STSPAIR teChgDetect; // Charge Detected
    RVC_teGENERIC_STSPAIR teReservSts; // Reserve Status
    uint16 uiNomFullCap;            // Nominal Full Capacity
    uint16 uiDcPwr;                 // DC Power
} RVC_tzPGN_DC_SRC_STS11;

// Solar Equalization Configuration Command
typedef struct RVC_zPGN_SCC_EQLZ_CFG_CMD
{
    uchar8 ucInst;                  // Instance
    uint16 uiEqlzV;                 // Equalization voltage
    uint16 uiEqlzTime;              // Equalization time
    uchar8 ucEqlzIntvl;             // Equalization interval
} RVC_tzPGN_SCC_EQLZ_CFG_CMD;

// Solar Equalization Configuration Status
typedef struct RVC_zPGN_SCC_EQLZ_CFG_STS
{
    uchar8 ucInst;                  // Instance
    uint16 uiEqlzV;                 // Equalization voltage
    uint16 uiEqlzTime;              // Equalization time
    uchar8 ucEqlzIntvl;             // Equalization interval
} RVC_tzPGN_SCC_EQLZ_CFG_STS;

// Solar Equalization Status
typedef struct RVC_zPGN_SCC_EQLZ_STS
{
    uchar8 ucInst;                  // Instance
    uint16 uiTimeRemain;            // Time remaining
    RVC_teGENERIC_STSPAIR tePreChgSts; // Pre-charging status
    uchar8 ucTimeSinceEqlz;         // Time since last equalization
} RVC_tzPGN_SCC_EQLZ_STS;

// Solar Controller Configuration Command
typedef struct RVC_zPGN_SCC_CFG_CMD
{
    uchar8 ucInst;                  // Instance
    RVC_teRVC_CHG_ALG teChgAlg;     // Charging algorithm
    RVC_teRVC_CHG_MODE teChgMode;   // Charger mode
    RVC_teCMD_PAIR teBattSensPres;  // Battery sensor present
    RVC_teCMD_PAIR teLinkageMode;   // Linkage mode
    RVC_teRVC_BATT_TYPE teBattType; // Battery type
    uint16 uiBattBankSz;            // Battery bank size
    uchar8 ucMaxChgI;               // Maximum charging current
} RVC_tzPGN_SCC_CFG_CMD;

// Solar Controller Command
typedef struct RVC_zPGN_SCC_CMD
{
    uchar8 ucInst;                  // Instance
    RVC_teRVC_CHG_CMD teSts;        // Solar charge controller status
    RVC_teCMD_PAIR teEnableOnPwrUp; // Default state on power-up
    RVC_teCMD_PAIR teClrHist;       // Clear history
    RVC_teRVC_FORCE_CHG teForceChg; // Force charge
} RVC_tzPGN_SCC_CMD;

// Solar Controller Configuration Status
typedef struct RVC_zPGN_SCC_CFG_STS
{
    uchar8 ucInst;                  // Instance
    RVC_teRVC_CHG_ALG teChgAlg;     // Charging algorithm
    RVC_teRVC_CHG_MODE teChgMode;   // Controller mode
    RVC_teGENERIC_STSPAIR teBattSensPres; // Battery sensor present
    RVC_teGENERIC_STSPAIR teLinkMode; // Linkage mode
    RVC_teRVC_BATT_TYPE teBattType; // Battery type
    uint16 uiBattBankSz;            // Battery bank size
    uchar8 ucMaxChgI;               // Maximum charging current
} RVC_tzPGN_SCC_CFG_STS;

// Solar Controller Status
typedef struct RVC_zPGN_SCC_STS
{
    uchar8 ucInst;                  // Instance
    uint16 uiChgV;                  // Charge voltage
    uint16 uiChgI;                  // Charge current
    uchar8 ucChgIPer;               // Charge current percent of maximum
    RVC_teRVC_DESIRED_CHG_STATE teOpState; // Operating state
    RVC_teGENERIC_STSPAIR tePwrUpEnDis; // Power-up state
    RVC_teGENERIC_STSPAIR teClrHist; // Clear history
    RVC_teRVC_FORCE_CHG teForceChg; // Force charge
} RVC_tzPGN_SCC_STS;

// Inverter Temperature Status
typedef struct RVC_zPGN_INV_TEMP_STS
{
    uchar8 ucInst;                  // Instance
    uint16 uiFet1Temp;              // FET1 Temperature
    uint16 uiXfmrTemp;              // Transformer Temperature
    uint16 uiFet2Temp;              // FET2 Temperature
} RVC_tzPGN_INV_TEMP_STS;

// Charger Configuration Command 4
typedef struct RVC_zPGN_CHG_CFG_CMD4
{
    uchar8 ucInst;                  // Instance
    uint16 uiBulkTime;              // Bulk Time
    uint16 uiAbsorpTime;            // Absorption Time
    uint16 uiFloatTime;             // Float Time
} RVC_tzPGN_CHG_CFG_CMD4;

// Charger Configuration Status 4
typedef struct RVC_zPGN_CHG_CFG_STS4
{
    uchar8 ucInst;                  // Instance
    uint16 uiBulkTime;              // Bulk Time
    uint16 uiAbsorpTime;            // Absorption Time
    uint16 uiFloatTime;             // Float Time
} RVC_tzPGN_CHG_CFG_STS4;

// DC Source Status 6
typedef struct RVC_zPGN_DC_SRC_STS6
{
    RVC_teDC_SRC_ID teDcInst;       // DC Instance
    RVC_teRVC_DEVICE_PRIORITY teDevPri; // Device Priority
    RVC_teGENERIC_STSPAIR teHiVoltLimitSts; // High Voltage Limit Status
    RVC_teDISCONNECT_STS teHiVoltDisconSts; // High Voltage Disconnect Status
    RVC_teGENERIC_STSPAIR teLowVoltLimitSts; // Low Voltage Limit Status
    RVC_teDISCONNECT_STS teLowVoltDisconSts; // Low Voltage Disconnect Status
    RVC_teGENERIC_STSPAIR teLowSocLimitSts; // Low State of Charge Limit Status
    RVC_teDISCONNECT_STS teLowSocDisconSts; // Low State of Charge Disconnect Status
    RVC_teGENERIC_STSPAIR teLowDcSrcTempLimitSts; // Low DC Source Temperature Limit Status
    RVC_teDISCONNECT_STS teLowDcSrcTempDisconSts; // Low DC Source Temperature Disconnect Status
    RVC_teGENERIC_STSPAIR teHiDcSrcTempLimitSts; // High DC Source Temperature Limit Status
    RVC_teDISCONNECT_STS teHiDcSrcTempDisconSts; // High DC Source Temperature Disconnect Status
    RVC_teGENERIC_STSPAIR teHiAmpDcSrcLimitSts; // High Current DC Source Limit Status
    RVC_teDISCONNECT_STS teHiAmpDcSrcDisconSts; // High Current DC Source Disconnect Status
} RVC_tzPGN_DC_SRC_STS6;

// DC Source Status 4
typedef struct RVC_zPGN_DC_SRC_STS4
{
    RVC_teDC_SRC_ID teInst;         // Instance
    RVC_teRVC_DEVICE_PRIORITY teDevPri; // Device Priority
    RVC_teRVC_DESIRED_CHG_STATE teDesChgState; // Desired Charge State
    uint16 uiDesDcV;                // Desired DC Voltage
    uint16 uiDesDcI;                // Desired DC Current
    RVC_teRVC_BATT_TYPE teBattType; // Battery Type
} RVC_tzPGN_DC_SRC_STS4;

// Diagnostic Message 1
typedef struct RVC_zPGN_EXTRA_DIAG_MSG1
{
    uchar8 ucSpnMsb;                // Suspect Parameter Number MSB
    uchar8 ucSpnIsb;                // Suspect Parameter Number ISB
    RVC_teSAEJ1939FMI teFmi;        // Failure Mode Identifier
    uchar8 ucSpnLsb;                // Suspect Parameter Number LSB
    uchar8 ucOccurrenceCnt;         // Occurrence Count
    uchar8 ucProdIdExt;             // Default Source Address Extension
} RVC_tzPGN_EXTRA_DIAG_MSG1;

typedef struct RVC_zPGN_DIAG_MSG1
{
    RVC_teGENERIC_STSPAIR teOpStsProdOn; // Operating Status - Product On
    RVC_teGENERIC_STSPAIR teOpStsProdActive; // Operating Status - Product Active
    RVC_teGENERIC_STSPAIR teOpStsYel; // Yellow Lamp status
    RVC_teGENERIC_STSPAIR teOpStsRed; // Red Lamp status
    RVC_teDFLT_SRC_ADDR teProdId;   // Product Identifier - Default Source Address
    uint16 uiExtraCount;            // Count of extra structure
    RVC_tzPGN_EXTRA_DIAG_MSG1 *ptzExtra;   // Extra structures
} RVC_tzPGN_DIAG_MSG1;

// Charger Configuration Command 3
typedef struct RVC_zPGN_CHG_CFG_CMD3
{
    uchar8 ucInst;                  // Instance
    uint16 uiBulkV;                 // Bulk Voltage
    uint16 uiAbsorpV;               // Absorption Voltage
    uint16 uiFloatV;                // Float Voltage
    uchar8 ucTempCompConst;         // Temperature Compensation Constant
} RVC_tzPGN_CHG_CFG_CMD3;

// Charger Configuration Status 3
typedef struct RVC_zPGN_CHG_CFG_STS3
{
    uchar8 ucInst;                  // Instance
    uint16 uiBulkV;                 // Bulk Voltage
    uint16 uiAbsorpV;               // Absorption Voltage
    uint16 uiFloatV;                // Float Voltage
    uchar8 ucTempCompConst;         // Temperature Compensation Constant
} RVC_tzPGN_CHG_CFG_STS3;

// Inverter Configuration Command 3
typedef struct RVC_zPGN_INV_CFG_CMD3
{
    uchar8 ucInst;                  // Instance
    uint16 uiDcSrcShtDwnDly;        // DC Source Shutdown Delay
    RVC_teRVC_STACK_MODE teStackMd; // Stack Mode
    uint16 uiDcUvSdRecLvl;          // DC Under Voltage Shutdown Recovery Level
    uint16 uiGenSupportEngI;        // Generator Support Engage Current
} RVC_tzPGN_INV_CFG_CMD3;

// Inverter Configuration Status 3
typedef struct RVC_zPGN_INV_CFG_STS3
{
    uchar8 ucInst;                  // Instance
    uint16 uiDcSrcShtDwnDly;        // DC Source shutdown delay
    RVC_teRVC_STACK_MODE teStackMd; // Stack Mode
    uint16 uiDcUvSdRecLvl;          // DC Under Voltage Shutdown Recovery Level
    uint16 uiGenSupportEngI;        // Generator Support Engage Current
} RVC_tzPGN_INV_CFG_STS3;

// Inverter_DC_Status
typedef struct RVC_zPGN_INV_DC_STS
{
    uchar8 ucInst;                  // Instance
    uint16 uiDcVolt;                // DC_Voltage
    uint16 uiDcAmps;                // DC_Amperage
} RVC_tzPGN_INV_DC_STS;

// Charger AC Fault Configuration Command 2
typedef struct RVC_zPGN_CHG_AC_FLT_CFG_CMD2
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uchar8 ucHiFreqLimit;           // High Frequency Limit
    uchar8 ucLoFreqLimit;           // Low Frequency Limit
} RVC_tzPGN_CHG_AC_FLT_CFG_CMD2;

// Charger AC Fault Configuration Command 1
typedef struct RVC_zPGN_CHG_AC_FLT_CFG_CMD1
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uchar8 ucExtremeLoV;            // Extreme Low Voltage Level
    uchar8 ucLoV;                   // Low Voltage Level
    uchar8 ucHiV;                   // High Voltage Level
    uchar8 ucExtremeHiV;            // Extreme High Voltage Level
    uchar8 ucQualTime;              // Qualification Time
    RVC_teGENERIC_STSPAIR teBypassMode; // Bypass Mode
} RVC_tzPGN_CHG_AC_FLT_CFG_CMD1;

// Charger AC Fault Configuration Status 2
typedef struct RVC_zPGN_CHG_AC_FLT_CFG_STS2
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uchar8 ucHiFreqLimit;           // High Frequency Limit
    uchar8 ucLoFreqLimit;           // Low Frequency Limit
} RVC_tzPGN_CHG_AC_FLT_CFG_STS2;

// Charger AC Fault Configuration Status 1
typedef struct RVC_zPGN_CHG_AC_FLT_CFG_STS1
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uchar8 ucExtremeLoV;            // Extreme Low Voltage Level
    uchar8 ucLoV;                   // Low Voltage Level
    uchar8 ucHiV;                   // High Voltage Level
    uchar8 ucExtremeHiV;            // Extreme High Voltage Level
    uchar8 ucQualTime;              // Qualification Time
    RVC_teGENERIC_STSPAIR teBypassMode; // Bypass Mode
} RVC_tzPGN_CHG_AC_FLT_CFG_STS1;

// Charger AC Status 4
typedef struct RVC_zPGN_CHG_AC_STS4
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    RVC_teRVCV_FLT teVFlt;          // Voltage Fault
    RVC_teGENERIC_STSPAIR teFltSurgeProt; // Fault - Surge Protection
    RVC_teGENERIC_STSPAIR teFltHiFreq; // Fault - High Frequency
    RVC_teGENERIC_STSPAIR teFltLoFreq; // Fault - Low Frequency
    RVC_teGENERIC_STSPAIR teBypassModeAct; // Bypass Mode Active
    RVC_teRVC_QUALIFICATION_STS teQualifStat; // Qualification Status
} RVC_tzPGN_CHG_AC_STS4;

// Inverter AC Fault Configuration Command 1
typedef struct RVC_zPGN_INV_AC_FLT_CFG_CMD1
{
    uchar8 ucInst;                  // Instance
    uchar8 ucExtremeLoV;            // Extreme Low Voltage Level
    uchar8 ucLoV;                   // Low Voltage Level
    uchar8 ucHiV;                   // High Voltage Level
    uchar8 ucExtremeHiV;            // Extreme High Voltage Level
    uchar8 ucQualTime;              // Qualification Time
    RVC_teGENERIC_STSPAIR teBypassMode; // Bypass Mode
    uchar8 ucRsvBits;               // Reserved Bits
} RVC_tzPGN_INV_AC_FLT_CFG_CMD1;

// Inverter AC Fault Configuration Status 1
typedef struct RVC_zPGN_INV_AC_FLT_CFG_STS1
{
    uchar8 ucInst;                  // Instance
    uchar8 ucExtremeLoV;            // Extreme Low Voltage Level
    uchar8 ucLoV;                   // Low Voltage Level
    uchar8 ucHiV;                   // High Voltage Level
    uchar8 ucExtremeHiV;            // Extreme High Voltage Level
    uchar8 ucQualTime;              // Qualification Time
    RVC_teGENERIC_STSPAIR teBypassMode; // Bypass Mode
    uchar8 ucRsvBits;               // Reserved Bits
} RVC_tzPGN_INV_AC_FLT_CFG_STS1;

// Inverter AC Status 4
typedef struct RVC_zPGN_INV_AC_STS4
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    RVC_teRVCV_FLT teVFlt;          // Voltage Fault
    RVC_teGENERIC_STSPAIR teFltSurgeProt; // Fault - Surge Protection
    RVC_teGENERIC_STSPAIR teFltHiFreq; // Fault - High Frequency
    RVC_teGENERIC_STSPAIR teFltLoFreq; // Fault - Low Frequency
    RVC_teGENERIC_STSPAIR teBypassModeAct; // Bypass Mode Active
    RVC_teRVC_QUALIFICATION_STS teQualifStat; // Qualification Status
} RVC_tzPGN_INV_AC_STS4;

// Charger Configuration Command 2
typedef struct RVC_zPGN_CHG_CFG_CMD2
{
    uchar8 ucInst;                  // Instance
    uchar8 ucMaxChgIPer;            // Maximum Charging Current Percent
    uchar8 ucChgRateLimitPerBankSz; // Charge Rate Limit as a Percent of Bank Size
    uchar8 ucShoreBrkSz;            // Shore Breaker Size
    uchar8 ucDefBattTemp;           // Default Battery Temperature
    uint16 uiReChgVolt;             // Recharge Voltage
} RVC_tzPGN_CHG_CFG_CMD2;

// Charger Configuration Status 2
typedef struct RVC_zPGN_CHG_CFG_STS2
{
    uchar8 ucInst;                  // Instance
    uchar8 ucMaxChgIPer;            // Maximum Charging Current Percent
    uchar8 ucChgRateLimitPerBankSz; // Charge Rate Limit as a Percent of Bank Size
    uchar8 ucShoreBrkSz;            // Shore Breaker Size
    uchar8 ucDefBattTemp;           // Default Battery Temperature
    uint16 uiReChgVolt;             // Recharge Voltage
} RVC_tzPGN_CHG_CFG_STS2;

// Charger Equalization Configuration Command
typedef struct RVC_zPGN_CHG_EQLZ_CFG_CMD
{
    uchar8 ucInst;                  // Instance
    uint16 uiEqlzV;                 // Equalization Voltage
    uint16 uiEqlzTime;              // Equalization Time
} RVC_tzPGN_CHG_EQLZ_CFG_CMD;

// Charger Equalization Configuration Status
typedef struct RVC_zPGN_CHG_EQLZ_CFG_STS
{
    uchar8 ucInst;                  // Instance
    uint16 uiEqlzV;                 // Equalization Voltage
    uint16 uiEqlzTime;              // Equalization Time
} RVC_tzPGN_CHG_EQLZ_CFG_STS;

// Charger Equalization Status
typedef struct RVC_zPGN_CHG_EQLZ_STS
{
    uchar8 ucInst;                  // Instance
    uint16 uiTimeRem;               // Time Remaning
    RVC_teRVC_PRE_CHG_STS tePreChgSts; // Pre-charging status
} RVC_tzPGN_CHG_EQLZ_STS;

// AC Fault Control Configuration Command 2
typedef struct RVC_zPGN_AC_FLT_CTRL_CFG_CMD2
{
    uchar8 ucInst;                  // Instance
    RVC_teGENERIC_STSPAIR teLine;   // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uchar8 ucHiFreqLimit;           // High Frequency Limit
    uchar8 ucLoFreqLimit;           // Low Frequency Limit
} RVC_tzPGN_AC_FLT_CTRL_CFG_CMD2;

// AC Fault Control Configuration Command 1
typedef struct RVC_zPGN_AC_FLT_CTRL_CFG_CMD1
{
    uchar8 ucInst;                  // Instance
    RVC_teGENERIC_STSPAIR teLine;   // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uchar8 ucExtremeLoV;            // Extreme Low Voltage Level
    uchar8 ucLoV;                   // Low Voltage Level
    uchar8 ucHiV;                   // High Voltage Level
    uchar8 ucExtremeHiV;            // Extreme High Voltage Level
    uchar8 ucQualTime;              // Qualification Time
    RVC_teGENERIC_STSPAIR teBypassMode; // Bypass Mode
} RVC_tzPGN_AC_FLT_CTRL_CFG_CMD1;

// AC Fault Control Configuration Status 2
typedef struct RVC_zPGN_AC_FLT_CTRL_CFG_STS2
{
    uchar8 ucInst;                  // Instance
    RVC_teGENERIC_STSPAIR teLine;   // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uchar8 ucHiFreqLimit;           // High Frequency Limit
    uchar8 ucLoFreqLimit;           // Low Frequency Limit
} RVC_tzPGN_AC_FLT_CTRL_CFG_STS2;

// AC Fault Control Configuration Status 1
typedef struct RVC_zPGN_AC_FLT_CTRL_CFG_STS1
{
    uchar8 ucInst;                  // Instance
    RVC_teGENERIC_STSPAIR teLine;   // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uchar8 ucExtremeLoV;            // Extreme Low Voltage Level
    uchar8 ucLoV;                   // Low Voltage Level
    uchar8 ucHiV;                   // High Voltage Level
    uchar8 ucExtremeHiV;            // Extreme High Voltage Level
    uchar8 ucQualTime;              // Qualification Time
    RVC_teGENERIC_STSPAIR teBypassMode; // Bypass Mode
} RVC_tzPGN_AC_FLT_CTRL_CFG_STS1;

// AGS Criterion Command - Xfer Switch AC Voltage
typedef struct RVC_zPGN_AGS_CRIT_CMD_XFER_AC_V
{
    uchar8 ucInst;                  // Instance
    RVC_teCMD_PAIR teCmd;           // Command
    RVC_teCMD_PAIR teActSts;        // Active Status
    RVC_teRVCAGS_CRITERION_TYPE teCritType; // Criterion Type
    uchar8 ucAcInst;                // AC Instance
    uint16 uiAcVThresh;             // AC Voltage Threshold
    uchar8 ucTimeUnderThresh;       // Time Under Threshold
} RVC_tzPGN_AGS_CRIT_CMD_XFER_AC_V;

// AGS Criterion Command - DC State of Charge
typedef struct RVC_zPGN_AGS_CRIT_CMD_DC_SOC
{
    uchar8 ucInst;                  // Instance
    RVC_teCMD_PAIR teCmd;           // Command
    RVC_teCMD_PAIR teActSts;        // Active Status
    RVC_teRVCAGS_CRITERION_TYPE teCritType; // Criterion Type
    uchar8 ucDcInst;                // DC Instance
    uchar8 ucDcSocThresh;           // DC SOC Threshold
    uchar8 ucTimeUnderThresh;       // Time Under Threshold
} RVC_tzPGN_AGS_CRIT_CMD_DC_SOC;

// AGS Criterion Command - DC Voltage
typedef struct RVC_zPGN_AGS_CRIT_CMD_DC_V
{
    uchar8 ucInst;                  // Instance
    RVC_teCMD_PAIR teCmd;           // Command
    RVC_teCMD_PAIR teActSts;        // Active Status
    RVC_teRVCAGS_CRITERION_TYPE teCritType; // Criterion Type
    uchar8 ucDcInst;                // DC Instance
    uint16 uiDcVThresh;             // DC Voltage Threshold
    uchar8 ucTimeUnderThresh;       // Time Under Threshold
} RVC_tzPGN_AGS_CRIT_CMD_DC_V;

// AGS Criterion Command - Ambient Temperature
typedef struct RVC_zPGN_AGS_CRIT_CMD_AMB_TEMP
{
    uchar8 ucInst;                  // Instance
    RVC_teCMD_PAIR teCmd;           // Command
    RVC_teCMD_PAIR teActSts;        // Active Status
    RVC_teRVCAGS_CRITERION_TYPE teCritType; // Criterion Type
    uchar8 ucThermAmbInst;          // Thermostat Ambient Instance
    uint16 uiAmbTempThresh;         // Ambient Temperature Threshold
    uchar8 ucTimeUnderThresh;       // Time Under Threshold
} RVC_tzPGN_AGS_CRIT_CMD_AMB_TEMP;

// AGS Criterion Command - DC Current
typedef struct RVC_zPGN_AGS_CRIT_CMD_DC_I
{
    uchar8 ucInst;                  // Instance
    RVC_teCMD_PAIR teCmd;           // Command
    RVC_teCMD_PAIR teActSts;        // Active Status
    RVC_teRVCAGS_CRITERION_TYPE teCritType; // Criterion Type
    uchar8 ucDcInst;                // DC Instance
    uint16 uiDcIThresh;             // DC Current Threshold
    uchar8 ucTimeOverThresh;        // Time Over Threshold
} RVC_tzPGN_AGS_CRIT_CMD_DC_I;

// AGS Criterion Status - Ambient Temperature
typedef struct RVC_zPGN_AGS_CRIT_STS_AMB_TEMP
{
    uchar8 ucInst;                  // Instance
    RVC_teGENERIC_STSPAIR teCurrDemandSts; // Current Demand Status
    RVC_teGENERIC_STSPAIR teActSts; // Active Status
    RVC_teRVCAGS_CRITERION_TYPE teCritType; // Criterion Type
    uchar8 ucThermAmbInst;          // Thermostat Ambient Instance
    uint16 uiAmbTempThresh;         // Ambient Temperature Threshold
    uchar8 ucTimeUnderThresh;       // Time Under Threshold
} RVC_tzPGN_AGS_CRIT_STS_AMB_TEMP;

// AGS Criterion Status - DC Voltage
typedef struct RVC_zPGN_AGS_CRIT_STS_DC_V
{
    uchar8 ucInst;                  // Instance
    RVC_teGENERIC_STSPAIR teCurrDemandSts; // Current Demand Status
    RVC_teGENERIC_STSPAIR teActSts; // Active Status
    RVC_teRVCAGS_CRITERION_TYPE teCritType; // Criterion Type
    uchar8 ucDcInst;                // DC Instance
    uint16 uiDcVThresh;             // DC Voltage Threshold
    uchar8 ucTimeUnderThresh;       // Time Under Threshold
} RVC_tzPGN_AGS_CRIT_STS_DC_V;

// AGS Criterion Status - DC State of Charge
typedef struct RVC_zPGN_AGS_CRIT_STS_DC_SOC
{
    uchar8 ucInst;                  // Instance
    RVC_teGENERIC_STSPAIR teCurrDemandSts; // Current Demand Status
    RVC_teGENERIC_STSPAIR teActSts; // Active Status
    RVC_teRVCAGS_CRITERION_TYPE teCritType; // Criterion Type
    uchar8 ucDcInst;                // DC Instance
    uchar8 ucDcSocThresh;           // DC SOC Threshold
    uchar8 ucTimeUnderThresh;       // Time Under Threshold
} RVC_tzPGN_AGS_CRIT_STS_DC_SOC;

// AGS Criterion Status - DC Current
typedef struct RVC_zPGN_AGS_CRIT_STS_DC_I
{
    uchar8 ucInst;                  // Instance
    RVC_teGENERIC_STSPAIR teCurrDemandSts; // Current Demand Status
    RVC_teGENERIC_STSPAIR teActSts; // Active Status
    RVC_teRVCAGS_CRITERION_TYPE teCritType; // Criterion Type
    uchar8 ucDcInst;                // DC Instance
    uint16 uiDcIThresh;             // DC Current Threshold
    uchar8 ucTimeOverThresh;        // Time Over Threshold
} RVC_tzPGN_AGS_CRIT_STS_DC_I;

// AGS Criterion Status - Xfer Switch AC Voltage
typedef struct RVC_zPGN_AGS_CRIT_STS_XFER_AC_V
{
    uchar8 ucInst;                  // Instance
    RVC_teGENERIC_STSPAIR teCurrDemandSts; // Current Demand Status
    RVC_teGENERIC_STSPAIR teActSts; // Active Status
    RVC_teRVCAGS_CRITERION_TYPE teCritType; // Criterion Type
    uchar8 ucAcInst;                // AC Instance
    uint16 uiAcVThresh;             // AC Voltage Threshold
    uchar8 ucTimeUnderThresh;       // Time Under Threshold
} RVC_tzPGN_AGS_CRIT_STS_XFER_AC_V;

// Generator Demand Command
typedef struct RVC_zPGN_GEN_DEMAND_CMD
{
    RVC_teGENERIC_STSPAIR teGenDemand; // Generator Demand
    RVC_teGENERIC_STSPAIR teQuietTimeOverride; // Quiet Time Override
    RVC_teGENERIC_STSPAIR teExtActRst; // External Activity Reset
    RVC_teGENERIC_STSPAIR teManOverride; // Manual Override
    RVC_teGENERIC_STSPAIR teGenLock; // Generator Lock
    uchar8 ucSetQuietTimeBeginHr;   // Set Quiet Time Begin Hour
    uchar8 ucSetQuietTimeBeginMin;  // Set Quiet Time Begin Minute
    uchar8 ucSetQuietTimeEndHr;     // Set Quiet Time End Hour
    uchar8 ucSetQuietTimeEndMin;    // Set Quiet Time End Minute
    uchar8 ucSetMinCycTime;         // Set Minmum Cycle Time
} RVC_tzPGN_GEN_DEMAND_CMD;

// Generator Demand Status
typedef struct RVC_zPGN_GEN_DEMAND_STS
{
    RVC_teGENERIC_STSPAIR teGenDemand; // Generator Demand
    RVC_teGENERIC_STSPAIR teIntGenDemand; // Internal Generator Demand
    RVC_teGENERIC_STSPAIR teNetGenDemand; // Network Generator Demand
    RVC_teGENERIC_STSPAIR teExtActDetect; // External Activity Detected
    RVC_teGENERIC_STSPAIR teManOverrideDetect; // Manual Override Detected
    RVC_teGENERIC_STSPAIR teQuietTime; // Quiet Time
    RVC_teGENERIC_STSPAIR teQuietTimeOverride; // Quiet Time Override
    RVC_teGENERIC_STSPAIR teGenLock; // Generator Lock
    uchar8 ucQuietTimeBeginHr;      // Quiet Time Begin Hour
    uchar8 ucQuietTimeBeginMin;     // Quiet Time Begin Minute
    uchar8 ucQuietTimeEndHr;        // Quiet Time End Hour
    uchar8 ucQuietTimeEndMin;       // Quiet Time End Minute
    uchar8 ucMinCycTime;            // Minmum Cycle Time
} RVC_tzPGN_GEN_DEMAND_STS;

// Charger Statistics Status
typedef struct RVC_zPGN_CHG_STATS_STS
{
    uchar8 ucInst;                  // Instance
} RVC_tzPGN_CHG_STATS_STS;

// Charger Configuration Command 1
typedef struct RVC_zPGN_CHG_CFG_CMD1
{
    uchar8 ucInst;                  // Instance
    RVC_teRVC_CHG_ALG teChgAlg;     // Charging Algorithm
    RVC_teRVC_CHG_MODE teChgMode;   // Charger Mode
    RVC_teGENERIC_STSPAIR teBattSensPres; // Battery Sensor Present
    RVC_teAC_LINE_NUM teChgInstLine; // Charger Installation Line
    uint16 uiBattBankSz;            // Battery Bank Size
    RVC_teRVC_BATT_TYPE teBattType; // Battery Type
    uchar8 ucMaxChgI;               // Maximum Charging Current
} RVC_tzPGN_CHG_CFG_CMD1;

// Charger Command
typedef struct RVC_zPGN_CHG_CMD
{
    uchar8 ucInst;                  // Instance
    RVC_teRVC_CHG_CMD teSts;        // Status
    RVC_teCMD_PAIR teDfltStatePwrUp; // Default State on Power Up
    RVC_teCMD_PAIR teAutoReChgEn;   // Auto Recharge Enabled
    RVC_teRVC_FORCE_CHG teForceChg; // Force Charge
    uint16 uiCtrlVCCCV;             // Control Voltage for CC/CV Mode
    uint16 uiCtrlICCCV;             // Control Current for CC/CV Mode
} RVC_tzPGN_CHG_CMD;

// Charger Configuration Status 1
typedef struct RVC_zPGN_CHG_CFG_STS1
{
    uchar8 ucInst;                  // Instance
    RVC_teRVC_CHG_ALG teChgAlg;     // Charging Algorithm
    RVC_teRVC_CHG_MODE teChgMode;   // Charger Mode
    RVC_teGENERIC_STSPAIR teBattSensPres; // Battery Sensor Present
    RVC_teAC_LINE_NUM teChgInstLine; // Charger Installation Line
    RVC_teRVC_BATT_TYPE teBattType; // Battery Type
    uint16 uiBattBankSz;            // Battery Bank Size
    uint16 uiMaxChgI;               // Maximum Charging Current
} RVC_tzPGN_CHG_CFG_STS1;

// Charger Status
typedef struct RVC_zPGN_CHG_STS
{
    uchar8 ucInst;                  // Instance
    uint16 uiChgV;                  // Charge Voltage
    uint16 uiChgI;                  // Charge Current
    uchar8 ucChgIPerMax;            // Charge Current Percent of Maximum
    RVC_teRVC_CHG_OP_STATE teOpState; // Operating State
    RVC_teCMD_PAIR teDefltStatePwrUp; // Default State on Power Up
    RVC_teCMD_PAIR teAutoReChgEn;   // Auto Recharge Enable
    RVC_teRVC_FORCE_CHG teForceChg; // Force Charge
} RVC_tzPGN_CHG_STS;

// Charger AC Status 3
typedef struct RVC_zPGN_CHG_AC_STS3
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    RVC_teRVCAC_WAVEFORM teWaveform; // Waveform
    RVC_teRVC_PHASE_STS tePhsSts;   // Phase Status
    uint16 uiRealPwr;               // Real Power
    uint16 uiReactivePwr;           // Reactive Power
    uchar8 ucHarmonicDist;          // Hamonic Distortion
    uchar8 ucCompLeg;               // Complementary Leg
} RVC_tzPGN_CHG_AC_STS3;

// Charger AC Status 2
typedef struct RVC_zPGN_CHG_AC_STS2
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uint16 uiPkV;                   // Peak Voltage
    uint16 uiPkI;                   // Peak Current
    uint16 uiGndI;                  // Ground Current
    uchar8 ucCap;                   // Capacity
} RVC_tzPGN_CHG_AC_STS2;

// Charger AC Status 1
typedef struct RVC_zPGN_CHG_AC_STS1
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uint16 uiRmsV;                  // RMS Voltage
    uint16 uiRmsI;                  // RMS Current
    uint16 uiFreq;                  // Frequency
    RVC_teGENERIC_STSPAIR teFltOpnGnd; // Fault - Open Ground
    RVC_teGENERIC_STSPAIR teFltOpnNeutral; // Fault - Open Neutral
    RVC_teGENERIC_STSPAIR teFltRevPolarity; // Fault - Reverse Polarity
    RVC_teGENERIC_STSPAIR teFltGndFlt; // Fault - Ground Fault
} RVC_tzPGN_CHG_AC_STS1;

// Inverter OPS Status
typedef struct RVC_zPGN_INV_OPS_STS
{
    uchar8 ucInst;                  // Instance
    uchar8 ucTotalInst;             // Total Instance Count
    uint16 uiVoltage;               // Voltage
    uint16 uiCurrent;               // Current
    uchar8 ucTemp;                  // Temperature
} RVC_tzPGN_INV_OPS_STS;

// Inverter HVDC Bus Status
typedef struct RVC_zPGN_INV_HV_DC_BUS_STS
{
    uchar8 ucInst;                  // Instance
    uchar8 ucTotalInst;             // Total Instance Count
    uint16 uiVoltage;               // Voltage
    uint16 uiCurrent;               // Current
    uchar8 ucTemp;                  // Temperature
} RVC_tzPGN_INV_HV_DC_BUS_STS;

// Inverter APS Status
typedef struct RVC_zPGN_INV_APS_STS
{
    uchar8 ucInst;                  // Instance
    uchar8 ucTotalInst;             // Total Instance Count
    uint16 uiVoltage;               // Voltage
    uint16 uiCurrent;               // Current
    uchar8 ucTemp;                  // Temperature
} RVC_tzPGN_INV_APS_STS;

// Inverter Statistics Status
typedef struct RVC_zPGN_INV_STATS_STS
{
    uchar8 ucInst;                  // Instance
    uint16 uiNumDcUvDetects;        // Number of DC Under Voltage Detections
    uint16 uiNumInvAcOutOvlds;      // Number of Inverter AC Output Overloads
    uint16 uiNumLdSensEngage;       // Number of Times Load Sense has Been Engaged
    uint16 uiLowestDcV;             // Lowest DC Voltage
    uint16 uiHighestDcV;            // Highest DC Voltage
    uint16 uiLowestAcVIn;           // Lowest AC Input Voltage
    uint16 uiHighestAcVIn;          // Highest AC Input Voltage
    uint16 uiLowestAcVOut;          // Lowest AC Output Voltage
    uint16 uiHighestAcVOut;         // Highest AC Output Voltage
} RVC_tzPGN_INV_STATS_STS;

// Inverter Configuration Command 2
typedef struct RVC_zPGN_INV_CFG_CMD2
{
    uchar8 ucInst;                  // Instance
    uint16 uiDcSrcSdVMax;           // DC Source Shutdown Voltage - Maximum
    uint16 uiDcSrcWrnVMin;          // DC Source Warning Voltage - Minimum
    uint16 uiDcSrcWrnVMax;          // DC Source Warning Voltage - Maximum
} RVC_tzPGN_INV_CFG_CMD2;

// Inverter Configuration Command 1
typedef struct RVC_zPGN_INV_CFG_CMD1
{
    uchar8 ucInst;                  // Instance
    uint16 uiLoadSensePwrThresh;    // Load Sense Power Threshold
    uint16 uiLoadSenseIntvl;        // Load Sense Interval
    uint16 uiDcSrcSdVMin;           // DC Source Shutdown Voltage - Minimum
} RVC_tzPGN_INV_CFG_CMD1;

// Inverter Configuration Status 2
typedef struct RVC_zPGN_INV_CFG_STS2
{
    uchar8 ucInst;                  // Instance
    uint16 uiDcSrcSdVMax;           // DC Source Shutdown Voltage - Maximum
    uint16 uiDcSrcWrnVMin;          // DC Source Warning Voltage - Minimum
    uint16 uiDcSrcWrnVMax;          // DC Source Warning Voltage - Maximum
} RVC_tzPGN_INV_CFG_STS2;

// Inverter Configuration Status 1
typedef struct RVC_zPGN_INV_CFG_STS1
{
    uchar8 ucInst;                  // Instance
    uint16 uiLoadSensePwrThresh;    // Load Sense Power Threshold
    uint16 uiLoadSenseIntvl;        // Load Sense Interval
    uint16 uiDcSrcSdVMin;           // DC Source Shutdown Voltage - Minimum
    RVC_teCMD_PAIR teInvEnOnStartUp; // Inverter enable on startup
    RVC_teCMD_PAIR teLdSenseEnOnStartUp; // Load sense enable on startup
    RVC_teCMD_PAIR teAcPassThruEnOnStartUp; // AC pass-through enable on startup
    RVC_teCMD_PAIR teGenSupportEnOnStartUp; // Generator Support enable on startup
} RVC_tzPGN_INV_CFG_STS1;

// Inverter Command
typedef struct RVC_zPGN_INV_CMD
{
    uchar8 ucInst;                  // Instance
    RVC_teCMD_PAIR teInvEn;         // Inverter Enable
    RVC_teCMD_PAIR teLoadSenseEn;   // Load Sense Enable
    RVC_teCMD_PAIR tePassThruEn;    // Pass Thru Enable
    RVC_teCMD_PAIR teGenSupportEn;  // Generator Support Enable
    RVC_teCMD_PAIR teInvEnOnStartUp; // Inverter enable on startup
    RVC_teCMD_PAIR teLdSenseEnOnStartUp; // Load sense enable on startup
    RVC_teCMD_PAIR teAcPassThruEnOnStartUp; // AC pass-through enable on startup
    RVC_teCMD_PAIR teGenSupportOnStartUp; // Generator Support enable on startup
} RVC_tzPGN_INV_CMD;

// Inverter Status
typedef struct RVC_zPGN_INV_STS
{
    uchar8 ucInst;                  // Instance
    RVC_teRVC_INV_STS teSts;        // Status
    RVC_teGENERIC_STSPAIR teBattTempSensPres; // Battery Temperature Sensor Present
    RVC_teGENERIC_STSPAIR teLoadSenseEn; // Load Sense Enabled
    RVC_teGENERIC_STSPAIR teInverterEn; // Inverter Enabled
    RVC_teGENERIC_STSPAIR tePassthruEn; // Pass-through Enabled
    RVC_teGENERIC_STSPAIR teGenSupportEn; // Generator Support Enabled
} RVC_tzPGN_INV_STS;

// Inverter AC Status 3
typedef struct RVC_zPGN_INV_AC_STS3
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    RVC_teRVCAC_WAVEFORM teWaveform; // Waveform
    RVC_teRVC_PHASE_STS tePhsSts;   // Phase Status
    uint16 uiRealPwr;               // Real Power
    uint16 uiReactivePwr;           // Reactive Power
    uchar8 ucHarmonicDist;          // Hamonic Distortion
    uchar8 ucCompLeg;               // Complementary Leg
} RVC_tzPGN_INV_AC_STS3;

// Inverter AC Status 2
typedef struct RVC_zPGN_INV_AC_STS2
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uint16 uiPkV;                   // Peak Voltage
    uint16 uiPkI;                   // Peak Current
    uint16 uiGndI;                  // Ground Current
    uchar8 ucCap;                   // Capacity
} RVC_tzPGN_INV_AC_STS2;

// Inverter AC Status 1
typedef struct RVC_zPGN_INV_AC_STS1
{
    uchar8 ucInst;                  // Instance
    RVC_teAC_LINE_NUM teLine;       // Line
    RVC_teGENERIC_STSPAIR teInOut;  // Input/Output
    uint16 uiRmsV;                  // RMS Voltage
    uint16 uiRmsI;                  // RMS Current
    uint16 uiFreq;                  // Frequency
    RVC_teGENERIC_STSPAIR teFltOpnGnd; // Fault - Open Ground
    RVC_teGENERIC_STSPAIR teFltOpnNeutral; // Fault - Open Neutral
    RVC_teGENERIC_STSPAIR teFltRevPolarity; // Fault - Reverse Polarity
    RVC_teGENERIC_STSPAIR teFltGndFlt; // Fault - Ground Fault
} RVC_tzPGN_INV_AC_STS1;

// Generator Starter Configuration Command
typedef struct RVC_zPGN_GEN_START_CFG_CMD
{
    RVC_teRVC_GEN_TYPE teGenType;   // Generator Type
    uchar8 ucGenPrecrankTime;       // Generator Pre-crank Time
    uchar8 ucGenMaxCrankTime;       // Generator Maximum Crank Time
    uchar8 ucGenStopTime;           // Generator Stop Time
} RVC_tzPGN_GEN_START_CFG_CMD;

// Generator Starter Configuration Status
typedef struct RVC_zPGN_GEN_START_CFG_STS
{
    RVC_teRVC_GEN_TYPE teGenType;   // Generator Type
    uchar8 ucGenPrecrankTime;       // Generator Pre-crank Time
    uchar8 ucGenMaxCrankTime;       // Generator Maximum Crank Time
    uchar8 ucGenStopTime;           // Generator Stop Time
} RVC_tzPGN_GEN_START_CFG_STS;

// Generator Command
typedef struct RVC_zPGN_GEN_CMD
{
    RVC_teRVC_GEN_CMD teCmd;        // Command
} RVC_tzPGN_GEN_CMD;

// Generator Status 2
typedef struct RVC_zPGN_GEN_STS2
{
    RVC_teGENERIC_STSPAIR teTempSdSw; // Temperature Shutdown Switch
    RVC_teGENERIC_STSPAIR teOilPresSdSw; // Oil Pressure Shutdown Switch
    RVC_teGENERIC_STSPAIR teOilLvlSw; // Oil Level Switch
    RVC_teGENERIC_STSPAIR teCautionLight; // Caution Light
    uchar8 ucEngCoolantTemp;        // Engine Coolant Temperature
    uchar8 ucEngOilPress;           // Engine Oil Pressure
    uint16 uiEngRpm;                // Engine RPM
    uint16 uiFuelRate;              // Fuel Rate
} RVC_tzPGN_GEN_STS2;

// Generator Status 1
typedef struct RVC_zPGN_GEN_STS1
{
    RVC_teRVC_INV_STS teSts;        // Status
    uint32 ulEngRunTime;            // Engine Run Time
    uchar8 ucEngLoad;               // Engine load
    uint16 uiStartBattV;            // Start Battery Voltage
} RVC_tzPGN_GEN_STS1;

// Communication Status 3
typedef struct RVC_zPGN_COMM_STS3
{
    uint16 uiBusOffErrCnt;          // Bus-Off Error Count
    uint16 uiRxFrameDropCnt;        // Receive Frames Dropped Count
    uint16 uiTxFrameDropCnt;        // Transmit Frames Dropped Count
} RVC_tzPGN_COMM_STS3;

// Communication Status 2
typedef struct RVC_zPGN_COMM_STS2
{
    uint32 ulTxFramesCnt;           // Transmitted Frames Count
    uint32 ulRxFramesCnt;           // Received Frames Count
} RVC_tzPGN_COMM_STS2;

// Communication Status 1
typedef struct RVC_zPGN_COMM_STS1
{
    uint32 ulTmrCnt;                // Timer Count
    uint16 uiRxErrCnt;              // Receive Error Count
    uint16 uiTxErrCnt;              // Transmit Error Count
} RVC_tzPGN_COMM_STS1;

// DC Source Status 3
typedef struct RVC_zPGN_DC_SRC_STS3
{
    RVC_teDC_SRC_ID teInst;         // Instance
    RVC_teRVC_DEVICE_PRIORITY teDevPri; // Device Priority
    uchar8 ucSoh;                   // State of Health
    uint16 uiCapRemain;             // Capacity Remaining
    uchar8 ucRelCap;                // Relative Capacity
    uint16 uiAcRmsRipple;           // AC RMS Ripple
} RVC_tzPGN_DC_SRC_STS3;

// DC Source Status 2
typedef struct RVC_zPGN_DC_SRC_STS2
{
    RVC_teDC_SRC_ID teInst;         // Instance
    RVC_teRVC_DEVICE_PRIORITY teDevPri; // Device Priority
    uint16 uiSrcTemp;               // Source Temperature
    uchar8 ucSoc;                   // State of Charge
    uint16 uiTimeRemain;            // Time Remaining
    RVC_teTIME_REMAIN_INTERP teTimeRemainInterp; // Time Remaining Interpretation
} RVC_tzPGN_DC_SRC_STS2;

// DC Source Status 1
typedef struct RVC_zPGN_DC_SRC_STS1
{
    RVC_teDC_SRC_ID teInst;         // Instance
    RVC_teRVC_DEVICE_PRIORITY teDevPri; // Device Priority
    uint16 uiDcV;                   // DC Voltage
    uint32 ulDcI;                   // DC Current
} RVC_tzPGN_DC_SRC_STS1;

// Set System Date and Time
typedef struct RVC_zPGN_SET_SYS_DATE_TIME
{
    uchar8 ucYr;                    // Year
    uchar8 ucMn;                    // Month
    uchar8 ucDate;                  // Date
    uchar8 ucDow;                   // Day of the week
    uchar8 ucHr;                    // Hour
    uchar8 ucMin;                   // Minute
    uchar8 ucSec;                   // Second
    uchar8 ucTz;                    // Time Zone
} RVC_tzPGN_SET_SYS_DATE_TIME;

// System Date and Time Status
typedef struct RVC_zPGN_SYS_DATE_TIME_STS
{
    uchar8 ucYr;                    // Year
    uchar8 ucMn;                    // Month
    uchar8 ucDate;                  // Date
    uchar8 ucDow;                   // Day of the week
    uchar8 ucHr;                    // Hour
    uchar8 ucMin;                   // Minute
    uchar8 ucSec;                   // Second
    uchar8 ucTz;                    // Time Zone
} RVC_tzPGN_SYS_DATE_TIME_STS;


#endif

// End of file.
//! @}
