/******************************************************************************

  (c) 2003 - 2018 Xantrex Canada ULC. All rights reserved.
  All trademarks are owned or licensed by Xantrex Canada ULC,
  its subsidiaries or affiliated companies.

****************************************************************************//**

  @addtogroup n2kudefs n2kudefs
  @{

    @brief 
      Definitions and types used by the application interfacing with NMEA 2000.
      The file defines Parameter Group Numbers, the structures used by the
      application, and the enums used in many of the structure fields.


  @note
    - Autogenerated.

*******************************************************************************/
#ifndef N2KUDEFS_H
#define N2KUDEFS_H

#include "LIB_stddefs.h"

#include "pgnudefs.h"

#define N2K_VER 10201L
#define N2K_BUILD 669

/************************************************************************************
    The following defines the name for each PGN
************************************************************************************/

#define N2K_PGN_AC_IN_STS                 0x01FEFFL
#define N2K_PGN_AC_OUT_STS                0x01FEFEL
#define N2K_PGN_AGS_STS                   0x01FEFCL
#define N2K_PGN_BATT_DETAIL_STS           0x01FEFAL
#define N2K_PGN_BATT_STS                  0x01F214L
#define N2K_PGN_CHG_STS                   0x01FEFDL
#define N2K_PGN_INV_STS                   0x01FEFBL
#define N2K_PGN_ISO_ACK                   0x00E800L
#define N2K_PGN_ISO_ADDR_CLAIM            0x00EE00L
#define N2K_PGN_ISO_CMD_ADDR              0x00FED8L
#define N2K_PGN_ISO_REQ                   0x00EA00L
#define N2K_PGN_ISO_TP_CONN_MAN           0x00EC00L
#define N2K_PGN_ISO_TP_CONN_MAN           0x00EC00L
#define N2K_PGN_ISO_TP_CONN_MAN           0x00EC00L
#define N2K_PGN_ISO_TP_CONN_MAN           0x00EC00L
#define N2K_PGN_ISO_TP_CONN_MAN           0x00EC00L
#define N2K_PGN_ISO_TP_XFER               0x00EB00L
#define N2K_PGN_PGN_LIST                  0x01EE00L
#define N2K_PGN_PGN_LIST                  0x01EE00L
#define N2K_PGN_PROD_INF                  0x01F014L
#define N2K_PGN_SYS_TIME                  0x01F010L
#define N2K_PGN_TIME_DATE                 0x01F809L

// Count of PGNs
#define N2K_PGN_TOTAL_COUNT          22
#define N2K_PGN_FASTPACKET_COUNT     3

/************************************************************************************
    The following defines give the length of each PGN in bytes
************************************************************************************/

#define N2K_DLC_AC_IN_STS                   1
#define N2K_DLC_EXTRA_AC_IN_STS            18
#define N2K_DLC_AC_OUT_STS                  1
#define N2K_DLC_EXTRA_AC_OUT_STS           18
#define N2K_DLC_AGS_STS                     8
#define N2K_DLC_BATT_DETAIL_STS             8
#define N2K_DLC_BATT_STS                    8
#define N2K_DLC_CHG_STS                     8
#define N2K_DLC_INV_STS                     8
#define N2K_DLC_ISO_ACK                     8
#define N2K_DLC_ISO_ADDR_CLAIM              8
#define N2K_DLC_ISO_CMD_ADDR                9
#define N2K_DLC_ISO_REQ                     3
#define N2K_DLC_ISO_TP_CONN_MAN_ABORT       8
#define N2K_DLC_ISO_TP_CONN_MAN_BAM         8
#define N2K_DLC_ISO_TP_CONN_MAN_CTS         8
#define N2K_DLC_ISO_TP_CONN_MAN_EOM         8
#define N2K_DLC_ISO_TP_CONN_MAN_RTS         8
#define N2K_DLC_ISO_TP_XFER                 8
#define N2K_DLC_PGN_LIST_RX                 1
#define N2K_DLC_EXTRA_PGN_LIST_RX           3
#define N2K_DLC_PGN_LIST_TX                 1
#define N2K_DLC_EXTRA_PGN_LIST_TX           3
#define N2K_DLC_PROD_INF                  134
#define N2K_DLC_SYS_TIME                    8
#define N2K_DLC_TIME_DATE                   8

/************************************************************************************
    Enums used for some message fields
************************************************************************************/

// Time Source
// Used in the following fields:
//   N2K_tzPGN_SYS_TIME.eSource
typedef enum N2K_eTIME_SRC
{
    N2K_eTIME_SRC_GPS                   =   0,
    N2K_eTIME_SRC_GLONASS               =   1,
    N2K_eTIME_SRC_WWV                   =   2,
    N2K_eTIME_SRC_LOCAL_CESIUM          =   3,
    N2K_eTIME_SRC_LOCAL_RUBIDIUM        =   4,
    N2K_eTIME_SRC_LOCAL_CRYSTAL         =   5,
    N2K_eTIME_SRC_RESERVED              =   6,
    N2K_eTIME_SRC_NULL                  =  15
} N2K_teTIME_SRC;

// Industry Group
// Used in the following fields:
//   N2K_tzPGN_ISO_ADDR_CLAIM.eIndustryGroup
//   N2K_tzPGN_ISO_CMD_ADDR.eIndustryGroup
typedef enum N2K_eINDUSTRY_GRP
{
    N2K_eINDUSTRY_GRP_ALL               =   0,
    N2K_eINDUSTRY_GRP_ON_HIGHWAY        =   1,
    N2K_eINDUSTRY_GRP_AGRICULTURE       =   2,
    N2K_eINDUSTRY_GRP_CONSTRUCTION      =   3,
    N2K_eINDUSTRY_GRP_MARINE            =   4,
    N2K_eINDUSTRY_GRP_INDUSTRIAL        =   5,
    N2K_eINDUSTRY_GRP_RESERVED1         =   6,
    N2K_eINDUSTRY_GRP_RESERVED2         =   7
} N2K_teINDUSTRY_GRP;

// ACK Status
// Used in the following fields:
//   N2K_tzPGN_ISO_ACK.eCtrlByte
typedef enum N2K_eACK_STS
{
    N2K_eACK_STS_ACK                    =   0,
    N2K_eACK_STS_NAK                    =   1,
    N2K_eACK_STS_DNY                    =   2
} N2K_teACK_STS;

// Group Function Value
// Used in the following fields:
//   N2K_tzPGN_ISO_ACK.eGroupFunctionValue
typedef enum N2K_eGRP_FUNC_VALUE
{
    N2K_eGRP_FUNC_VALUE_DO_NOT_CARE     =  -1,
    N2K_eGRP_FUNC_VALUE_UNSUPPORTED     = 241,
    N2K_eGRP_FUNC_VALUE_NOT_AVAILABLE   = 242,
    N2K_eGRP_FUNC_VALUE_DATA_ACCESS_ERROR = 243,
    N2K_eGRP_FUNC_VALUE_DATA_NOT_AVAILABLE = 244,
    N2K_eGRP_FUNC_VALUE_DATA_INVALID    = 245,
    N2K_eGRP_FUNC_VALUE_DLC_INVALID     = 246,
    N2K_eGRP_FUNC_VALUE_MESSAGE_COUNT   = 247,
    N2K_eGRP_FUNC_VALUE_CAC             = 248,
    N2K_eGRP_FUNC_VALUE_CONFIGURATION_TYPE = 249,
    N2K_eGRP_FUNC_VALUE_PROTOCOL        = 250,
    N2K_eGRP_FUNC_VALUE_SECURITY        = 251,
    N2K_eGRP_FUNC_VALUE_WRONG_MODE      = 252,
    N2K_eGRP_FUNC_VALUE_MEMORY_ERROR    = 253
} N2K_teGRP_FUNC_VALUE;

// Function Code
// Used in the following fields:
//   N2K_tzPGN_ISO_ADDR_CLAIM.eDeviceFunction
//   N2K_tzPGN_ISO_CMD_ADDR.eDeviceFunction
typedef enum N2K_eFUNC_CODE
{
    N2K_eFUNC_CODE_SWITCH               = 130,
    N2K_eFUNC_CODE_LOAD                 = 140,
    N2K_eFUNC_CODE_INVERTER_CHARGER     = 150,
    N2K_eFUNC_CODE_CHARGER              = 151,
    N2K_eFUNC_CODE_INVERTER             = 152,
    N2K_eFUNC_CODE_AUTO_GEN_START       = 153,
    N2K_eFUNC_CODE_POWER_SYSTEM         = 250
} N2K_teFUNC_CODE;

// Device Class
// Used in the following fields:
//   N2K_tzPGN_ISO_ADDR_CLAIM.eDeviceClass
//   N2K_tzPGN_ISO_CMD_ADDR.eDeviceClass
typedef enum N2K_eDEVICE_CLASS
{
    N2K_eDEVICE_CLASS_RESERVED          =   0,
    N2K_eDEVICE_CLASS_SYSTEM_TOOLS      =  10,
    N2K_eDEVICE_CLASS_SAFETY            =  20,
    N2K_eDEVICE_CLASS_GATEWAY           =  25,
    N2K_eDEVICE_CLASS_POWER_MANAGEMENT  =  30,
    N2K_eDEVICE_CLASS_STEERING          =  40,
    N2K_eDEVICE_CLASS_PROPULSION        =  50,
    N2K_eDEVICE_CLASS_NAVIGATION        =  60,
    N2K_eDEVICE_CLASS_COMMUNICATIONS    =  70,
    N2K_eDEVICE_CLASS_INSTRUMENTATION_AND_GENERAL =  80,
    N2K_eDEVICE_CLASS_ENVIRONMENTAL     =  90,
    N2K_eDEVICE_CLASS_DECK_CARGO_FISHING = 100
} N2K_teDEVICE_CLASS;

// Generic status pair
// Used in the following fields:
//   N2K_tzPGN_INV_STS.eInvEnDis
//   N2K_tzPGN_INV_STS.eBattTempSensPres
//   N2K_tzPGN_CHG_STS.eChgEnDis
//   N2K_tzPGN_CHG_STS.eBattTempSensPres
//   N2K_tzPGN_CHG_STS.eEqlzPending
//   N2K_tzPGN_AGS_STS.eAgsToGenSig
typedef enum N2K_eGENERIC_STSPAIR
{
    N2K_eGENERIC_STSPAIR_OFF            =   0,
    N2K_eGENERIC_STSPAIR_ON             =   1,
    N2K_eGENERIC_STSPAIR_ERROR          =   2,
    N2K_eGENERIC_STSPAIR_UNKNOWN        =   3
} N2K_teGENERIC_STSPAIR;

// AC Acceptability
// Used in the following fields:
//   N2K_tzPGN_AC_IN_STS.eAcceptability
typedef enum N2K_eAC_ACCEPTABILITY
{
    N2K_eAC_ACCEPTABILITY_BAD_LEVEL     =   0,
    N2K_eAC_ACCEPTABILITY_BAD_FREQUENCY =   1,
    N2K_eAC_ACCEPTABILITY_BEING_QUALIFIED =   2,
    N2K_eAC_ACCEPTABILITY_GOOD          =   3
} N2K_teAC_ACCEPTABILITY;

// Charger Operating State
// Used in the following fields:
//   N2K_tzPGN_CHG_STS.eOpState
typedef enum N2K_eCHG_OP_STATE
{
    N2K_eCHG_OP_STATE_NOT_CHARGING      =   0,
    N2K_eCHG_OP_STATE_BULK              =   1,
    N2K_eCHG_OP_STATE_ABSORPTION        =   2,
    N2K_eCHG_OP_STATE_OVERCHARGE        =   3,
    N2K_eCHG_OP_STATE_EQUALIZE          =   4,
    N2K_eCHG_OP_STATE_FLOAT             =   5,
    N2K_eCHG_OP_STATE_NO_FLOAT          =   6,
    N2K_eCHG_OP_STATE_CONSTANT_VI       =   7,
    N2K_eCHG_OP_STATE_CHARGER_DISABLED  =   8,
    N2K_eCHG_OP_STATE_QUALIFYING_AC     =   9,
    N2K_eCHG_OP_STATE_QUALIFYING_APS    =  10,
    N2K_eCHG_OP_STATE_ENGAGING_CHARGER  =  11,
    N2K_eCHG_OP_STATE_CHARGER_FAULT     =  12,
    N2K_eCHG_OP_STATE_CHARGER_SUSPEND   =  13,
    N2K_eCHG_OP_STATE_AC_GOOD           =  14,
    N2K_eCHG_OP_STATE_APS_GOOD          =  15,
    N2K_eCHG_OP_STATE_AC_FAULT          =  16,
    N2K_eCHG_OP_STATE_CHARGE            =  17
} N2K_teCHG_OP_STATE;

// Inverter Operating State
// Used in the following fields:
//   N2K_tzPGN_INV_STS.eOpState
typedef enum N2K_eINV_OP_STATE
{
    N2K_eINV_OP_STATE_INVERT            =   0,
    N2K_eINV_OP_STATE_AC_PASSTHRU       =   1,
    N2K_eINV_OP_STATE_APS_ONLY          =   2,
    N2K_eINV_OP_STATE_LOAD_SENSE        =   3,
    N2K_eINV_OP_STATE_INVERTER_DISABLED =   4,
    N2K_eINV_OP_STATE_LOAD_SENSE_READY  =   5,
    N2K_eINV_OP_STATE_ENGAGING_INVERTER =   6,
    N2K_eINV_OP_STATE_INVERT_FAULT      =   7,
    N2K_eINV_OP_STATE_INVERTER_STANDBY  =   8
} N2K_teINV_OP_STATE;

// Charger Mode
// Used in the following fields:
//   N2K_tzPGN_CHG_STS.eChgMode
typedef enum N2K_eCHG_MODE
{
    N2K_eCHG_MODE_STAND_ALONE           =   0,
    N2K_eCHG_MODE_PRIMARY               =   1,
    N2K_eCHG_MODE_SECONDARY             =   2,
    N2K_eCHG_MODE_ECHO                  =   3
} N2K_teCHG_MODE;

// NMEA 2000 Certification Level
// Used in the following fields:
//   N2K_tzPGN_PROD_INF.eNmea2kCertLvl
typedef enum N2K_eNMEA2000CERTIFICATION_LVL
{
    N2K_eNMEA2000CERTIFICATION_LVL_LEVEL_A =   0,
    N2K_eNMEA2000CERTIFICATION_LVL_LEVEL_B =   1
} N2K_teNMEA2000CERTIFICATION_LVL;

// Group Function Transmit And Receive PGN List
// Used in the following fields:
//   N2K_tzPGN_PGN_LIST_TX.eTXedPgnGroupFunctionCode
//   N2K_tzPGN_PGN_LIST_RX.eRxedPgnGroupFunctionCode
typedef enum N2K_eGRP_FUNC_TX_AND_RX_PGN_LIST
{
    N2K_eGRP_FUNC_TX_AND_RX_PGN_LIST_TX_PGN_LIST_MESSAGE =   0,
    N2K_eGRP_FUNC_TX_AND_RX_PGN_LIST_RX_PGN_LIST_MESSAGE =   1
} N2K_teGRP_FUNC_TX_AND_RX_PGN_LIST;

// AC Line
// Used in the following fields:
//   N2K_tzPGN_AC_IN_STS.eLine
//   N2K_tzPGN_AC_OUT_STS.eLine
typedef enum N2K_eAC_LINE
{
    N2K_eAC_LINE_LINE1                  =   0,
    N2K_eAC_LINE_LINE2                  =   1,
    N2K_eAC_LINE_LINE3                  =   2
} N2K_teAC_LINE;


/************************************************************************************
    The structures for each PGN
************************************************************************************/

// ISO Acknowledgment
typedef struct N2K_zPGN_ISO_ACK
{
    N2K_teACK_STS teCtrlByte;       // Control Byte
    N2K_teGRP_FUNC_VALUE teGroupFunctionValue; // Group Function Value
    uint32 ulParmGrpNum;            // PGN of Requested Information
} N2K_tzPGN_ISO_ACK;

// ISO Request
typedef struct N2K_zPGN_ISO_REQ
{
    uint32 ulParmGrpNum;            // PGN being requested
} N2K_tzPGN_ISO_REQ;

// ISO Transport Protocol, Data Transfer
typedef struct N2K_zPGN_ISO_TP_XFER
{
    uchar8 ucSeqNumMultiPacketFrame; // Sequence number of multi-packet frame
    uchar8 aucMultiPacketPacketizedData[ 7 ]; // Multi-packet packetized data
} N2K_tzPGN_ISO_TP_XFER;

// ISO Transport Protocol, Connection Management - RTS
typedef struct N2K_zPGN_ISO_TP_CONN_MAN_RTS
{
    uchar8 ucRtsGroupFunctionCode;  // RTS Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesXmit;    // Total number of frames to be transmitted
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} N2K_tzPGN_ISO_TP_CONN_MAN_RTS;

// ISO Transport Protocol, Connection Management - CTS
typedef struct N2K_zPGN_ISO_TP_CONN_MAN_CTS
{
    uchar8 ucCtsGroupFunctionCode;  // CTS Group Function Code
    uchar8 ucNumFramesThatCanBeSent; // Number of frames that can be sent
    uchar8 ucNumNextFrameToBeSent;  // Number of next frame to be sent
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} N2K_tzPGN_ISO_TP_CONN_MAN_CTS;

// ISO Transport Protocol, Connection Management - EOM
typedef struct N2K_zPGN_ISO_TP_CONN_MAN_EOM
{
    uchar8 ucEomGroupFunctionCode;  // EOM Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesRxed;    // Total number of frames received
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} N2K_tzPGN_ISO_TP_CONN_MAN_EOM;

// ISO Transport Protocol, Connection Management - BAM
typedef struct N2K_zPGN_ISO_TP_CONN_MAN_BAM
{
    uchar8 ucBamGroupFunctionCode;  // BAM Group Function Code
    uint16 uiTotalMsgSz;            // Total message size, bytes
    uchar8 ucTotalNumFramesToBeSent; // Total number of frames to be sent
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} N2K_tzPGN_ISO_TP_CONN_MAN_BAM;

// ISO Transport Protocol, Connection Management - Abort
typedef struct N2K_zPGN_ISO_TP_CONN_MAN_ABORT
{
    uchar8 ucAbortGroupFunctionCode; // Abort Group Function Code
    uint32 ulParmGrpNum;            // PGN of multi-packet message
} N2K_tzPGN_ISO_TP_CONN_MAN_ABORT;

// ISO Address Claim
typedef struct N2K_zPGN_ISO_ADDR_CLAIM
{
    uint32 ulUniqueNumber;          // Unique Number (ISO Identity Number)
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    N2K_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    uchar8 ucRsvBit;                // Reserved Bit
    N2K_teDEVICE_CLASS teDeviceClass; // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    N2K_teINDUSTRY_GRP teIndustryGroup; // Industry Group
    uchar8 ucSelfCfgAddr;           // ISO Self Configurable Address
} N2K_tzPGN_ISO_ADDR_CLAIM;

// ISO Commanded Address
typedef struct N2K_zPGN_ISO_CMD_ADDR
{
    uint32 ulUniqueNumber;          // Unique Number (ISO Identity Number)
    uint16 uiManufacturerCode;      // Manufacturer Code
    uchar8 ucDeviceInstanceLower;   // Device Instance Lower (ISO ECU Instance)
    uchar8 ucDeviceInstanceUpper;   // Device Instance Upper (ISO Function Instance)
    N2K_teFUNC_CODE teDeviceFunction; // Device Function (ISO Function)
    uchar8 ucRsvBit;                // Reserved Bit
    N2K_teDEVICE_CLASS teDeviceClass; // Device Class
    uchar8 ucSystemInstance;        // System Instance (ISO Device Class Instance)
    N2K_teINDUSTRY_GRP teIndustryGroup; // Industry Group
    uchar8 ucSelfCfgAddr;           // ISO Self Configurable Address
    uchar8 ucPrefSrcAddr;           // Preferred Source Address
} N2K_tzPGN_ISO_CMD_ADDR;

// PGN List - Transmitted PGN's Group Function
typedef struct N2K_zPGN_EXTRA_PGN_LIST_TX
{
    uint32 ulTXPgns;                // Transmittable PGNs
} N2K_tzPGN_EXTRA_PGN_LIST_TX;

typedef struct N2K_zPGN_PGN_LIST_TX
{
    N2K_teGRP_FUNC_TX_AND_RX_PGN_LIST teTXedPgnGroupFunctionCode; // Transmitted PGN Group Function Code
    uint16 uiExtraCount;            // Count of extra structure
    N2K_tzPGN_EXTRA_PGN_LIST_TX *ptzExtra;   // Extra structures
} N2K_tzPGN_PGN_LIST_TX;

// PGN List - Received PGN's Group Function
typedef struct N2K_zPGN_EXTRA_PGN_LIST_RX
{
    uint32 ulRxPgns;                // Receivable PGNs
} N2K_tzPGN_EXTRA_PGN_LIST_RX;

typedef struct N2K_zPGN_PGN_LIST_RX
{
    N2K_teGRP_FUNC_TX_AND_RX_PGN_LIST teRxedPgnGroupFunctionCode; // Received PGN Group Function Code
    uint16 uiExtraCount;            // Count of extra structure
    N2K_tzPGN_EXTRA_PGN_LIST_RX *ptzExtra;   // Extra structures
} N2K_tzPGN_PGN_LIST_RX;

// System Time
typedef struct N2K_zPGN_SYS_TIME
{
    uchar8 ucSid;                   // Sequence ID
    N2K_teTIME_SRC teSource;        // Time Source
    uint16 uiDate;                  // Date
    uint32 ulTime;                  // Time
} N2K_tzPGN_SYS_TIME;

// Product Information
typedef struct N2K_zPGN_PROD_INF
{
    uint16 uiNmea2kDbVer;           // NMEA 2000 Database Version
    uint16 uiNmeaMfgProdCode;       // NMEA Manufacturer's Product Code
    uchar8 aucMfgModelId[ 32 ];     // Manufacturer's Model ID
    uchar8 aucMfgSwVerCode[ 32 ];   // Manufacturer's Software Version Code
    uchar8 aucMfgModelVer[ 32 ];    // Manufacturer's Model Version
    uchar8 aucMfgModelSerNo[ 32 ];  // Manufacturer's Model Serial Number
    N2K_teNMEA2000CERTIFICATION_LVL teNmea2kCertLvl; // NMEA 2000 Certification Level
    uchar8 ucLoadEquivalency;       // Load Equivalency Number
} N2K_tzPGN_PROD_INF;

// Battery Status
typedef struct N2K_zPGN_BATT_STS
{
    uchar8 ucBattInst;              // Battery Instance
    sint16 siBattPot;               // Battery Potential
    sint16 siBattCurr;              // Battery Current
    uint16 uiBattCaseTemp;          // Battery Case Temperature
    uchar8 ucSid;                   // SID
} N2K_tzPGN_BATT_STS;

// Time and Date
typedef struct N2K_zPGN_TIME_DATE
{
    uint16 uiDate;                  // Date
    uint32 ulTime;                  // Time
    sint16 siLocalOffs;             // Local Offset
} N2K_tzPGN_TIME_DATE;

// Battery Detailed Status
typedef struct N2K_zPGN_BATT_DETAIL_STS
{
    uchar8 ucSid;                   // SID
    uchar8 ucBattInst;              // Battery Instance
    uchar8 ucSoc;                   // State of Charge
    uchar8 ucSoh;                   // State of Health
    uint16 uiTimeRemain;            // Time Remaining
} N2K_tzPGN_BATT_DETAIL_STS;

// Inverter Status
typedef struct N2K_zPGN_INV_STS
{
    uchar8 ucACSrcNum;              // AC Source Number
    N2K_teINV_OP_STATE teOpState;   // Operating State
    N2K_teGENERIC_STSPAIR teInvEnDis; // Invert Enabled/Disabled
    N2K_teGENERIC_STSPAIR teBattTempSensPres; // Battery Temperature Sensor Present
} N2K_tzPGN_INV_STS;

// AGS Status
typedef struct N2K_zPGN_AGS_STS
{
    uchar8 ucAgsOpState;            // AGS Operating State
    uchar8 ucGenState;              // Generator State
    uchar8 ucGenOnReason;           // Generator On Reason
    uchar8 ucGenOffReason;          // Generator Off Reason
    N2K_teGENERIC_STSPAIR teAgsToGenSig; // AGS To Generator Signal
    uint16 uiTimeIntvl;             // Time Interval
} N2K_tzPGN_AGS_STS;

// Charger Status
typedef struct N2K_zPGN_CHG_STS
{
    uchar8 ucDCSrcNum;              // DC Source Number
    N2K_teCHG_OP_STATE teOpState;   // Operating State
    N2K_teCHG_MODE teChgMode;       // Charger Mode
    N2K_teGENERIC_STSPAIR teChgEnDis; // Charger Enabled/Disabled
    N2K_teGENERIC_STSPAIR teBattTempSensPres; // Battery Temperature Sensor Present
    N2K_teGENERIC_STSPAIR teEqlzPending; // Equalization Pending
    uint16 uiEqlzTimeRemain;        // Equalization Time Remaining
} N2K_tzPGN_CHG_STS;

// AC Output Status
typedef struct N2K_zPGN_EXTRA_AC_OUT_STS
{
    N2K_teAC_LINE teLine;           // Line
    uint16 uiVoltage;               // Voltage
    uint16 uiCurrent;               // Current
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulRealPwr;               // Real Power
    uint32 ulReactivePwr;           // Reactive Power
    schar8 scPwrFac;                // Power Factor
} N2K_tzPGN_EXTRA_AC_OUT_STS;

typedef struct N2K_zPGN_AC_OUT_STS
{
    uchar8 ucAcSrcNum;              // AC Source Number
    uint16 uiExtraCount;            // Count of extra structure
    N2K_tzPGN_EXTRA_AC_OUT_STS *ptzExtra;   // Extra structures
} N2K_tzPGN_AC_OUT_STS;

// AC Input Status
typedef struct N2K_zPGN_EXTRA_AC_IN_STS
{
    N2K_teAC_LINE teLine;           // Line
    N2K_teAC_ACCEPTABILITY teAcceptability; // Acceptability
    uint16 uiVoltage;               // Voltage
    uint16 uiCurrent;               // Current
    uint16 uiFreq;                  // Frequency
    uint16 uiBreakerSz;             // Breaker Size
    uint32 ulRealPwr;               // Real Power
    uint32 ulReactivePwr;           // Reactive Power
    schar8 scPwrFac;                // Power Factor
} N2K_tzPGN_EXTRA_AC_IN_STS;

typedef struct N2K_zPGN_AC_IN_STS
{
    uchar8 ucAcSrcNum;              // AC Source Number
    uint16 uiExtraCount;            // Count of extra structure
    N2K_tzPGN_EXTRA_AC_IN_STS *ptzExtra;   // Extra structures
} N2K_tzPGN_AC_IN_STS;


#endif

//*****************************************************************************
// End of file.
//! @}
//*****************************************************************************
