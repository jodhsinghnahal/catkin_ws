/******************************************************************************

  (c) 2003 - 2018 Xantrex Canada ULC. All rights reserved.
  All trademarks are owned or licensed by Xantrex Canada ULC,
  its subsidiaries or affiliated companies.

****************************************************************************//**

  @addtogroup scrftudefs scrftudefs
  @{

    @brief 
      Definitions and types intended to be used by an
      application interfacing with SmartCraft system.
      The file defines Parameter Group Numbers, the structures used by the
      application, and the enums used in many of the structure fields.


  @note
    - Autogenerated.

*******************************************************************************/
#ifndef SCRFTUDEFS_H
#define SCRFTUDEFS_H

#include "LIB_stddefs.h"

#include "pgnudefs.h"

#define SCRFT_VER 10200L
#define SCRFT_BUILD 666

/************************************************************************************
    The following defines the name for each PGN
************************************************************************************/

#define SCRFT_PGN_AC_IN_STS1              0x01FEFFL
#define SCRFT_PGN_AC_IN_STS2              0x01FEF9L
#define SCRFT_PGN_AC_IN_STS3              0x01FEF8L
#define SCRFT_PGN_AC_OUT_STS1             0x01FEFEL
#define SCRFT_PGN_AC_OUT_STS2             0x01FEF7L
#define SCRFT_PGN_AC_OUT_STS3             0x01FEF6L
#define SCRFT_PGN_AGS_STS                 0x01FEFCL
#define SCRFT_PGN_BATT_DETAIL_STS         0x01FEFAL
#define SCRFT_PGN_BATT_STS                0x01F214L
#define SCRFT_PGN_CHG_STS                 0x01FEFDL
#define SCRFT_PGN_INV_STS                 0x01FEFBL

// Count of PGNs
#define SCRFT_PGN_TOTAL_COUNT          11
#define SCRFT_PGN_FASTPACKET_COUNT     1

/************************************************************************************
    The following defines give the length of each PGN in bytes
************************************************************************************/

#define SCRFT_DLC_AC_IN_STS1                4
#define SCRFT_DLC_AC_IN_STS2                8
#define SCRFT_DLC_AC_IN_STS3                6
#define SCRFT_DLC_AC_OUT_STS1               4
#define SCRFT_DLC_AC_OUT_STS2               8
#define SCRFT_DLC_AC_OUT_STS3               6
#define SCRFT_DLC_AGS_STS                   8
#define SCRFT_DLC_BATT_DETAIL_STS           8
#define SCRFT_DLC_BATT_STS                  8
#define SCRFT_DLC_CHG_STS                   8
#define SCRFT_DLC_INV_STS                   8

/************************************************************************************
    Enums used for some message fields
************************************************************************************/

// Generic status pair
// Used in the following fields:
//   SCRFT_tzPGN_AGS_STS.eAgsToGenSig
//   SCRFT_tzPGN_INV_STS.eInvEnDis
//   SCRFT_tzPGN_INV_STS.eBattTempSensPres
//   SCRFT_tzPGN_CHG_STS.eChgEnDis
//   SCRFT_tzPGN_CHG_STS.eBattTempSensPres
//   SCRFT_tzPGN_CHG_STS.eEqlzPending
typedef enum SCRFT_eGENERIC_STSPAIR
{
    SCRFT_eGENERIC_STSPAIR_OFF          =   0,
    SCRFT_eGENERIC_STSPAIR_ON           =   1,
    SCRFT_eGENERIC_STSPAIR_ERROR        =   2,
    SCRFT_eGENERIC_STSPAIR_UNKNOWN      =   3
} SCRFT_teGENERIC_STSPAIR;

// AC Line
// Used in the following fields:
//   SCRFT_tzPGN_AC_IN_STS1.eLine
//   SCRFT_tzPGN_AC_IN_STS2.eLine
//   SCRFT_tzPGN_AC_IN_STS3.eLine
//   SCRFT_tzPGN_AC_OUT_STS2.eLine
//   SCRFT_tzPGN_AC_OUT_STS3.eLine
//   SCRFT_tzPGN_AC_OUT_STS1.eLine
typedef enum SCRFT_eAC_LINE
{
    SCRFT_eAC_LINE_LINE0                =   0,
    SCRFT_eAC_LINE_LINE1                =   1,
    SCRFT_eAC_LINE_LINE3                =   2
} SCRFT_teAC_LINE;

// AC Acceptability
// Used in the following fields:
//   SCRFT_tzPGN_AC_IN_STS1.eAcceptability
typedef enum SCRFT_eAC_ACCEPTABILITY
{
    SCRFT_eAC_ACCEPTABILITY_BAD_LEVEL   =   0,
    SCRFT_eAC_ACCEPTABILITY_BAD_FREQUENCY =   1,
    SCRFT_eAC_ACCEPTABILITY_BEING_QUALIFIED =   2,
    SCRFT_eAC_ACCEPTABILITY_GOOD        =   3
} SCRFT_teAC_ACCEPTABILITY;

// Charger Operating State
// Used in the following fields:
//   SCRFT_tzPGN_CHG_STS.eOpState
typedef enum SCRFT_eCHG_OP_STATE
{
    SCRFT_eCHG_OP_STATE_NOT_CHARGING    =   0,
    SCRFT_eCHG_OP_STATE_BULK            =   1,
    SCRFT_eCHG_OP_STATE_ABSORPTION      =   2,
    SCRFT_eCHG_OP_STATE_OVERCHARGE      =   3,
    SCRFT_eCHG_OP_STATE_EQUALIZE        =   4,
    SCRFT_eCHG_OP_STATE_FLOAT           =   5,
    SCRFT_eCHG_OP_STATE_NO_FLOAT        =   6,
    SCRFT_eCHG_OP_STATE_CONSTANT_VI     =   7,
    SCRFT_eCHG_OP_STATE_CHARGER_DISABLED =   8,
    SCRFT_eCHG_OP_STATE_QUALIFYING_AC   =   9,
    SCRFT_eCHG_OP_STATE_QUALIFYING_APS  =  10,
    SCRFT_eCHG_OP_STATE_ENGAGING_CHARGER =  11,
    SCRFT_eCHG_OP_STATE_CHARGER_FAULT   =  12,
    SCRFT_eCHG_OP_STATE_CHARGER_SUSPEND =  13,
    SCRFT_eCHG_OP_STATE_AC_GOOD         =  14,
    SCRFT_eCHG_OP_STATE_APS_GOOD        =  15,
    SCRFT_eCHG_OP_STATE_AC_FAULT        =  16,
    SCRFT_eCHG_OP_STATE_CHARGE          =  17
} SCRFT_teCHG_OP_STATE;

// Inverter Operating State
// Used in the following fields:
//   SCRFT_tzPGN_INV_STS.eOpState
typedef enum SCRFT_eINV_OP_STATE
{
    SCRFT_eINV_OP_STATE_INVERT          =   0,
    SCRFT_eINV_OP_STATE_AC_PASSTHRU     =   1,
    SCRFT_eINV_OP_STATE_APS_ONLY        =   2,
    SCRFT_eINV_OP_STATE_LOAD_SENSE      =   3,
    SCRFT_eINV_OP_STATE_INVERTER_DISABLED =   4,
    SCRFT_eINV_OP_STATE_LOAD_SENSE_READY =   5,
    SCRFT_eINV_OP_STATE_ENGAGING_INVERTER =   6,
    SCRFT_eINV_OP_STATE_INVERT_FAULT    =   7,
    SCRFT_eINV_OP_STATE_INVERTER_STANDBY =   8
} SCRFT_teINV_OP_STATE;

// Charger Mode
// Used in the following fields:
//   SCRFT_tzPGN_CHG_STS.eChgMode
typedef enum SCRFT_eCHG_MODE
{
    SCRFT_eCHG_MODE_STAND_ALONE         =   0,
    SCRFT_eCHG_MODE_PRIMARY             =   1,
    SCRFT_eCHG_MODE_SECONDARY           =   2,
    SCRFT_eCHG_MODE_ECHO                =   3
} SCRFT_teCHG_MODE;

// WaveForm
// Used in the following fields:
//   SCRFT_tzPGN_AC_OUT_STS1.eWaveform
typedef enum SCRFT_eWAVE_FORM
{
    SCRFT_eWAVE_FORM_SINE_WAVE          =   0,
    SCRFT_eWAVE_FORM_MODIFIED_SINE_WAVE =   1,
    SCRFT_eWAVE_FORM_RESERVED           =   2,
    SCRFT_eWAVE_FORM_ERROR              =   6,
    SCRFT_eWAVE_FORM_DATA_NOT_AVAILABLE =   7
} SCRFT_teWAVE_FORM;


/************************************************************************************
    The structures for each PGN
************************************************************************************/

// Battery Status
typedef struct SCRFT_zPGN_BATT_STS
{
    uchar8 ucBattInst;              // Battery Instance
    sint16 siBattPot;               // Battery Potential
    sint16 siBattCurr;              // Battery Current
    uint16 uiBattCaseTemp;          // Battery Case Temperature
    uchar8 ucSid;                   // SID
} SCRFT_tzPGN_BATT_STS;

// AC Output Status 3
typedef struct SCRFT_zPGN_AC_OUT_STS3
{
    uchar8 ucAcSrcNum;              // AC Source Number
    SCRFT_teAC_LINE teLine;         // Line
    uint16 uiRealPwr;               // Real Power
    uint16 uiReactivePwr;           // Reactive Power
} SCRFT_tzPGN_AC_OUT_STS3;

// AC Output Status 2
typedef struct SCRFT_zPGN_AC_OUT_STS2
{
    uchar8 ucAcSrcNum;              // AC Source Number
    SCRFT_teAC_LINE teLine;         // Line
    uint16 uiVoltage;               // Voltage
    uint16 uiCurrent;               // Current
    uint16 uiFreq;                  // Frequency
} SCRFT_tzPGN_AC_OUT_STS2;

// AC Input Status 3
typedef struct SCRFT_zPGN_AC_IN_STS3
{
    uchar8 ucAcSrcNum;              // AC Source Number
    SCRFT_teAC_LINE teLine;         // Line
    uint16 uiRealPwr;               // Real Power
    uint16 uiReactivePwr;           // Reactive Power
} SCRFT_tzPGN_AC_IN_STS3;

// AC Input Status 2
typedef struct SCRFT_zPGN_AC_IN_STS2
{
    uchar8 ucAcSrcNum;              // AC Source Number
    SCRFT_teAC_LINE teLine;         // Line
    uint16 uiVoltage;               // Voltage
    uint16 uiCurrent;               // Current
    uint16 uiFreq;                  // Frequency
} SCRFT_tzPGN_AC_IN_STS2;

// Battery Detailed Status
typedef struct SCRFT_zPGN_BATT_DETAIL_STS
{
    uchar8 ucBattInst;              // Battery Instance
    uchar8 ucSoc;                   // State of Charge
    uchar8 ucSoh;                   // State of Health
    uint16 uiTimeRemain;            // Time Remaining
    uint16 uiRippleVoltage;         // DC Ripple Voltage
} SCRFT_tzPGN_BATT_DETAIL_STS;

// Inverter Status
typedef struct SCRFT_zPGN_INV_STS
{
    uchar8 ucACSrcNum;              // AC Source Number
    SCRFT_teINV_OP_STATE teOpState; // Operating State
    SCRFT_teGENERIC_STSPAIR teInvEnDis; // Invert Enabled/Disabled
    SCRFT_teGENERIC_STSPAIR teBattTempSensPres; // Battery Temperature Sensor Present
} SCRFT_tzPGN_INV_STS;

// AGS Status
typedef struct SCRFT_zPGN_AGS_STS
{
    uchar8 ucAgsOpState;            // AGS Operating State
    uchar8 ucGenState;              // Generator State
    uchar8 ucGenOnReason;           // Generator On Reason
    uchar8 ucGenOffReason;          // Generator Off Reason
    SCRFT_teGENERIC_STSPAIR teAgsToGenSig; // AGS To Generator Signal
    uint16 uiTimeIntvl;             // Time Interval
} SCRFT_tzPGN_AGS_STS;

// Charger Status
typedef struct SCRFT_zPGN_CHG_STS
{
    uchar8 ucDCSrcNum;              // DC Source Number
    SCRFT_teCHG_OP_STATE teOpState; // Operating State
    SCRFT_teCHG_MODE teChgMode;     // Charger Mode
    SCRFT_teGENERIC_STSPAIR teChgEnDis; // Charger Enabled/Disabled
    SCRFT_teGENERIC_STSPAIR teBattTempSensPres; // Battery Temperature Sensor Present
    SCRFT_teGENERIC_STSPAIR teEqlzPending; // Equalization Pending
    uint16 uiEqlzTimeRemain;        // Equalization Time Remaining
} SCRFT_tzPGN_CHG_STS;

// AC Output Status 1
typedef struct SCRFT_zPGN_AC_OUT_STS1
{
    uchar8 ucAcSrcNum;              // AC Source Number
    uchar8 ucNumLines;              // Number of Lines
    SCRFT_teAC_LINE teLine;         // Line
    SCRFT_teWAVE_FORM teWaveform;   // Waveform
    schar8 scPwrFac;                // Power Factor
} SCRFT_tzPGN_AC_OUT_STS1;

// AC Input Status 1
typedef struct SCRFT_zPGN_AC_IN_STS1
{
    uchar8 ucAcSrcNum;              // AC Source Number
    uchar8 ucNumLines;              // Number of Lines
    SCRFT_teAC_LINE teLine;         // Line
    SCRFT_teAC_ACCEPTABILITY teAcceptability; // Acceptability
    schar8 scPwrFac;                // Power Factor
} SCRFT_tzPGN_AC_IN_STS1;


#endif

//*****************************************************************************
// End of file.
//! @}
//*****************************************************************************
